[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d iTrack Pro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103-T09-2/main[image:https://travis-ci.org/AY1920S2-CS2103-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://app.netlify.com/sites/eager-kirch-5d6bd2/deploys[image:https://api.netlify.com/api/v1/badges/8179f1a7-7a48-48a7-98ac-85784b47997d/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103-T09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103-T09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::images/Ui.png[width\u003d\"600\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* iTrack Pro is for the shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* It is also able to provide an analysis of the entire business to help the owner manage the shop."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* This is a desktop Java Application. It has a GUI (Graphic User interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Shop owners who"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Are selling products"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cannot afford expensive management systems"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Are relying on manual work to record products"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Want to optimise sales based analysis of previous sales"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Have many products and a large inventory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Prefer typing over mouse input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Are reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The application is based on the https://github.com/nus-cs2103-AY1920S2/addressbook-level3[AddressBook-Level3] project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 12,
      "-": 25,
      "junhaotan": 2,
      "YingxuH": 8
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    archiveName \u003d \u0027[CS2103-T09-2][iTrack Pro].jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u0027site-name\u0027: \u0027iTrack Pro\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-T09-2/main.git\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //\u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 151,
      "junhaotan": 10
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "iTrack Pro was developed by the AY1920S2-CS2103-T09-2 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Tan Su Yee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::aliciatxl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "{empty}[https://github.com/aliciatxl[github]][\u003c\u003caliciatxl#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Role: Project Advisor +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Responsibilities: Product features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Tan Jun Hao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::junhaotan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "{empty}[http://github.com/junhaotan[github]][\u003c\u003cjunhaotan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Responsibilities: Customer features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d He Yingxu"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::YingxuH.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "{empty}[http://github.com/YingxuH[github]][\u003c\u003cYingxuH#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Responsibilities: Transaction features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 24,
      "junhaotan": 7
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103-T09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Email us* : You can also reach us at `e0037186@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d iTrack Pro - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "junhaotan": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d iTrack Pro - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "By: `iTrackPro Team`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `deletep 1`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".Component interactions for `deletep 1` command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::ArchitectureSequenceDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CustomerListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  `Logic` uses the `InventorySystemParser` class to parse the user command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a customer)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletec 1\")` API call."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".Interactions Inside the Logic Component for the `deletec 1` Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* stores the Inventory System data."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCustomer\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cProduct\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTransaction\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Inventory System`, which `Customer` can reference. This would allow `Inventory System` to only require one `Tag` object per unique `Tag`, instead of each `Customer` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image:BetterModelClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* can save the Inventory System data in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "// tag::manageitem[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Add/delete/edit/clear/list/find \u003c\u003ccustomer,customer\u003e\u003e/\u003c\u003cproduct,product\u003e\u003e feature"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The manage product mechanism is facilitated by `InventorySystemParser`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "First, the InventorySystemParser class parses the user command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "This results in a Command object which is executed by the LogicManager."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The command execution modifies Model\u0027s customer list depending on the command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The following commands are available to be parsed by InventorySystemParser:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `AddCustomerCommand/AddProductCommand`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Adds the customer/product into the list in the inventory system."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `ListCustomerCommand/ListProductCommand`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Lists all customer/product in the list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `ClearCustomerCommand/ClearProductCommand`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Clears all customer/product in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `DeleteCustomerCommand/DeleteProductCommand`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Deletes the selected customer/product from the list in the inventory system."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `EditCustomerCommand/EditProductCommand`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Edits the customer/product details."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `FindCustomerCommand/FindProductCommand`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "- Finds customer/product with attributes containing given keyword(s)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The commands all inherit from superclass `Command`. Only add, delete, edit and find commands require a command parser to parse the arguments entered by the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The following sequence diagram shows how the add operation works:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::AddItemSequenceDiagram.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::ListItemSequenceDiagram.png[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The following sequence diagram shows how the edit operation works:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::EditItemSequenceDiagram.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a command that changes the customer/product list in the model:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::CommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How commands are executed"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 1 (current choice):** Keep customers/products in the inventory system"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Pros: Easy to implement, use less memory"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: If inventory system is corrupted then the data is lost"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 2:** Keep customers/products in individual management systems, separate each of the classes"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Pros: Keep implementation of products, customers and transactions separate"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cons: Use more memory, tedious implementation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the commands"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 1 (current choice):** Use a list (`ArrayList`) to store the customers/products"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Pros: Easy to sort and iterate through the list, get(index) method always gives an O(1) performance"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cons: allows duplicates"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 2:** Use a hashmap to store the customers/products"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: Find can be done in O(1), does not allow duplicate keys"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cons: Difficult to sort and iterate through hashmap, get(key) can be O(1) in the best case and O(n) in the worst case."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "// end::manageitem[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "// tag::managetransaction[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Add/edit/undo/list/find \u003c\u003ctransaction,transactions\u003e\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The user input is handled by the `MainWindow` class in Ui first, then passed to the `LogicManager` and parsed into"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`AddTransactionCommand`, `EditTransactionCommand`, etc. Depending on the nature of each command, new transaction or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "updated transaction will be added to a new index or existing index of the `UniqueTransactionList`, hosted by the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`InventorySystem` class. For the `deleteTransactionCommand`, a transaction will be dropped from the `internalList`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Since the `quantity` and `sales` attribute will affect the same attributes of a product, the affiliated `product` will"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "also be edited. In the end, the `filteredTransactionList` of the system will be updated so that the user can view the change"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "accordingly. For the list and find transction commands, the filteredTransactionList will be updated for the UI to interact with users."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "One command is implemented for each operations in the logic module:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `AddTransactionCommand` -- Adds a transaction into the system and update the the quantity and sales attribute"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "of the corresponding product."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `EditTransactionCommand` -- Edit details of a transaction. If `quantity` is changed, edit the affected product"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "as well."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `UndoTransactionCommand` -- Undo a transaction from the system and edit the affiliated product."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `ListTransactionCommand` -- List all the transaction in the system."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `FindTransactionCommand` -- Find certain transactions by keywords."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "For each command, a parser is implemented to parse the input into arguments."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `AddTransactionCommmandParser` -- Parse the add transaction input and generates `AddTransactionCommand`. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `EditTransactionCommandParser` -- Parse the edit transaction input and generates `EditTransactionCommand`. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `UndoTransactionCommandParser` --Parse the undo transaction input and generates `UndoTransactionCommand`. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `ListTransactionCommandParser` --Parse the list transaction input and generates `ListTransactionCommand`. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `FindTransactionCommandParser` --Parse the find transaction input and generates `FindTransactionCommand`. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The following sequence diagram shows how each operation works."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "AddTransaction Operation:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "image::AddTransactionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The AddTransactionCommmandParser returns a transactionFacotry with `productIndex` and `customerIndex`, while a"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "transaction is only generated in AddTransactionCommand."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "EditTransaction Operation:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Unlike the edit operation of customer and products, editting transaction will trigger another operation of"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "editting its associated product with the new quantity and money. If its product is editted, its quantity will be added back"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "to the original product\u0027s quantity, and the new quantity will be deducted from the quantity of the newly referenced product. The update on sales object will"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "be done in the reverse way. In the end, the new transction and product will replace the old ones in the system."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "image::EditTransactionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "UndoTransaction Operation:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Undoing a transaction will add back its quantity to teh associated product and remove its amount of money from the"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "sales of that product."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "image::UndoTransactionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "ListTransaction/FindTransaction Operation:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The list operation for transaction is the same as that for products and customers."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store product \u0026 customer in transaction."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* **Alternative 1 (current choice):** Store an unique id and name of the product/ customer."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Pros: Do not need to update transaction while product is editted."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Cons: More complex when displaying the customer/product information in UI. Needs to query model whenver"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "the system needs to calcualte statistics related with product and transactions."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* **Alternative 2 (previous choice):** Store the product/ customer instance as an attribute."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Pros: Easy to construct a transaction and display product/ customer name."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Cons: Easy to generate bugs while any of the instance is editted. Needs to update the product in transaction when a product"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "is editted."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to change the quantity \u0026 sales attribute of product while editing transactions."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* **Alternative 1 (current choice):** If quantity/ product is changed, check validation first,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "re-store the quantity \u0026 sales of the original product, and then"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "and update the quantity \u0026 sales of the new product."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Pros: Straightforward logic, not likely to create bugs."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Cons: Validation checking would be very complex."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* **Alternative 2 (previous choice):** If quantity/ product is changed,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "re-store the quantity \u0026 sales of the original product, check validation"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "(whether the product has that much inventory as required on transaction), and then"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "and update the quantity \u0026 sales of the new product."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Cons: Likely to generate bugs when the new quantity exceeds inventory, i.e. the edit operation is not valid."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "// end::managetransaction[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::getprofitrevenue[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Get \u003c\u003crevenue,revenue\u003e\u003e/\u003c\u003cprofit,profit\u003e\u003e feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The manage product mechanism is facilitated by `InventorySystemParser`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "First, the InventorySystemParser class parses the user command."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Then the `RevenueCommandParser/ProfitCommandParser` parses the user input arguments into Command objects."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The resulting `RevenueCommand/ProfitCommand` is executed by the LogicManager."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The command execution calculates the revenue/profit depending on the command."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The following commands are available to be parsed by InventorySystemParser:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `RevenueCommand`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "- Gets the revenue made in a selected period."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `ProfitCommand`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "- Gets the profit made in a selected period."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The commands all inherit from superclass `Command` and require command parsers to parse the user input arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The following sequence diagram shows how the profit operation works:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::ProfitSequenceDiagram.png[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The revenue operation works in the same way as the profit operation."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How commands are executed"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* **Alternative 1 (current choice):** Calculate revenue/profit only when needed"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Pros: Decreases coupling, easy to test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cons: Need to keep calculating if command is frequently used (increase time complexity especially if transaction list is long)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* **Alternative 2:** Keep track of revenue/profit in a singleton class"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Pros: No need to calculate when revenue/profit command is executed (instead, revenue/profit is updated whenever a transaction is added or edited)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cons: Hard to unit test, increase coupling"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::getprofitrevenue[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//tag::plotsalesfeature[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Plot the quantity sold of a product"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The plot sales command is facilitated by `InventorySystemParser`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "First, the InventorySystemParser class parses the user command."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Then the `PlotSalesCommandParser` parses the user input arguments into the index of the product,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "the `start date`, and the `end date`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The generated `PlotSalesCommand` is executed by the LogicManager."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The command execution generates a daily time sequence and calcualte the quantity sold on each day by querying all the"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "related transactions. The time series data and the signal of displaying the sales graph is then encapsulated"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "as a CommandResult object which is passed back to the Ui."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The following sequnce diagram shos how the plot sale operation works:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "image:PlotSalesSequenceDiagram.png[]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//end::plotsalesfeature[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//end::lowlimitfeature[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//tag::lowlimitfeature[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Set low limit threshold to receive notifications for products"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The low limit mechanism is facilitated by `InventorySystemParser`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "First, the InventorySystemParser class parses the user command."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Then the `LowLimitCommandParser` parses the user input arguments into `LowLimitCommand` object."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The resulting `LowLimitCommand` is executed by the LogicManager."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The command execution sets the updated threshold for the chosen product."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The command inherit from superclass `Command` and require command parser to parse the user input arguments."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The following sequence diagram shows how the low limit operation works:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image:LowLimitCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the threshold field is being updated."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 1 (current choice):** Separate low limit threshold command with edit product command"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: Decreases coupling, easier to test."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Additional command to edit the field of an product."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 2:** Integrate with existing edit product command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: Will reduce number of commands the user needs to use."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Hard to unit test, increase coupling."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//end::lowlimitfeature[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//tag::notificationWindow[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Notification window for products"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The notification window appears whenever an product\u0027s quantity reaches the threshold that was set."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "It comes with information such as the product\u0027s description and remaining quantity left."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The following activity diagram shows how the operation works:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image:NotificationWindowActivityDiagram.png[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Display of the notification window"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 1 (current choice):** Only display product\u0027s name and remaining quantity."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: User friendly, easy to implement."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Have to find and change the product\u0027s quantity via the command line."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 2:** Provide quick way to change product\u0027s quantity via GUI"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: Speeds up the process of stocking up."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Hard to do testing for GUI, and project scope was on command line application."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//end::notificationWindow[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//tag::sortProductList[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Sort Product List"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The product list sorts by the progress bar indicator beside each product\u0027s description whenever user enters `listp` command. +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image:SortingExample.png[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The following activity diagram shows how the operation works:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image:SortProductListActivityDiagram.png[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When to sort the product list"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 1 (current choice):** Sorts only when user uses `listp` function."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: More intuitive and user friendly."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Might be hard to track products\u0027 remaining balance without listing all the products."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **Alternative 2:** Sorts whenever the product list is updated."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Pros: Easy to track products\u0027 remaining balance."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Cons: Might be confusing for user as the indexes for product will change as the product list is sorted automatically,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "resulting in user to recheck products\u0027 index before entering in commands."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//end::sortProductList[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*Target user profile*: Shop owners who"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Are selling products"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Cannot afford expensive management systems"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Are relying on manual work to record products"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Want to optimise sales based analysis of previous sales"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Have many products and a large inventory"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Prefer typing over mouse input"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Are reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to it when I forgot how to use the app"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* * *` |user |add \u003c\u003citem,items\u003e\u003e to the system |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* * *` |user |delete my \u003c\u003citem,items\u003e\u003e from the system |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* * *` |user | edit my \u003c\u003citem,item\u003e\u003e details in the system |keep the list updated"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* * *` |user |view all \u003c\u003citem,items\u003e\u003e in my shop |keep track of my \u003c\u003citem,items\u003e\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |user |find \u003c\u003citem,items\u003e\u003e by keyword or attributes |search \u003c\u003citem,items\u003e\u003e more efficiently"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |user |receive notifications when the \u003c\u003cproduct, product\u003e\u003e quantity is running low |stock up for the particular \u003c\u003cproduct, product\u003e\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`* *` |user |set the inventory quantity low limit |get notified when my stock is running low"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |analytical user |view the top-selling \u003c\u003cproduct, products\u003e\u003e and worst-selling \u003c\u003cproduct, products\u003e\u003e at one glance (e.g. dashboard that displays name of \u003c\u003cproduct, products\u003e\u003e) |"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |analytical user |view the sales or quantity of each individual \u003c\u003cproduct, product\u003e\u003e in graphical format | so that it is easier to visualise"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |analytical user |see predicted sales for the next month based on past sales |know which \u003c\u003cproduct, products\u003e\u003e to stock up on"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |analytical user |view a list of \u003c\u003cproduct, products\u003e\u003e sorted by the amount of profits |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|`* *` |analytical user |view the revenue on a daily/ monthly/ yearly basis or in a customised period |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`*` |lazy user |keep track of previous inputs |enter/edit previous commands easily"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|`*` |lazy user |access \u003c\u003cproduct, products\u003e\u003e that are running low in quantity easily |restock and update the system much faster"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "(For all use cases below, the *System* is the `iTrack Pro` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Use case:  UC01 - Delete an \u003c\u003citem,item\u003e\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User requests to pass:[\u003cu\u003elist items (UC05)\u003c/u\u003e]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app displays a list of requested items."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "3. User requests to delete a specific item in the list"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "4. The item is deleted from the list"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 3a1. The app shows an error message."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Use case:  UC02 - Add an \u003c\u003citem,item\u003e\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User adds an item."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app notifies the user that the item is added."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 1a. The add command is invalid or incomplete."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a1. The app shows an error message."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a2. The app shows an example of valid input for the command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Use case:  UC03 - Edit an \u003c\u003citem,item\u003e\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User requests to pass:[\u003cu\u003elist items (UC05)\u003c/u\u003e]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app displays a list of requested items."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "3. User requests to edit a specific item in the list."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "4. The item is updated with the new information entered by the user."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 3a1. The app shows an error message."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 3b. The edit command input is invalid or incomplete."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 3b1. The app shows an error message."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 3b2. The app shows an example of valid input for the command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Use case:  UC04 - Find \u003c\u003citem,items\u003e\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "1. User requests to find items by keyword and/or attribute."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app displays the search result."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* 1a. No item was found with the keyword and/or attribute entered."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a1. The app shows a prompt message that no such item was found."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 1b. The find command input is invalid or incomplete."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1b1. The app shows an error message."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1b2. The app shows an example of valid input for the command."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d\u003d Use case:  UC05 - List \u003c\u003citem,items\u003e\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User requests to list items."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app displays a list of requested items."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 2a1. The app shows a prompt message that the list is empty."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Use case:  UC06 - View statistics (profit, revenue)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User requests to view statistics."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app shows all statistics."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 2a. There are no products, hence no statistics can be shown."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 2a1. The app shows an error message."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Use case:  UC07 - Predict sales"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User requests to predict sales for next month."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. The app shows the predictions."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 2a. There are no products, hence no predictions can be made."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 2a1. The app shows an error message."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Use case:  UC08 - Configure low inventory notification settings (for products)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "1. User sets the quantity threshold for a particular product."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* 1a. The input limit is invalid or out of range or the product index is invalid."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a1. The app shows an error message."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Use case:  UC09 - Plot the quantity sold of a product (for products)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User enters the index of the product as well as the start date and end date for ploting purposes."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 1a. The index is out of boundary."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a1. The app shows an error message."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  Should be able to hold up to 1000 customers without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The system should work on Windows, Linux or Mac operating aystems."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The system should be usable by a novice who has never used an inventory management system."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The system should save the \u003c\u003cproduct, product\u003e\u003e, \u003c\u003ccustomer, customer\u003e\u003e and \u003c\u003ctransaction, transaction\u003e\u003e data permanently."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  There should be at least one \u003c\u003cproduct, product\u003e\u003e and \u003c\u003ccustomer, customer\u003e\u003e before a \u003c\u003ctransaction, transaction\u003e\u003e can be made."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The response to any use action should become visible within 5 seconds."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The system should be able to have up to 1000000 \u003c\u003ccustomer, customers\u003e\u003e, 1000000 \u003c\u003cproduct, products\u003e\u003e and 1000000 \u003c\u003ctransaction, transactions\u003e\u003e."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The product (price, cost price, quantity, sales), transaction (quantity, money) fields and quantity threshold should be able to take integers up to 1000000."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The price and cost price should be at least $1."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The customer\u0027s address field should take up to 45 characters."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The customer\u0027s name field should take up to 30 characters."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The customer\u0027s phone field should be between 3 to 15 characters long and contain only integers."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  The customer\u0027s email field should take up to 40 characters and should be a valid email format."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  A customer can have up to 5 tags where each tag is up to 15 characters long."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The source code should be open source."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  The product is offered as a free downloadable \u003c\u003cjar, jar\u003e\u003e file."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[item]] Item::"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Any item belonging to either customer, product or a transaction class"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[customer]] Customer::"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "A customer that buys the user’s shop"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[product]] Product::"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "An item that is sold in the user’s shop"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[transaction]] Transaction::"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "A deal between a customer and the user’s shop that is made on a product"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[inventory]] Inventory::"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The products in stock."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[revenue]] Revenue::"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The sales of the product, calculated by adding up the transaction amounts of a particular product."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[revenue]] Profit::"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The money gained from the sale of the product minus cost of product, calculated by revenue - total cost."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[sales]] Sales::"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Used interchangeably with revenue"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[price]] Price::"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Selling price of the product"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[cost]] Cost price::"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Price of making/ buying the product to sell"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[jar]] Jar File::"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "A https://en.wikipedia.org/wiki/JAR_(file_format)[JAR] (Java ARchive) is a package file format typically used to aggregate many Java class files and associated metadata and resources (text, images, etc.) into one file for distribution."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "   Expected: Shows the GUI with a set of sample inventory system data. The window size may not be optimum."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Customer"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a customer"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Adding a customer"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addc n/John p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney` +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Customer with given attributes is added to list. Details of the added customer shown in the status message."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: the following command already has been executed once already +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Test case: `addc n/John p/98765432` +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No customer is added as duplicate customers are not allowed. Error details shown in the status message."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addc n/Jane p/98765432 e/jane@example.com a/31 michigan t/friends t/owesMoney t/iphone t/comingThurs t/regular t/giveDiscount` +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No customer is added as number of tags should be at most five. Error details shown in the status message."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `addc n/Bob n/Eddy p/98765432 e/bob@example.com a/323, Tampines Ave 3, #12-21 t/colleagues` +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No customer is added as there are multiple name prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect add commands to try: `addc n/Jill`, `addc n/Jill p/0 e/jill@mail.com a/31 michigan` +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a customer"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ". Deleting a customer while all customers are listed"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all customers using the `listc` command. Multiple customers in the list."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `deletec 1` +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First customer is deleted from the list. Details of the deleted customer shown in the status message."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `deletec 0` +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No customer is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect delete commands to try: `deletec`, `deletec x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a customer"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Editing a customer while all customers are listed"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all customers using the `listc` command. Multiple customers in the list."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editc 1 n/Bob` +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First customer is edited from the list. Details of the edited customer shown in the status message."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editc 1 e/0` +"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No customers is edited as email is invalid. Error details shown in the status message."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `editc 1 n/Johnathan n/Alex` +"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No customers is edited as there are multiple name prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect edit commands to try: `editc 1`, `editc x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all customers"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Clearing all customers"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `clearc` +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All customers are cleared. Details of success message is shown in the status bar."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all customers"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Listing all customers"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `listc` +"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All customers are listed. Details of success message is shown in the status bar."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding customers"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Finding customers"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findc n/alice` +"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All customers with full word \u0027alice\u0027 in name are listed. Details of success message is shown in the status bar."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `findc n/alex alice` +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All customers with full word \u0027alex\u0027 **OR** \u0027alice\u0027 in name are listed. Details of success message is shown in the status bar."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findc a/serangoon yishun` +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All customers with full words matching \u0027serangoon\u0027 **OR** \u0027yishun\u0027 in their addresses are listed. Details of success message is shown in the status bar."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findc a/serangoon n/bob` +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All customers with full words matching \u0027serangoon\u0027 in their addresses **AND** \u0027bob\u0027 in their names are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `findc n/alex n/peter` +"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No customers found as there are multiple name prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Product"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a product"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Adding a product"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addp d/iphone cp/400 pr/1000 q/10 s/100` +"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "   Expected: Product with given attributes is added to list. Details of the added product shown in the status message."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: the following command already has been executed once already +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "   Test case: `addp d/iphone cp/400 pr/1000 q/10 s/100` +"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "   Expected: No product is added as duplicate products are not allowed. Error details shown in the status message."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addp d/iphone cp/400.5 pr/1000 q/10` +"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "   Expected: No product is added as cost price should be an integer. Error details shown in the status message."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case : `addp d/iphone d/ipad cp/400 pr/1000 q/10` +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "   Expected: No product is added as there are multiple description prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect add commands to try: `addp d/iphone cp/40 pr/1000 q/x` (where x is larger than 1000000), `addp d/iphone cp/40 q/100000` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a product"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Deleting a product while all products are listed"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all products using the `listp` command. Multiple products in the list."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `deletep 1` +"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First product is deleted from the list. Details of the deleted product shown in the status message."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `deletep 0` +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No product is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect delete commands to try: `deletep`, `deletep x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a product"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Editing a product while all products are listed"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all products using the `listp` command. Multiple products in the list."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editp 1 d/Bag` +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First product is edited from the list. Details of the edited product shown in the status message."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editp 1 pr/0` +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No product is edited as price is invalid. Error details shown in the status message."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `editp 1 pr/300 pr/500` +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No product is edited as there are multiple price prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect edit commands to try: `editp 1`, `editp x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all products"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Clearing all products"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `clearp` +"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All products are cleared. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all products"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Listing all products"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `listp` +"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All products are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding products"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Finding products"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findp bag` +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All products with full word \u0027bag\u0027 in description are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findp bag yellow` +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All products with full words matching \u0027bag\u0027 or \u0027yellow\u0027 in description are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Transaction"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a transaction"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Adding a transaction"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addt c/1 p/1 q/1 dt/2020-04-11 11:44 m/30 d/under discount` +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Transaction with given attributes is added to list. Details of the added transaction shown in the status message."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: the following command already has been executed once already +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Test case: `addt c/1 p/1 q/1 dt/2020-04-11 10:44 m/30 d/under discount` +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No transaction is added as duplicate transactions are not allowed. Error details shown in the status message."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `addt c/1 p/1 q/0` +"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No transaction is added as quantity should be a positive integer. Error details shown in the status message."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `addt c/1 c/1 p/1 q/10` +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No transaction is added as there are multiple customer prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect add commands to try: `addt c/x p/1 q/2` (where x is larger than size of customer list), `addt c/1 p/1` +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a transaction"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Undoing a transaction while all transactions are listed"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all transactions using the `listt` command. Multiple transactions in the list."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `undot 1` +"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First transaction in the list is undone. Details of the undone transaction shown in the status message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `undot 0` +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No transaction is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect undo commands to try: `undot`, `undot x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a transaction"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Editing a transaction while all transactions are listed"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all transactions using the `listt` command. Multiple transactions in the list."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editt 1 d/Discount` +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: First transaction is edited from the list. Details of the edited transaction shown in the status message."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `editt 1 m/0` +"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: No transaction is edited as amount is invalid. Error details shown in the status message."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `editt 1 d/Discount d/offer` +"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No transaction is edited as there are multiple description prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect edit commands to try: `editt 1`, `editt x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all transactions"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Clearing all transactions"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `cleart` +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All transactions are cleared. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all transactions"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Listing all transactions"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `listt` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All transactions are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding transactions"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Finding transactions"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findt c/alice` +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: All transactions with full word \u0027alice\u0027 in their customer names are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findt p/bag watch` +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All transactions with full words matching \u0027bag\u0027 **OR** \u0027watch\u0027 in their product names are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `findt c/alice m/10` +"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: All transactions with full words matching \u0027alice\u0027 in their customer names **AND** have transaction amounts of 10 are listed. Details of success is shown in the status bar."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ".. Test case: `findt c/alice c/john` +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Expected: No transaction found as there are multiple customer prefixes. Error details shown in the status message."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the revenue made in a certain period"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Getting the revenue made in a certain period"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: There is at least one product present."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `revenue sd/2020-01-01 10:00 ed/2020-12-12 10:01` +"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: The calculated revenue is shown in the status message."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `revenue sd/2020-09-01 10:00 ed/2020-01-12 10:01` +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Revenue cannot be calculated if start date is after end date. Error details shown in the status message."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect revenue commands to try: `revenue sd/2020-01-01 10:00 ed/2020-01-12`, `revenue` +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the profit made in a certain period"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Getting the profit made in a certain period"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: There is at least one product present."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `profit sd/2020-01-01 10:00 ed/2020-12-12 10:01` +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: The calculated profit is shown in the status message."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `profit sd/2020-09-01 10:00 ed/2020-01-12 10:01` +"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Profit cannot be calculated if start date is after end date. Error details shown in the status message."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect profit commands to try: `profit sd/2020-01-01 10:00 ed/2020-01-12`, `profit` +"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the low-inventory threshold"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Setting the low-inventory threshold"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: There is at least one product present."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `lowlimit p/1 t/20` +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: The calculated profit is shown in the status message."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `lowlimit p/1 t/0` +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Current threshold of product is not modified as threshold can only take positive integer values. Error details shown in the status message."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect lowlimit commands to try: `lowlimit p/x t/20` (where x is more than product list size), `lowlimit` +"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Predicting the sales for the next month"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Predicting the sales for the next month"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: There is at least one product present."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `predict` +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: The predicted revenue for next month is shown in the status message."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Plotting sales of a product"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ". Plotting sales of a product"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Prerequisites: List all products using the `listp` command. Multiple products in the list."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `plotsales 1 sd/2020-03-20 10:00 ed/2020-03-30 10:00` +"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: The sales of the product is plotted in a graph in a new window that pops up."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Test case: `plotsales 1 sd/2020-03-20 10:00 ed/2020-01-30 10:00` +"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Sales of product is not plotted as start date is after end date. Error details shown in the status message."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".. Other incorrect plotsales commands to try: `plotsales x sd/2020-03-20 10:00 ed/2020-03-30 10:00` (where x is more than product list size), `plotsales` +"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Throughout this journey, we have overcame many challenges and gained much more experience in software engineering."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Our project was ambitious as it consisted of multiple entities. In addition to the original address book with the persons entity, we also included products and transactions to the system."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Since the structure was quite complex, we had to brainstorm about the best way to incorporate products and transactions into the app."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The person class had to be refactored to fit our user profile of customers."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The commands for products were similar to the original commands for person, however there were also some differences since the requirements for products and persons varied."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "For example, the attributes required for products were vastly different for customers, and new restrictions needed to be applied."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The commands for transactions were quite different from both customers and products, since transaction is an association class between customer and product."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "For example, the add transaction command affected the product quantity and sales, so it had to update the product too, whereas for customer and product there was no need to modify other classes."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "We also needed to consider the proper way to keep track of customers and products to ensure that there were no duplicates. Initially we tried keeping track using only the attributes however there were bugs so we added customer and product ids."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "With multiple entities, a lot of thought went into figuring out how to display all the data."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Throughout the process, we revamped the ui such that all the information would be presented clearly. Ultimately, our design differed from the original as we settled on a tab design."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Initially, there were different windows showing different information too. In the end, we combined most of the information into a single window, and split the information shown according to categories which were listed as tabs."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Besides the layout of the ui, the design also took time to finalise as we wanted to make our app look professional and modern."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Lastly, the statistics were quite challenging to implement. This is especially so as we used various bars and graphs, which were new to us and we had to learn independently."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The calculations were relatively easier as it was just simple math calculations of profit etc."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "In all, even though our project was complex, we managed to implement most of our features and even included extra features that we had not plan on intially. Given the moderate to high difficulty level of the project, we are glad that we achieved our project goals."
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 357,
      "-": 292,
      "junhaotan": 136,
      "YingxuH": 326
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d iTrack Pro - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 121
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all customers who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The above method can be used to get a printable string representing a bunch of customer details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "-": 214,
      "junhaotan": 2
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d iTrack Pro - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d iTrack Pro - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "junhaotan": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d iTrack Pro - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "By: `AY1920S2-CS2103-T09-2`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "iTrack Pro is for the grocery shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers. It is also able to provide an analysis of the entire business to help the owner manage the shop."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  Download the latest `iTrackPro.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Inventory System."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::Ui.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *`listc`* : lists all customers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* **`addc`** `n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a customer to the application"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* **`deletec`**`3` : deletes the 3rd customer shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[[Legend]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Legend"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Please take note of the three different types of notification that are used in the features section:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This tells you some things to take note of. It also helps to explain why we did what we did."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This provides tips on using the command the best way, and alternatives that can be used."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Pay attention to the warnings before you execute the command, or else things may not go according to what you expect."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "View the user guide page in a pop-out window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "image::Help.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::receivenotif[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Receiving notification while a certain product is running low."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Pops up notification if quantity of product is below threshold. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Displays the product name and remaining product quantity."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::PopupNotification.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This is a passive feature."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::receivenotif[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::exit[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting from the program : `exit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Exits from the program, closes all opened windows. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::exit[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::savedata[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The application data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::savedata[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::reuseinputs[]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Reusing previous inputs"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The application keeps the history of previous inputs that was keyed in the command line."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Can keep history of up to 100 inputs. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Up arrow key in command line to navigate up the history of inputs. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Down arrow key in command line to navigate down the history of inputs. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Commands are saved into the history automatically."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The history is deleted after application closes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::reuseinputs[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::lowstockproducts[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Keeping track of products that are running low on stock"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The product list updates and sorts by the progress bar indicator when user uses the `listp` command. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Products are ordered by the level of progress bar indicator. (E.g. the lower the bar, the higher it is in the list)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "This is to help the user easier to know which products are running low on stock."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::ProductCard.png[align\u003d\"center\" width\u003d\"600\"]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The progress bar indicator beside the products\u0027 name visualises the remaining balance. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The bar color depends on quantity / threshold * 5, and changes as the level decreases, from green -\u003e yellow -\u003e orange -\u003e red. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This is a passive feature. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Green: stock \u003e 60% +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Yellow: 40% \u003c stock \u003c 60% +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Orange: 20% \u003c stock \u003c 40% +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Red: stock \u003c 20%"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::lowstockproducts[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Manage customers"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::addc[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a customer: `addc`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Adds a customer to the customer list +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `addc n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* A customer can have up to 5 tags (including 0). +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Duplicate customers (with the same name, phone, email, address) are not allowed. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The address field can take up to 45 characters. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The name field can take up to 30 characters. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The phone field can be between 3 to 15 characters long and contain only integers. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The  email field can take up to 40 characters and should be a valid email format. +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields, except tags, are not allowed. E.g. keying in the email field for more"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The email field [e/] is optional, and will be recorded as N/A if left empty. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The address field [a/] is optional, and will be recorded as N/A if left empty."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `addc n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `addc n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::addc[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::listc[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all customers: `listc`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Shows a list of all customers in the customer list. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Format: `listc`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::listc[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::editc[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a customer: `editc`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits an existing customer in the customer list. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Format: `editc INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* Edits the customer at the specified `INDEX`. The index refers to the index number shown in the displayed customer list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* When editing tags, the existing tags of the customer will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* You can remove all the customer’s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields, except tags, are not allowed. E.g. keying in the email field for more"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `editc 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits the phone number and email address of the 1st customer to be 91234567 and johndoe@example.com respectively."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `editc 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits the name of the 2nd customer to be Betsy Crower and clears all existing tags."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::editc[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::findc[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding customers: `findc`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Finds customers whose attributes match the given attributes. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `findc [n/NAME [NAME]...] [p/PHONE] [e/EMAIL] [a/ADDRESS [ADDRESS]...]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* The search is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* Only full words will be matched for keywords e.g. Han will not match Hans"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The order of the keywords and attributes does not matter. e.g. Hans Bo will match Bo Hans, n/Bob a/31 will match a/31 n/Bob"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Only customers matching all attributes will be returned (i.e. AND search) e.g. `findc n/Jane a/31` will return customers with \u0027jane\u0027 in their names and \u002731\u0027 in their addresses"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Customers matching any keywords in an attribute (for name and address only) will be returned (i.e. OR search) e.g. `findc a/clementi ave` will return customers with \u0027clementi\u0027 or \u0027ave\u0027 in their addresses"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields, except tags, are not allowed. E.g. keying in the phone field for more"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::FindCustomerByAddress.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::FindCustomerByAddress2.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Only name and address support multiple keywords"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `findc n/John` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns all customers with names John from the customer list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `findc n/Betsy Tim John` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns any customer having names Betsy, Tim, *OR* John in the customer list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findc a/serangoon n/Bob` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns all customers with addresses in Serangoon *AND* Bob in their names."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::findc[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::deletec[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a customer: `deletec`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Deletes the specified customer from the customer list that is currently being displayed. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Format: `deletec INDEX`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Deletes the customer at the specified `INDEX`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* The index refers to the index number shown in the displayed customer list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes transactions that are associated with this particular customer as well."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `listc` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "`deletec 2` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Deletes the 2nd customer in the customer list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* `findc n/Betsy` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "`deletec 1` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Deletes the 1st customer in the results of the find command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::deletec[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::clearc[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all customers: `clearc`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Clears all entries from the customer list. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Format: `clearc`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Permanently deletes all the stored customer data in the application. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes all transactions as well."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::clearc[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Manage product"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::addp[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a product: `addp`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Adds a product to the product list. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `addp d/DESCRIPTION pr/PRICE q/QUANTITY cp/COSTPRICE [s/SALES]`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Duplicate products (with the same description, cost price, price) are not allowed. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The price, cost price, quantity and sales can take integers up to 1000000. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The price and cost price must be at least $1."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields are not allowed. E.g. keying in the price field for more"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The default threshold value is 20% of quantity of product."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "A product created without providing values for sales (in SGD) will be created with 0 sales."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::AddProduct.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `addp d/iphone x pr/1000 q/10 cp/300`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `addp d/camera pr/2000 q/90 s/100 cp/1000`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::addp[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::listp[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all products : `listp`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Show all products in the product list. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `listp`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Sorts all of the product by the product quantity, represented by the bar indicator beside the product name."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::listp[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::editp[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a product : `editp`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits an existing product in the displayed product list. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `editp INDEX [d/DESCRIPTION] [pr/PRICE] [q/QUANTITY] [cp/COSTPRICE] [s/SALES]`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Edits the product at the specified `INDEX`. The index refers to the index number shown in the displayed product list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields are not allowed. E.g. keying in the price field for more"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `editp 1 pr/1150 q/80` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits the price and quantity of the 1st product in the list to be $1150 and 80 respectively."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `editp 2 s/1000` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Edits the sales of the 2nd product in the list to be $1000."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::editp[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::findp[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding products : `findp`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Finds products whose description contains a certain keyword +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `findp KEYWORD [KEYWORD]...`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The search is case insensitive. e.g blue will match Blue"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* At least one of the option fields must be provided."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Only full words will be matched for keywords e.g. blu will not match blue"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The keyword will be searched only in the product’s description."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The order of the keywords does not matter. e.g. blue shoes will match shoes blue"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Products matching at least one keyword will be returned (i.e. OR search). e.g. blue shoes will return blue slippers, red shoes"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::FindProduct.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findp camera` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns all product with description `camera` in it."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findp iphone` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns all product with description `iPhone` in it."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::findp[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::deletep[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a product : `deletep`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes the specified product from the system. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `deletep INDEX`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Deletes the product at the specified `INDEX`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The index refers to the index number shown in the displayed product list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "This action deletes transactions that are associated with this particular product as well."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `listp` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "`deletep 2` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes the 2nd product in the product list."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findp camera` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "`deletep 1` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes the 1st product in the results of the find command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::deletep[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::clearp[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all products : `clearp`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Clears all entries from the product list. +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `clearp`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Permanently deletes all the stored product data in the application. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Deletes all transactions as well."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::clearp[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Transaction"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "User can navigate to the transaction panel by clicking on the transactions tab."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::TransactionTab.png[width\u003d\"200\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::addt[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a transaction : `addt`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Adds a specified transaction to the system. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Format: `addt p/PRODUCT_ID c/CUSTOMER_ID q/QUANTITY [dt/DATETIME] [m/MONEY] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* Duplicate transactions (with the same customer, product, datetime) are not allowed. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The quantity and money fields can take integers up to 1000000. +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The quantity must be at least 1."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields are not allowed. E.g. keying in the quantity field for more"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The date time field [dt/] is optional, and will be recorded as current local machine time if left empty. +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The money field [m/] is optional, and will be recorded as product price multiplied by quantity if left empty."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Only need to enter if necessary (i.e. discounts on products). +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The description field [d/] is optional, will be recorded as N/A if left empty."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Only need to enter if user wants to add notes to the transaction."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Adding transaction will update the quantity and sales of its associated product as well."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::AddTransaction.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "After adding transactions, the transaction list can be viewed under the transaction tab."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::AddTransaction2.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `addt p/1 c/10 dt/2020-02-19 19:00 q/10 m/20` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Adds a transaction, where the 10th customer bought 10 of the 1st product for $20 at 2020-02-19 19:00."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `addt p/20 c/2 dt/2020-02-20 10:00 q/10 m/30 d/under discount` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Adds a transaction, where the 2nd customer bought 10 of the 20th product for $30 at 2020-02-20 10:00 at an discount."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::addt[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::listt[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all transactions : `listt`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Lists all the transactions. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `listt`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::listt[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::editt[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a transaction : `editt`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Edits a transaction in the system. It allows the user to edit wrong transction"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " with correct information. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `editt INDEX [p/PRODUCT_ID] [c/CUSTOMER_ID] [dt/DATE_TIME] [q/QUANTITY] [m/MONEY] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Edits the transaction at the specified `INDEX`. The index refers to the index number shown in the displayed transaction list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields are not allowed. E.g. keying in the quantity field for more"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Editting the quantity or money of a transaction will update the quantity and sales"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "of its associated product as well."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `editt 1 p/101 c/123` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Edits the product id and customer id of the 1st transaction to be 101 and 123 respectively."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::editt[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::findt[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding transactions : `findt`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Finds transactions whose attributes match the given attributes. +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `findt [p/PRODUCT_NAME [PRODUCT_NAME]...] [c/CUSTOMER_NAME [CUSTOMER_NAME]...] [dt/DATE_TIME] [m/MONEY]`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The search is case insensitive. e.g blue will match Blue"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* At least one of the option fields must be provided."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The order of the keywords and attributes does not matter. e.g. Hans Bo will match Bo Hans, c/Bob m/31 will match m/31 c/Bob."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Only transactions matching all attributes will be returned (i.e. AND search). e.g. `findt c/Jane p/bag` will return transactions with \u0027jane\u0027 in their customer names and \u0027bag\u0027 in their product names."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Transactions matching any keywords in an attribute (for product or customer name only) will be returned (i.e. OR search) e.g. `findt c/jane avery` will return transactions with \u0027jane\u0027 or \u0027avery\u0027 in their customer names."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Duplicate fields are not allowed. E.g. keying in the `DATE_TIME` field for more"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "than one time."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::FindTransactionByProduct.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::FindTransactionByCustomer.png[width\u003d\"790\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Only product name and customer name support multiple keywords"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `findt p/iphone` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Returns all transactions that involve the product `iphone`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findt c/bob angie` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Returns all transactions that involve a customer named Bob *OR* a customer named Angie."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findt dt/2020-02-07 16:00` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Returns all transactions made on 7th February 2020 4pm."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findt m/100` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Returns all transactions that have an amount of 100 dollars."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findt c/bob dt/2020-02-07 16:00` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Returns all transactions that Bob made on the 7th February 2020 4pm."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::findt[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::undot[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Undo a transaction : `undot`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Undo the specified transaction from the system. It allows the user to remove a transaction in case he/she keyed inaccurate"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "information. +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Format: `undot INDEX`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* Undos the transaction at the specified `INDEX`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The index refers to the index number shown in the displayed transaction list."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Why undot instead of deletet? Deletet implies that transaction is only deleted but undot is more fitting as the product details will be modified too."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Adds the quantity in the transaction back to the product and reduces the sales of the product by transaction amount."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `listt` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "`undot 2` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Undo the 2nd transaction in the displayed list."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `findt dt/2020-01-03 16:00` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "`undot 1` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Undo the 1st transaction in the results of the find command."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::undot[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::cleart[]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all transactions : `cleart`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Clears all transactions from the list of transactions. +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Format: `cleart`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Permanently deletes all the stored transaction data in the application."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::cleart[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "User can navigate to the statistics panel by clicking on the statistics tab."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "image::StatisticsTab.png[width\u003d\"200\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::viewtopsellingproducts[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the top-selling and worst-selling products."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Displays and updates the top-selling and worst-selling products (sorted by profit) as transactions are made. +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This is a passive feature."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::viewtopsellingproducts[]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::TopSellingProducts.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::viewproductsalesquantity[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the product sales and quantity histogram."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Displays and updates the histogram of product sales and quantity. +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Plots 2 graphs: +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "1. Number of products against quantity of products +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "2. Number of products against sales of products"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "This is a passive feature."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::ViewInventory2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::viewproductsalesquantity[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::revenue[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the revenue made in a certain period : `revenue`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Gets the revenue made in a selected period. (start date to end date, both inclusive) +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `revenue [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date and end date must follow a format of `yyyy-mm-dd hh:mm`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date must be before or equal to end date"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* At least one product must be present"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `revenue sd/2020-01-01 10:00 ed/2020-12-31 10:01` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Returns the revenue from Jan 1 2020 10am to Dec 31 2020 10:01am"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::revenue[]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::profit[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the profit made in a certain period : `profit`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Gets the profit made in a selected period (start date to end date, both inclusive). +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `profit [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date and end date must follow a format of `yyyy-mm-dd hh:mm`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date must be before or equal to end date"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* At least one product must be present"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `profit sd/2020-01-01 10:00 ed/2020-12-31 10:01` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Returns the profit from Jan 1 2020 10am to Dec 31 2020 10:01am"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::profit[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::lowlimit[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the low-inventory threshold : `lowlimit`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Sets the notification threshold for individual product and updates the bar indicator of the product. +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Format: `lowlimit p/PRODUCT_ID t/THRESHOLD`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `THRESHOLD` must be non-negative integers, i.e. 1, 2, 3, ..."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `PRODUCT_ID` refers to the index number shown in the displayed products list."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "****"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The default threshold represents 20% of the desired quantity. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The quantity threshold can take integers up to 1000000."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `lowlimit p/1 t/20` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Sets the low inventory threshold for the 1st product as 20."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::lowlimit[]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::predict[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Predicting the sales for the next month : `predict`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Predicts sales for the next month based on sales in the previous three months +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Format: `predict`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "The average of the profits made in the past three months is the predicted sales for next month."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::predict[]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// tag::plotsales[]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d\u003d\u003d Plotting sales of a product: `plotsales`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Plots a graph with the sales of the selected product in a given time period. +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Format: `plotsales PRODUCT_INDEX [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date and end date must follow a format of `yyyy-mm-dd hh:mm`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* The start date must be before or equal to end date"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* At least one product must be present"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "****"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The start date and end date attributes are optional. If omitted, the system"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "will plot the last 7 days by default."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `plotsales 1 sd/2020-02-20 10:00 ed/2020-02-28 10:01` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Plots a graph with the sales of the selected product between 20th Feb 10am and 28th Feb 10:01am in 2020."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* `plotsales 1` +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "Plots a graph with the sales of the selected product in the past week."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "image::SalesPlot.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// end::plotsales[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Q*: How to delete a product? +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*A*: First, display a list of product, e.g. `listp`. Then type `deletep INDEX` where the index refers to the index displayed in the list. Refer to \u003c\u003cDeleting a product : `deletep`\u003e\u003e."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Inventory System folder."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Adding customer* : `addc n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]…` +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `addc n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Listing all customers* : `listc`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Editing customer information* : `editc INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editc 1 p/91234567 e/johndoe@example.com`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Finding customers* : `findc [n/NAME [NAME]...] [p/PHONE] [e/EMAIL] [a/ADDRESS [ADDRESS]...]` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findc n/John`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Deleting a customer* : `deletec INDEX` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findc n/Betsy` +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`deletec 1`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Clearing all customers* : `clearc`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Adding a product* : `addp d/DESCRIPTION pr/PRICE q/QUANTITY cp/COSTPRICE [s/SALES]` +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `addp d/iphone x pr/1000 cp/800 q/10`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Listing all products* : `listp`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Editing a product* : `editp INDEX [d/DESCRIPTION] [pr/PRICE] [cp/COSTPRICE] [q/QUANTITY] [s/SALES]` +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editp 1 pr/1150 q/80`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Finding products* : `findp KEYWORD [KEYWORD]...` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `findp black`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Deleting a product* : `deletep INDEX` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `listp` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`deletep 2`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Clearing all products* : `clearp`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Adding a transaction* : `addt p/PRODUCT_ID c/CUSTOMER_ID dt/DATE_TIME m/MONEY q/QUANTITY [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `addt p/20 c/2 dt/2020-02-20 10:00 m/30 q/10 d/under discount`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Listing all transactions* : `listt`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Editing a transaction* : `editt INDEX [p/PRODUCT_ID] [c/CUSTOMER_ID] [dt/DATE_TIME] [q/QUANTITY] [m/MONEY] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editt 1 p/101 c/123`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Finding transactions* : `findt [p/PRODUCT_NAME [PRODUCT_NAME]...] [c/CUSTOMER_NAME [CUSTOMER_NAME]...] [dt/DATE_TIME] [m/MONEY]` +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `findt c/bob dt/2020-02-07 10:00`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* *Undo a transaction* : `undot INDEX` +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `findt dt/2020-01-03 10:00` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "`undot 1`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Clearing all transactions* : `cleart`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Get the revenue made in a certain period* : `revenue sd/START_DATE ed/END_DATE` +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `revenue sd/2020-01-01 10:00 ed/2020-12-12 10:01`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Get the profit made in a certain period* : `profit sd/START_DATE ed/END_DATE` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `profit sd/2020-01-01 10:00 ed/2020-12-12 10:01`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Setting the low-inventory threshold* : `lowlimit p/PRODUCT_ID t/THRESHOLD` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `lowlimit p/1 t/20`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Predicting the sales for the next month* : `predict`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Plotting sales* : `plotsales PRODUCT_INDEX [sd/START_DATE] [ed/END_DATE]` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "e.g. `plotsales 1 sd/2020-03-20 10:00 ed/2020-03-30 10:00`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Exiting from the program* : `exit`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Get help* : `help`"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 348,
      "-": 127,
      "junhaotan": 106,
      "YingxuH": 147
    }
  },
  {
    "path": "docs/team/aliciatxl.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d Tan Su Yee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d PROJECT: iTrack Pro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "iTrack Pro is for the grocery shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers. It is also able to provide an analysis of the entire business to help the owner manage the shop."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "1. Added *the ability to manage products (add, list, find, delete, clear, edit)*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** What it does: allows the user to manage products in the inventory easily. User can add, delete or edit products, and list or clear all products. Users can also find products based on keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Justification: This feature improves the product significantly because shop owners can have many products and managing them manually can be inefficient. Hence, the inventory system provides a convenient way for them to keep track of their products."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Highlights: Though the implementation seems similar to the `Person` class in the addressbook, it was challenging as the fields were different and the execution of some commands varied due to the different requirements."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "2. Added *the ability to view and analyse statistics (revenue, profit, predict sales, view top selling products)*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** What it does: allows the user to view and analyse statistics based on transactions added to the inventory system."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Justification: This feature improves the product significantly because shop owners can gain insight to their business and know how profitable they are. By knowing the revenue and profit, the user can gauge market demand for their products and employ suitable marketing strategies to improve sales. Moreover, users can get the predicted sales for the next month, enabling them to make more informed business decisions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of design alternatives. The difficult part was to determine how and when the revenue/ profit was to be calculated, and the best way to structure the classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Added id for `Customer` and `Product` and made use of customer and product id fields to prevent duplicate transactions (during transaction edit) (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/122[#122])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Added view top-selling products function (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/112[#112])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Updated ui for statistics window and notification (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/130[#130], https://github.com/AY1920S2-CS2103-T09-2/main/pull/112[#112])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Wrote tests for product features to increase coverage by 16.3% to 66.752% (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/82[#82])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Wrote tests for statistics features (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/119[#119], https://github.com/AY1920S2-CS2103-T09-2/main/pull/97[#97])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003daliciatxl\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[tp-dashboard]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/model/product[Product model], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/commands/product[Product commands], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/parser/product[Product parser], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/storage/product[Product storage], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/ui/product[Product ui]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/commands/statistics[Statistics commands], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/parser/statistics[Statistics parser], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/ui/statistics[Statistics ui], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/ui[Statistics window]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/logic/commands/product[Test product commands], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/logic/parser/product[Test product parser], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/model/product[Test product model], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/storage[Test product storage], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/testutil/product[Test product testutil]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/logic/commands/statistics[Test revenue/profit commands]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Reviewed and merge code of teammates"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Created and assigned issues"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/93[#93], https://github.com/AY1920S2-CS2103-T09-2/main/pull/94[#94], https://github.com/AY1920S2-CS2103-T09-2/main/pull/187[#187])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Added restrictions for each field (e.g. max value for price and quantity, max length for address) (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/142[#142])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Edited ArchitectureSequenceDiagram, BetterModelClassDiagram, DeleteSequenceDiagram, LogicClassDiagram to reflect current app structure (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/184[#184])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Replaced ModelClassDiagram, UiClassDiagram and StorageClassDiagram with created diagrams to reflect current class structure (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/184[#184], https://github.com/AY1920S2-CS2103-T09-2/main/pull/187[#187])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Added implementation section, and sequence and activity diagrams for product features (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/100[#100], https://github.com/AY1920S2-CS2103-T09-2/main/pull/103[#103])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Added implementation section, and sequence and activity diagrams for revenue/profit features (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/184[#184])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Modified glossary and design sections, add target audience, manual testing, effort and use cases to developer guide (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/19[#19], https://github.com/AY1920S2-CS2103-T09-2/main/pull/194[#194], https://github.com/AY1920S2-CS2103-T09-2/main/pull/202[#202])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Add product features and statistics (revenue, predict, profit) features to user guide (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/24[#24])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/AY1920S2-CS2103-T09-1/main[T09-1]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "*** Created team organisation on github and set up address book in organisation repo"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddp]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditp]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearp]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletep]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "// include::../UserGuide.adoc[tag\u003dfindp]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistp]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003drevenue]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dprofit]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpredict]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviewtopsellingproducts]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanageitem]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgetprofitrevenue]"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 95
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003d\u003d PROJECT: iTrack Pro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "iTrack Pro is for the grocery shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers. It is also able to provide an analysis of the entire business to help the owner manage the shop."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddp]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 67
    }
  },
  {
    "path": "docs/team/junhaotan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d Tan Jun Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d PROJECT: iTrack Pro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "iTrack Pro is for the grocery shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers. It is also able to provide an analysis of the entire business to help the owner manage the shop."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "1. Added *the ability to find customers by specified attributes*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** What it does: allows the user to locate customers easily by name, address, email or phone number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Justification: This feature improves the application significantly because user can have many customers, and it can be difficult to keep track of customers manually."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Highlights: The original find feature was only by name, the implementation has to be changed and refactored to accommodate finding by other attributes too."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "2. Added *visualisation of product balance on Product Ui via progress bar indicator*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** What it does: allows the user to easily identify stocks that are running low."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Justification: This feature improves the application significantly as users would not have to struggle looking at numbers only to see which stock is running low soon."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of design alternatives. The difficult part was to determine how the remaining stock was to be calculated, and the best way to structure the classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Added a command history feature that allows the user to navigate to previous commands using up/down keys (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/92[#92])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Added lowlimit command that allows the user to set individual product low quantity threshold (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/98[#98])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Added notification popup window when stock quantity goes below threshold (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/99[#99])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Added cost price field to Product class to calculate profit (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/114[#114])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Updated ui for statistics window (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/129[#129])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Fixed bugs from PE-D (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/185[#185], https://github.com/AY1920S2-CS2103-T09-2/main/pull/198[#198])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Added web view for help window (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/200[#200])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003djunhaotan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026since\u003d2020-02-14[tP-dashboard]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/model/customer[Customer model], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/commands/customer[Customer commands], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/parser/customer[Customer parser], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/storage/customer[Customer storage], https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/ui/customer[Customer ui]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/logic/commands/product/LowLimitCommand.java[LowLimit command], https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/logic/parser/product/LowLimitCommandParser.java[LowLimit parser], https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/ui/NotificationWindow.java[LowLimit Ui]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/ui/CommandBox.java[Command history feature]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/pull/196[InventorySystemParserTest]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (4 releases) on GitHub"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Reviewed and merged teammates\u0027 pull requests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Created and managed milestones \u0026 issues"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Added more conditions for duplicate customers (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/185[#185])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Fix alignment of address label in CustomerCard Ui (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/185[#185])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Added restrictions for number of tags when editing customers (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/185[#185])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Documentations:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Added user stories in Developer Guide (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/20[#20])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Combined customer and product common features for Developer Guide (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/110[#110])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Updated User Guide to reflect latest application Ui and features (Pull requests https://github.com/AY1920S2-CS2103-T09-2/main/pull/127[#127], https://github.com/AY1920S2-CS2103-T09-2/main/pull/138[#138], https://github.com/AY1920S2-CS2103-T09-2/main/pull/189[#189])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Updated Developer Guide with implemented feature (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/196[#196])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "*** Reviewed PRs and documentations for other teams: https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/104[F09-2], https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/42[F10-2], https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/19[T09-1]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddc]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditc]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dclearc]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletec]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dfindc]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dlistc]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlowlimit]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlowstockproducts]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dreceivenotif]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreuseinputs]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlowlimitfeature]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnotificationWindow]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortProductList]"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 100
    }
  },
  {
    "path": "docs/team/yingxuh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d He Yingxu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d PROJECT: iTrackPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "iTrack Pro is for the grocery shop owners to keep track of the products, customers, and transactions of the shop and have a better understanding of the business by viewing the performance of products and behaviors of customers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. Added *the ability to manage transcations*, e.g., *addt*, *editt*, *findt*, *listt*, *undot*, *cleart*."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** What it does: It records, edits, lists, finds, deletes transactions from the system. The quantity and sales attribute of products will be affected as well."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Justification: This feature allows the customer to manage a large amount of transactions. It improves the usability of the application and increases the efficiency for the user to manage inventory system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Highlights: Adding/editting/undoing transactions will also update the quantity/sales attributes of related products. A future date time in the future is not allowed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Credits: These operations are inspired from the operations of persons in AB3 system."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2. Added the *ability to plot the quantity sold of a product in a certain time range*."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** What it does: The command fetches all transactions related with the specified product in a certain time period, then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "converts the data to daily time series format and plot it in a bar chart."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Justification: This feature allows users to understand the popularity of a product visually in a trend format, such that they"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "could make decisions of whether to stock up or down the product."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Highlights: If a time range is not specified, the command will consider the last 7 days by default. An end date before start date or date in the future is not allowed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "3. Added the histogram of products to the statistics panel."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** What is does: It fetches the quantity and sales of all the products and group them by the amount of quantity/sales."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "The data is then plot in a line chart format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Justification: It allows the user to understand whether the business is healthy, E.g. whether most of the products have sufficient inventory, is there any super-sales-creator or all the products share the same sales evenly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Highlights: They are displayed upon the application is launched. The graph will be updated everytime a user takes any action, e.g. adding a new product."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Update the UI from three side-by-side lists to tab panes with transactions representated by rows in a table (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/186[#186])."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Split the original shared quantity class to TransactionQuantity and ProductQuantity with different minimal values. Merged sales and money class (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/117[#117], https://github.com/AY1920S2-CS2103-T09-2/main/pull/192[#192])."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Set default dateTime and money for transactions (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/117[#117])."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Added test for transaction model, logic, and test utils (PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/209[#209], https://github.com/AY1920S2-CS2103-T09-2/main/pull/201[#201], https://github.com/AY1920S2-CS2103-T09-2/main/pull/197[#197],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/pull/183[#183], https://github.com/AY1920S2-CS2103-T09-2/main/pull/140[#140])."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dYingxuH\u0026tabRepo\u003dAY1920S2-CS2103-T09-2%2Fmain%5Bmaster%5D[tp-dashboard] +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Model: [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/model/transaction[transaction],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/model/util/Quantity.java[util: quantity]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Logic: [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/commands/transaction[command: transaction],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/logic/commands/product/PlotSalesCommand.java[command: PlotSales],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/logic/parser/transaction[parser: transaction],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/logic/parser/product/PlotSalesCommandParser.java[parser: PlotSales]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/storage/transaction[storage: tranasction],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/main/java/seedu/address/ui/transaction[ui: transaction],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/blob/master/src/main/java/seedu/address/ui/PlotWindow.java[ui: PlotWindow]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Test: [https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/model/transaction[model: transaction],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/testutil/transaction[testutil: transaction],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/logic/commands/transaction[commands: transaction],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "https://github.com/AY1920S2-CS2103-T09-2/main/tree/master/src/test/java/seedu/address/logic/parser/transaction[parser: transaction],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Set up the issue labels and milestones with my team mates."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Set up `netlify`, `coverall`, auto-build tools (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/17[#17])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Merge PRs created by my team mates."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Refactored the process of triggering notification windows as passing signals to command result and making the `MainWindow` to handle the plot.  (Commit https://github.com/AY1920S2-CS2103-T09-2/main/pull/192/commits/803fa013d1d0adc44434a7838fb45a145cf394bd[803fa01] of PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/192[#192])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Refactored the process of checking duplicate input attributes (this https://github.com/AY1920S2-CS2103-T09-2/main/pull/209/commits/c841de096b6cfb0877416062adaa5770d868bb2c[commit] from PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/209[#209])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Fixed the bug of re-listing all products everytime adding a transaction, allowing users to input future time, and statistics window not updated after each action (PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/182[#182], https://github.com/AY1920S2-CS2103-T09-2/main/pull/197[#197], https://github.com/AY1920S2-CS2103-T09-2/main/pull/134[#134], https://github.com/AY1920S2-CS2103-T09-2/main/pull/186[#186])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Updated the readme from the template of AB3 to customized iTrackPro page (PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/12[#12])"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Updated the UG with add/edit/delete/find/list transactions as well as top-selling product, revenue, and low inventory (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/27[#27])"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Updated the UG about the plotsales command, renaming `deletet` to `undot`, re-phrase some explanations (Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/135[#135], Pull request https://github.com/AY1920S2-CS2103-T09-2/main/pull/137[#137], https://github.com/AY1920S2-CS2103-T09-2/main/pull/212[#212])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Updated the Dev Guide with NFR, Glossary, managing transaction and plot sales command. (PR https://github.com/AY1920S2-CS2103-T09-2/main/pull/21[#21], https://github.com/AY1920S2-CS2103-T09-2/main/pull/109[#109], https://github.com/AY1920S2-CS2103-T09-2/main/pull/107[#107], https://github.com/AY1920S2-CS2103-T09-2/main/pull/212[#212])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1920S2/forum/issues/58[#58])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*** Reviewed the PRs and documentations from other teams in the tutorial together with my team mates(examples:  https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/104[#104], https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/42[#42])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddt]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistt]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditt]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindt]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcleart]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Adding customer* : `addc n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]…` +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `addc n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Listing all customers* : `listc`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Editing customer information* : `editc INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editc 1 p/91234567 e/johndoe@example.com`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Finding customers* : `findc [n/NAME [NAME]...] [p/PHONE] [e/EMAIL] [a/ADDRESS [ADDRESS]...]` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findc n/John`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Deleting a customer* : `deletec INDEX` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findc n/Betsy` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`deletec 1`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Clearing all customers* : `clearc`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Adding a product* : `addp d/DESCRIPTION pr/PRICE q/QUANTITY cp/COSTPRICE [s/SALES]` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `addp d/iphone x pr/1000 cp/800 q/10`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Listing all products* : `listp`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Editing a product* : `editp INDEX [d/DESCRIPTION] [pr/PRICE] [cp/COSTPRICE] [q/QUANTITY] [s/SALES]` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editp 1 pr/1150 q/80`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Finding products* : `findp KEYWORD [KEYWORD]...` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findp black`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Deleting a product* : `deletep INDEX` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `listp` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`deletep 2`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Clearing all products* : `clearp`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Adding a transaction* : `addt p/PRODUCT_ID c/CUSTOMER_ID dt/DATE_TIME m/MONEY q/QUANTITY [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `addt p/20 c/2 dt/2020-02-20 10:00 m/30 q/10 d/under discount`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Listing all transactions* : `listt`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Editing a transaction* : `editt INDEX [p/PRODUCT_ID] [c/CUSTOMER_ID] [dt/DATE_TIME] [q/QUANTITY] [m/MONEY] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `editt 1 p/101 c/123`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Finding transactions* : `findt [p/PRODUCT_NAME [PRODUCT_NAME]...] [c/CUSTOMER_NAME [CUSTOMER_NAME]...] [dt/DATE_TIME] [m/MONEY]` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findt c/bob dt/2020-02-07 10:00`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Undo a transaction* : `undot INDEX` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `findt dt/2020-01-03 10:00` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "`undot 1`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Clearing all transactions* : `cleart`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Get the revenue made in a certain period* : `revenue sd/START_DATE ed/END_DATE` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `revenue sd/2020-01-01 10:00 ed/2020-12-12 10:01`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Get the profit made in a certain period* : `profit sd/START_DATE ed/END_DATE` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `profit sd/2020-01-01 10:00 ed/2020-12-12 10:01`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Setting the low-inventory threshold* : `lowlimit p/PRODUCT_ID t/THRESHOLD` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `lowlimit p/1 t/20`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Predicting the sales for the next month* : `predict`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Plotting sales* : `plotsales PRODUCT_INDEX [sd/START_DATE] [ed/END_DATE]` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `plotsales 1 sd/2020-03-20 10:00 ed/2020-03-30 10:00`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Exiting from the program* : `exit`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Get help* : `help`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanagetransaction]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dplotsalesfeature]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d\u003d Use case:  UC09 - Plot the quantity sold of a product (for products)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1. User enters the index of the product as well as the start date and end date for ploting purposes."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* 1a. The index is out of boundary."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** 1a1. The app shows an error message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 172
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Changes the remark of an existing customer in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the customer identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"by the index number used in the last customer listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param index of the customer in the filtered customer list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param remark of the customer to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the customer\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a customer."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Create a new `Remark` in `seedu.address.model.customer`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each customer."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public PersonCard(Person customer, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    remark.setText(customer.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "-": 414,
      "junhaotan": 11
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.customer.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.InventorySystemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonInventorySystemStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InventorySystem ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystemStorage addressBookStorage \u003d new JsonInventorySystemStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The data from the sample inventory system will be used instead if {@code storage}\u0027s inventory system"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * is not found, or an empty address book will be used instead if errors occur when"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Optional\u003cReadOnlyInventorySystem\u003e inventorySystemOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            inventorySystemOptional \u003d storage.readInventorySystem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (!inventorySystemOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample InventorySystem\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            initialData \u003d inventorySystemOptional.orElseGet(SampleDataUtil::getSampleInventorySystem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            initialData \u003d new InventorySystem();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            initialData \u003d new InventorySystem();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts logging information"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param config configuration"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventorySystem\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.info(\"Starting InventorySystem \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InventorySystem ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 14,
      "-": 166,
      "junhaotan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String LOG_FILE \u003d \"inventorysystem.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command! Type help for program usage instructions.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The customer index provided is invalid.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d customers listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This customer already exists in the system\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX \u003d \"The product index provided is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_QUANTITY \u003d \"There are only %1$d %2$s(s) left!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_ZERO_PRODUCT_QUANTITY \u003d \"There are no %2$ss left!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_PRODUCTS_LISTED_OVERVIEW \u003d \"%1$d products listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the system\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_INVALID_INITIAL_QUANTITY \u003d \"You cannot add an product with 0 quantity!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"The transaction index provided is invalid.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"This transaction already exists in the system\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_INVALID_THRESHOLD_AMOUNT \u003d \"Threshold amount must be more than 0!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_SAME_PREFIX \u003d \"Please only use each prefix once! \\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 9,
      "-": 10,
      "junhaotan": 8,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        System.out.println(sentence + \" \" + word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the InventorySystem."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see seedu.address.model.Model#getInventorySystem()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ReadOnlyInventorySystem getInventorySystem();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of products */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the user prefs\u0027 inventory system file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Path getInventorySystemFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "-": 43,
      "junhaotan": 2,
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.InventorySystemParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystemParser inventorySystemParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystemParser \u003d new InventorySystemParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Command command \u003d inventorySystemParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            storage.saveInventorySystem(model.getInventorySystem());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return model.getInventorySystem();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredProductList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return model.getInventorySystemFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 66,
      "junhaotan": 3,
      "YingxuH": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final XYChart.Series dataSeries;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Product product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Title of the plot. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Notification window should be displayed to the user. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final boolean showNotification;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Plot should be displayed to the user */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final boolean showPlot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult(String feedbackToUser, XYChart.Series dataSeries, Product product,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                         String title, boolean showHelp, boolean showNotification, boolean showPlot, boolean exit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dataSeries \u003d dataSeries;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.showNotification \u003d showNotification;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.showPlot \u003d showPlot;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(feedbackToUser, null, null, \"\", false, false, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public XYChart.Series getDataSeries() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dataSeries;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product getNotificationData() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return product;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isShowPlot() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return showPlot;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isShowNotification() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return showNotification;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "YingxuH": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/AddCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Adds a customer to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the address book. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_MAX_NUMBER_OF_TAGS \u003d \"Only a maximum of 5 tags are allowed\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_NUMBER_OF_TAGS \u003d 5;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates an AddCustomerCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddCustomerCommand(Customer customer) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (toAdd.getTags().size() \u003e MAX_NUMBER_OF_TAGS) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_MAX_NUMBER_OF_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof AddCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCustomerCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 51,
      "junhaotan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/ClearCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ClearCustomerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Customer list has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setInventorySystem(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 17,
      "junhaotan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/DeleteCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Deletes a customer identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletec\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public DeleteCustomerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // delete customer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // remove transactions with deleted customer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateTransactionList(model, customerToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Deletes transactions where the customer is the customer to be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param customerToDelete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void updateTransactionList(Model model, Customer customerToDelete) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transaction.getCustomer().equals(customerToDelete)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                model.deleteTransaction(transaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof DeleteCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCustomerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 23,
      "-": 39,
      "junhaotan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/EditCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editc\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"by the index number used in the displayed customer list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_MAX_NUMBER_OF_TAGS \u003d \"Only a maximum of 5 tags are allowed\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final int MAX_NUMBER_OF_TAGS \u003d 5;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param index of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(editCustomerDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // create edited customer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d createEditedPerson(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (editedCustomer.getTags().size() \u003e MAX_NUMBER_OF_TAGS) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new CommandException(MESSAGE_MAX_NUMBER_OF_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (modelHasDuplicateCustomer(model, editedCustomer)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update customer list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.setPerson(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update transactions with customer info"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateTransactionList(model, editedCustomer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Check whether model has duplicate customer"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedCustomer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return true if model has duplicate customer, else false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private boolean modelHasDuplicateCustomer(Model model, Customer editedCustomer) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cCustomer\u003e customers \u003d model.getInventorySystem().getPersonList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Customer customer \u003d customers.get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (customer.getId() !\u003d editedCustomer.getId()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                if (customer.equals(editedCustomer)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Update transaction list with new customer info."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedCustomer"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void updateTransactionList(Model model, Customer editedCustomer) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction newTransaction \u003d transaction;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (editedCustomer.getId().equals(transaction.getCustomerId())) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                newTransaction \u003d new Transaction(editedCustomer,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getProduct(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getCustomerId(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getProductId(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getDateTime(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getQuantity(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getMoney(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getDescription());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            model.setTransaction(transaction, newTransaction);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static Customer createEditedPerson(Customer customerToEdit, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        UUID id \u003d customerToEdit.getId();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Email updatedEmail \u003d editCustomerDescriptor.getEmail().orElse(customerToEdit.getEmail());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Address updatedAddress \u003d editCustomerDescriptor.getAddress().orElse(customerToEdit.getAddress());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Customer(id, updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!(other instanceof EditCustomerCommand)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand e \u003d (EditCustomerCommand) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * corresponding field value of the customer."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private UUID id;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public EditCustomerDescriptor() {}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setId(UUID id) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cUUID\u003e getId() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (!(other instanceof EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return getId().equals(e.getId())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return \"EditCustomerDescriptor{\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \"id\u003d\" + id"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", name\u003d\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + name + \", phone\u003d\""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + phone + \", email\u003d\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + email + \", address\u003d\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + address + \", tags\u003d\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + tags + \u0027}\u0027;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 80,
      "-": 179,
      "junhaotan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/FindCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes (n/ for name, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"a/ for address, p/ for phone number, e/ for email address) contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME [NAME]...] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS [ADDRESS]...] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_NAME + \"alice bob charlie\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final Predicate\u003cCustomer\u003e predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public FindCustomerCommand(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (model.getFilteredCustomerList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(predicate.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof FindCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCustomerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "junhaotan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/customer/ListCustomerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Lists all customers in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ListCustomerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"There are no customers in the list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (model.getFilteredCustomerList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/AddProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Adds a product to the product list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a product to the product list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_COSTPRICE + \"COST PRICE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_SALES + \"SALES] \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"iphone \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_COSTPRICE + \"400 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_PRICE + \"1000 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"10 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_SALES + \"100 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New product added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an AddProductCommand to add the specified {@code Product}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public AddProductCommand(Product product) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        toAdd \u003d product;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.hasProduct(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.addProduct(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof AddProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 66,
      "junhaotan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/ClearProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Clears the product list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ClearProductCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Product list has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setInventorySystem(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/DeleteProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Deletes a product identified using it\u0027s displayed index from the product list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletep\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \": Deletes the product identified by the index number used in the displayed product list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DELETE_PRODUCT_SUCCESS \u003d \"Deleted Product: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DeleteProductCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // delete product"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // remove transactions with deleted product"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateTransactionList(model, productToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Deletes transactions where the product is the product to be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param productToDelete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void updateTransactionList(Model model, Product productToDelete) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transaction.getProduct().equals(productToDelete)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                model.deleteTransaction(transaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof DeleteProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProductCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 75,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/EditProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Edits the details of an existing product in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editp\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the product identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"by the index number used in the displayed product list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"[\" + PREFIX_COSTPRICE + \"COST PRICE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_SALES + \"SALES] \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Black watch \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_EDIT_PRODUCT_SUCCESS \u003d \"Edited Product: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final EditProductDescriptor editProductDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param index of the product in the filtered product list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editProductDescriptor details to edit the product with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductCommand(Index index, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(editProductDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.editProductDescriptor \u003d new EditProductDescriptor(editProductDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // create edited product"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(productToEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (modelHasDuplicateProduct(model, editedProduct)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update product list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setProduct(productToEdit, editedProduct);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredProductList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update transactions with product info"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateTransactionList(model, editedProduct);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // display notification window if threshold is reached"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (editedProduct.reachesThreshold()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    editedProduct,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \"\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    true,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Check whether model has duplicate product"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedProduct"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return true if model has duplicate product, else false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private boolean modelHasDuplicateProduct(Model model, Product editedProduct) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e products \u003d model.getInventorySystem().getProductList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c products.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Product product \u003d products.get(i);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (product.getId() !\u003d editedProduct.getId()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                if (product.equals(editedProduct)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Update transaction list with new product info."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedProduct"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void updateTransactionList(Model model, Product editedProduct) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction newTransaction \u003d transaction;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (editedProduct.getId().equals(transaction.getProductId())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                newTransaction \u003d new Transaction(transaction.getCustomer(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        editedProduct,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getCustomerId(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getProductId(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getDateTime(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getQuantity(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getMoney(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        transaction.getDescription());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            model.setTransaction(transaction, newTransaction);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates and returns a {@code Product} with the details of {@code productToEdit}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * edited with {@code editProductDescriptor}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Product createEditedProduct(Product productToEdit, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assert productToEdit !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        UUID id \u003d productToEdit.getId();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description updatedDescription \u003d editProductDescriptor.getDescription().orElse(productToEdit.getDescription());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        CostPrice updatedCostPrice \u003d editProductDescriptor.getCostPrice().orElse(productToEdit.getCostPrice());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Price updatedPrice \u003d editProductDescriptor.getPrice().orElse(productToEdit.getPrice());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity updatedQuantity \u003d editProductDescriptor.getQuantity().orElse(productToEdit.getQuantity());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money updatedSales \u003d editProductDescriptor.getMoney().orElse(productToEdit.getMoney());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        QuantityThreshold updatedThreshold \u003d editProductDescriptor.getThreshold().orElse(productToEdit.getThreshold());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        double updatedProgress \u003d productToEdit.getProgress();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Product(id, updatedDescription, updatedCostPrice, updatedPrice, updatedQuantity,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                updatedSales, updatedThreshold, updatedProgress);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof EditProductCommand)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand e \u003d (EditProductCommand) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 editProductDescriptor.equals(e.editProductDescriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Stores the details to edit the product with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * corresponding field value of the product."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static class EditProductDescriptor {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private UUID id;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private CostPrice costPrice;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Money sales;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private QuantityThreshold threshold;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public EditProductDescriptor() {}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public EditProductDescriptor(EditProductDescriptor toCopy) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            setCostPrice(toCopy.costPrice);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setSales(toCopy.sales);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setThreshold(toCopy.threshold);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, costPrice, price, quantity, sales, threshold);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setId(UUID id) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cUUID\u003e getId() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setCostPrice(CostPrice costPrice) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public Optional\u003cCostPrice\u003e getCostPrice() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return Optional.ofNullable(costPrice);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setSales(Money sales) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.sales \u003d sales;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Optional\u003cMoney\u003e getMoney() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return Optional.ofNullable(sales);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setThreshold(QuantityThreshold threshold) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public Optional\u003cQuantityThreshold\u003e getThreshold() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return Optional.ofNullable(threshold);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (!(other instanceof EditProductDescriptor)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            EditProductDescriptor e \u003d (EditProductDescriptor) other;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return getId().equals(e.getId())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u0026\u0026 getCostPrice().equals(e.getCostPrice())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getMoney().equals(e.getMoney())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 getThreshold().equals(e.getThreshold());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return \"EditProductDescriptor{\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \"id\u003d\" + id + \", description\u003d\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + description + \", costPrice\u003d\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + costPrice + \", price\u003d\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + price + \", quantity\u003d\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + quantity + \", sales\u003d\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + sales + \", threshold\u003d\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + threshold + \u0027}\u0027;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 272,
      "junhaotan": 40,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/FindProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Finds and lists all products in product list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findp\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose descriptions contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: KEYWORD [KEYWORD]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public FindProductCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW, model.getFilteredProductList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof FindProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindProductCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/ListProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PRODUCTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Lists all products in the product list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ListProductCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all products\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/LowLimitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.createEditedProduct;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_THRESHOLD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.ui.NotificationWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Sets the product low limit threshold for notifications."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class LowLimitCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lowlimit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the notification threshold for products.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \" Updates the balance indicator, as the threshold represents 20% of desired quantity. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Alerts the user when the product quantity reached the threshold set by the user. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_PRODUCT + \"PRODUCT_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_THRESHOLD + \"THRESHOLD \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_PRODUCT + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_THRESHOLD + \"20\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New threshold set: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final Index productIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final EditProductDescriptor editProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private QuantityThreshold threshold;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public LowLimitCommand(Index productIndex, QuantityThreshold threshold) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(productIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(threshold);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (productIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Product productToEdit \u003d lastShownList.get(productIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int thresholdValue \u003d threshold.value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(productToEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (thresholdValue \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editedProduct.setThreshold(String.valueOf(thresholdValue));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_THRESHOLD_AMOUNT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update product list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.setProduct(productToEdit, editedProduct);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredProductList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // show notification if quantity \u003c threshold"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (editedProduct.getQuantity().getValue() \u003c\u003d thresholdValue) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            NotificationWindow window \u003d new NotificationWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            window.show(editedProduct.getDescription(), editedProduct.getQuantity());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedProduct));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!(other instanceof LowLimitCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        LowLimitCommand e \u003d (LowLimitCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return productIndex.equals(e.productIndex) \u0026\u0026 threshold.equals(e.threshold);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "junhaotan": 92,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/product/PlotSalesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.transaction.DateTime.populateDates;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTimeInRangePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.JointTransactionPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.ProductIdEqualsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Plot sales of a product in a given period."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class PlotSalesCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"plotsales\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Plots the sales of product to the screen\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE] \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_START_DATE + \"2020-03-20 10:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_END_DATE + \"2020-03-30 10:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sales for product %1$s plotted.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String TITLE \u003d \"Sales of %1$s between %2$s and %3$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DATE_CONFLICT \u003d \"Start date must be after end date\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NO_PRODUCT_SALES \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"There are no sales for %1$s during this period of time\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PlotSalesCommand(Index targetIndex, DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (startDateTime.value.compareTo(endDateTime.value) \u003e 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_CONFLICT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productToPlot \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicates.add(new ProductIdEqualsPredicate(productToPlot.getId()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicates.add(new DateTimeInRangePredicate(startDateTime, endDateTime));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Predicate\u003cTransaction\u003e jointPredicate \u003d new JointTransactionPredicate(predicates);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.filterTransaction(jointPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (transactions.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_PRODUCT_SALES,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    productToPlot.getDescription().value));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        XYChart.Series dataSeries \u003d generateDataSeries(transactions);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_SUCCESS, productToPlot.getDescription()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                dataSeries,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(TITLE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        productToPlot.getDescription(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        startDateTime.toDateString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        endDateTime.toDateString()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Generates data series usable to the bar chart plot."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param transactions a list of transactions."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private XYChart.Series generateDataSeries(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        XYChart.Series dataSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cDateTime\u003e dateTimes \u003d populateDates(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTimes.forEach(date -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Quantity quantity \u003d new ProductQuantity(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            for (Transaction t: transactions) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                if (t.getDateTime().isOnSameDay(date)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    quantity \u003d quantity.plus(t.getQuantity());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dataSeries.getData().add(new XYChart.Data(date.toDateString(), quantity.getValue()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dataSeries;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 22,
      "YingxuH": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/PredictCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Predicts sales for the next month based on sales in the previous three months."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class PredictCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"predict\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \": Predicts sales for the next month based on sales in the previous three months. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Predicted sales for next month: $%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NUMBER_FORMAT \u003d \"Price of product is invalid\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NO_PRODUCTS \u003d \"At least one product is required\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.getFilteredProductList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PRODUCTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money revenue \u003d predictRevenue(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, revenue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Predicts the revenue for the next month based on past three months."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return calculated sales"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money predictRevenue(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money firstMonthRevenue \u003d calculateRevenueForMonth(transactionList, todayDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money secondMonthRevenue \u003d calculateRevenueForMonth(transactionList, todayDate.minusMonths(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money thirdMonthRevenue \u003d calculateRevenueForMonth(transactionList, todayDate.minusMonths(2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int predictedRevenue \u003d (firstMonthRevenue.value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + secondMonthRevenue.value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + thirdMonthRevenue.value) / 3;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(predictedRevenue);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Calculate the revenue in a given month."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactionList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return revenue for that month"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money calculateRevenueForMonth(List\u003cTransaction\u003e transactionList, LocalDate date)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int revenue \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactionList.get(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            LocalDateTime transactionDateTime \u003d transaction.getDateTime().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Month transactionMonth \u003d transactionDateTime.getMonth();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transactionMonth \u003d\u003d date.getMonth()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    int price \u003d transaction.getMoney().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    revenue +\u003d price;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    throw new CommandException(MESSAGE_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(revenue);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof PredictCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 84,
      "YingxuH": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/ProfitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Displays the profit trend in a selected period."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProfitCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \": Displays the profit trend in a selected period. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_START_DATE + \"2020-01-01 10:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_END_DATE + \"2020-12-12 10:01\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Profit from %1$s to %2$s: $%3$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NUMBER_FORMAT \u003d \"Price/ quantity/ cost price of product is invalid\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NO_PRODUCTS \u003d \"At least one product is required\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_PROFIT \u003d \"You have made a loss of $%1$s!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DATE_CONFLICT \u003d \"Start date must be after end date\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an ProfitCommand to display the profit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProfitCommand(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(endDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.getFilteredProductList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PRODUCTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (startDateTime.value.compareTo(endDateTime.value) \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_CONFLICT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money profit \u003d calculateProfit(transactions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                startDateTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                endDateTime,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                profit));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Calculates the profit in a given time period"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactions"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return calculated profit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money calculateProfit(List\u003cTransaction\u003e transactions) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int profit \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            LocalDateTime transactionDateTime \u003d transaction.getDateTime().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transactionDateTime.compareTo(startDateTime.value) \u003e\u003d 0"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 transactionDateTime.compareTo(endDateTime.value) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    int price \u003d transaction.getMoney().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    int quantity \u003d transaction.getQuantity().getValue();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    int costPrice \u003d Integer.parseInt(transaction.getProduct().getCostPrice().value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    profit +\u003d (price - costPrice * quantity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    throw new CommandException(MESSAGE_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (profit \u003c 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NEGATIVE_PROFIT, -profit));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Money(profit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof ProfitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 startDateTime.equals(((ProfitCommand) other).startDateTime)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 endDateTime.equals(((ProfitCommand) other).endDateTime));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 113,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/RevenueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Displays the revenue trend in a selected period."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class RevenueCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revenue\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \": Displays the revenue trend in a selected period. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_START_DATE + \"2020-01-01 10:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_END_DATE + \"2020-12-12 10:01\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revenue from %1$s to %2$s: $%3$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NUMBER_FORMAT \u003d \"Price of product is invalid\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_NO_PRODUCTS \u003d \"At least one product is required\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DATE_CONFLICT \u003d \"Start date must be after end date\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an RevenueCommand to display the revenue."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public RevenueCommand(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(endDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.getFilteredProductList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PRODUCTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (startDateTime.value.compareTo(endDateTime.value) \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_CONFLICT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money revenue \u003d calculateRevenue(transactions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                startDateTime,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                endDateTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                revenue));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Calculates the revenue in a given time period"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactions"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return calculated sales"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money calculateRevenue(List\u003cTransaction\u003e transactions) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int revenue \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            LocalDateTime transactionDateTime \u003d transaction.getDateTime().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transactionDateTime.compareTo(startDateTime.value) \u003e 0"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u0026\u0026 transactionDateTime.compareTo(endDateTime.value) \u003c 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    int price \u003d transaction.getMoney().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    revenue +\u003d price;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    throw new CommandException(MESSAGE_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(revenue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof RevenueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 startDateTime.equals(((RevenueCommand) other).startDateTime)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 endDateTime.equals(((RevenueCommand) other).endDateTime));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 104,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/AddTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.createEditedProduct;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCRIPTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Adds a transaction to the system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction to the application. \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_CUSTOMER + \"CUSTOMER_ID \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_PRODUCT + \"PRODUCT_ID \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_TRANS_DESCRIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_QUANTITY + \"1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + DateTime.DEFAULT_VALUE.format(DateTime.DATE_TIME_FORMAT) + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_MONEY + \"30 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + PREFIX_TRANS_DESCRIPTION + \"under discount \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transaction added: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final TransactionFactory transactionFactory;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddTransactionCommand(TransactionFactory transactionFactory) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(transactionFactory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactionFactory \u003d transactionFactory;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index productIndex \u003d getProductIndex(lastShownList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productToEdit \u003d lastShownList.get(productIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction toAdd \u003d transactionFactory.createTransaction(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (model.hasTransaction(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product editedProduct \u003d updateProduct(productToEdit, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!productToEdit.isSameProduct(editedProduct) \u0026\u0026 model.hasProduct(editedProduct)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.addTransaction(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setProduct(productToEdit, editedProduct);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredProductList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // display notification window if threshold is reached"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (editedProduct.reachesThreshold()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    editedProduct,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \"\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    true,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates product details based on transaction to be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param productToEdit"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Product updateProduct(Product productToEdit, Transaction toAdd) throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditProductDescriptor editProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editProductDescriptor.setQuantity(getNewQuantity(toAdd, productToEdit));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editProductDescriptor.setSales(getNewSales(toAdd, productToEdit));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editProductDescriptor.setThreshold(productToEdit.getThreshold());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(productToEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return editedProduct;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Index getProductIndex(List\u003cProduct\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index productIndex \u003d transactionFactory.getProductIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (productIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return productIndex;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Quantity getNewQuantity(Transaction toAdd, Product productToEdit) throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity oldQuantity \u003d productToEdit.getQuantity();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (oldQuantity.compareTo(toAdd.getQuantity()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ZERO_PRODUCT_QUANTITY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else if (oldQuantity.compareTo(toAdd.getQuantity()) \u003c 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_PRODUCT_QUANTITY,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    oldQuantity.getValue(), productToEdit.getDescription().value));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return oldQuantity.minus(toAdd.getQuantity());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money getNewSales(Transaction toAdd, Product productToEdit) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money oldSales \u003d productToEdit.getMoney();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money newSales;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        newSales \u003d oldSales.plus(toAdd.getMoney());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newSales;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof AddTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 transactionFactory.equals(((AddTransactionCommand) other).transactionFactory));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 49,
      "junhaotan": 6,
      "YingxuH": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/ClearTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Clears the transaction list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ClearTransactionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleart\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transaction list has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setInventorySystem(new InventorySystem(), COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/EditTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.createEditedProduct;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PRODUCTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Edits the details of an existing transaction in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT + \"PRODUCT] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"[\" + PREFIX_TRANS_DESCRIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + \"2020-02-20 10:00 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_QUANTITY + \"3 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_MONEY + \"40 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_TRANS_DESCRIPTION + \"normal price \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"This transaction already exists in the transaction list.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param index                     of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // create edited transaction"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cTransaction\u003e lastShownTransactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownTransactionList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownTransactionList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor, model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (modelHasDuplicateTransaction(model, editedTransaction, transactionToEdit)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update transaction list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update product details"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateProduct(model, transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Update product quantity and money based on edited transaction."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactionToEdit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedTransaction"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void updateProduct(Model model, Transaction transactionToEdit, Transaction editedTransaction)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editUpdatedProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product originalProductToEdit \u003d model.findProductById(transactionToEdit.getProductId());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedOriginalProduct \u003d createEditedOriginalProduct(originalProductToEdit, transactionToEdit);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!originalProductToEdit.isSameProduct(editedOriginalProduct) \u0026\u0026 model.hasProduct(editedOriginalProduct)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setProduct(originalProductToEdit, editedOriginalProduct);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product updatedProductToEdit \u003d model.findProductById(editedTransaction.getProductId());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity updatedProductOldQuantity \u003d updatedProductToEdit.getQuantity();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money updatedProductOldSales \u003d updatedProductToEdit.getMoney();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (updatedProductOldQuantity.compareTo(editedTransaction.getQuantity()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Quantity updatedProductNewQuantity \u003d updatedProductOldQuantity.minus(editedTransaction.getQuantity());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Money updatedProductNewSales \u003d updatedProductOldSales.plus(editedTransaction.getMoney());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editUpdatedProductDescriptor.setQuantity(updatedProductNewQuantity);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editUpdatedProductDescriptor.setSales(updatedProductNewSales);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            model.setProduct(editedOriginalProduct, originalProductToEdit);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_PRODUCT_QUANTITY,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    updatedProductOldQuantity.getValue(), updatedProductToEdit.getDescription().value));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product editedUpdatedProduct \u003d createEditedProduct(updatedProductToEdit, editUpdatedProductDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!updatedProductToEdit.isSameProduct(editedUpdatedProduct) \u0026\u0026 model.hasProduct(editedUpdatedProduct)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setProduct(updatedProductToEdit, editedUpdatedProduct);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Create the edited product from the original product in the transaction."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param originalProductToEdit"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactionToEdit"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return edited product"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Product createEditedOriginalProduct(Product originalProductToEdit,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                                Transaction transactionToEdit) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editOriginalProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity originalProductOldQuantity \u003d originalProductToEdit.getQuantity();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity originalProductNewQuantity \u003d originalProductOldQuantity.plus(transactionToEdit.getQuantity());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editOriginalProductDescriptor.setQuantity(originalProductNewQuantity);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money originalProductOldSales \u003d originalProductToEdit.getMoney();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money originalProductNewSales \u003d originalProductOldSales.minus(transactionToEdit.getMoney());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editOriginalProductDescriptor.setSales(originalProductNewSales);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return createEditedProduct(originalProductToEdit, editOriginalProductDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Check whether model has duplicate product"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editedTransaction"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return true if model has duplicate product, else false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private boolean modelHasDuplicateTransaction(Model model,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                                 Transaction editedTransaction,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                                 Transaction transactionToEdit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d model.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (!transaction.equals(transactionToEdit) \u0026\u0026 transaction.equals(editedTransaction)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                                       Model model) throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Customer updatedCustomer \u003d getCustomer(editTransactionDescriptor, model, transactionToEdit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        UUID updatedCustomerId \u003d updatedCustomer.getId();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product updatedProduct \u003d getProduct(editTransactionDescriptor, model, transactionToEdit);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        UUID updatedProductId \u003d updatedProduct.getId();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime updatedDateTime \u003d editTransactionDescriptor.getDateTime().orElse(transactionToEdit.getDateTime());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Quantity updatedQuantity \u003d editTransactionDescriptor.getQuantity().orElse(transactionToEdit.getQuantity());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money updatedMoney \u003d editTransactionDescriptor.getMoney().orElse(transactionToEdit.getMoney());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description updatedDescription \u003d editTransactionDescriptor.getDescription()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Transaction(updatedCustomer, updatedProduct, updatedCustomerId, updatedProductId,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                updatedDateTime, updatedQuantity, updatedMoney, updatedDescription);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns associated customer for edited transaction."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editTransactionDescriptor"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactionToEdit"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return associated customer"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static Customer getCustomer(EditTransactionDescriptor editTransactionDescriptor,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                 Model model,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                 Transaction transactionToEdit) throws CommandException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cCustomer\u003e lastShownCustomerList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (editTransactionDescriptor.getCustomerIndex().isPresent()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Index updatedCustomerIndex \u003d editTransactionDescriptor.getCustomerIndex().get();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (updatedCustomerIndex.getZeroBased() \u003e\u003d lastShownCustomerList.size()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return model.getFilteredCustomerList().get(updatedCustomerIndex.getZeroBased());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return transactionToEdit.getCustomer();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns associated product for edited transaction."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param editTransactionDescriptor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param transactionToEdit"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return associated product"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static Product getProduct(EditTransactionDescriptor editTransactionDescriptor,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                        Model model,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                        Transaction transactionToEdit) throws CommandException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cProduct\u003e lastShownProductList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (editTransactionDescriptor.getProductIndex().isPresent()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Index updatedProductIndex \u003d editTransactionDescriptor.getProductIndex().get();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (updatedProductIndex.getZeroBased() \u003e\u003d lastShownProductList.size()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return model.getFilteredProductList().get(updatedProductIndex.getZeroBased());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return transactionToEdit.getProduct();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof EditTransactionCommand)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionCommand e \u003d (EditTransactionCommand) other;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Index customerIndex;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Index productIndex;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Money money;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setCustomerIndex(toCopy.customerIndex);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setProductIndex(toCopy.productIndex);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setMoney(toCopy.money);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customerIndex, productIndex, dateTime, quantity,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    money, description);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setCustomerIndex(Index customerIndex) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setProductIndex(Index productIndex) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setMoney(Money money) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.money \u003d money;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cIndex\u003e getCustomerIndex() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(customerIndex);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cIndex\u003e getProductIndex() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(productIndex);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cMoney\u003e getMoney() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(money);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return getCustomerIndex().equals(e.getCustomerIndex())"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getProductIndex().equals(e.getProductIndex())"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getMoney().equals(e.getMoney())"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return \"EditTransactionDescriptor{\""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \"customerIndex\u003d\" + customerIndex"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", productIndex\u003d\" + productIndex"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", dateTime\u003d\" + dateTime"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", quantity\u003d\" + quantity"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", money\u003d\" + money"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \", description\u003d\" + description"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    + \u0027}\u0027;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 128,
      "junhaotan": 3,
      "YingxuH": 277
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/FindTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Finds and lists all transactions in transaction list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose descriptions contain any of \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"At least one field must be present in the command. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER_NAME [CUSTOMER_NAME]...] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT + \"PRODUCT_NAME [PRODUCT_NAME]...] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CUSTOMER + \"Bob \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRODUCT + \"WaterMelon \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + PREFIX_MONEY + \"30 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_DATETIME + \"2020-02-20 10:00 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Predicate\u003cTransaction\u003e predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public FindTransactionCommand(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof FindTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTransactionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "YingxuH": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/ListTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Lists all transactions in the application to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ListTransactionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transaction/UndoTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.product.EditProductCommand.createEditedProduct;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Undo a transaction identified using it\u0027s displayed index from the transaction list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class UndoTransactionCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undot\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            + \": Undo the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_UNDO_PERSON_SUCCESS \u003d \"Undo Transaction: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public UndoTransactionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // delete transaction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // update product quantity and money"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateProduct(model, transactionToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_PERSON_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds the quantity and money back to the product of the transaction to be undo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param transactionToUndo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void updateProduct(Model model, Transaction transactionToUndo) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Product productToEdit \u003d model.findProductById(transactionToUndo.getProductId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity oldQuantity \u003d productToEdit.getQuantity();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Quantity newQuantity \u003d oldQuantity.plus(transactionToUndo.getQuantity());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editProductDescriptor.setQuantity(newQuantity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money oldSales \u003d productToEdit.getMoney();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Money newSales \u003d oldSales.minus(transactionToUndo.getMoney());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editProductDescriptor.setSales(newSales);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(productToEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!productToEdit.isSameProduct(editedProduct) \u0026\u0026 model.hasProduct(editedProduct)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.setProduct(productToEdit, editedProduct);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof UndoTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UndoTransactionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 15,
      "junhaotan": 10,
      "YingxuH": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a prefix occurs more than one time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasDuplicateValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return values.size() \u003e 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String getPreamble() throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "junhaotan": 3,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /* Prefix definitions for customer */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /* Prefix definitions for product */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Prefix PREFIX_COSTPRICE \u003d new Prefix(\"cp/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_SALES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Prefix PREFIX_THRESHOLD \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /* Prefix definitions for transactions */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_MONEY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Prefix PREFIX_TRANS_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /* Prefix definitions for statistics */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 14,
      "junhaotan": 3,
      "YingxuH": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventorySystemParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.ListProductCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.LowLimitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.product.PlotSalesCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.statistics.PredictCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.statistics.ProfitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.statistics.RevenueCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ClearTransactionCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.FindTransactionCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ListTransactionCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.UndoTransactionCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.AddCustomerCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.DeleteCustomerCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.EditCustomerCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.customer.FindCustomerCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.product.AddProductCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.DeleteProductCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.EditProductCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.product.FindProductCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.product.LowLimitCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.product.PlotSalesCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.statistics.ProfitCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.statistics.RevenueCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.AddTransactionCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.EditTransactionCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.transaction.FindTransactionCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.transaction.UndoTransactionCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class InventorySystemParser {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case AddCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new AddCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case EditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new EditCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case DeleteCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new DeleteCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case ClearCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new ClearCustomerCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case FindCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new FindCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case ListCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new ListCustomerCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new ListProductCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case ClearProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new ClearProductCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case DeleteProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new DeleteProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case EditProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new EditProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case FindProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new FindProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case LowLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new LowLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case AddTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case EditTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new EditTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case FindTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new FindTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case ListTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ListTransactionCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case UndoTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return new UndoTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case ClearTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ClearTransactionCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case RevenueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new RevenueCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case ProfitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new ProfitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        case PredictCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new PredictCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case PlotSalesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new PlotSalesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 43,
      "-": 57,
      "junhaotan": 31,
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static CostPrice parseCostPrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!CostPrice.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new CostPrice(trimmedPrice);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static TransactionQuantity parseTransactionQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!TransactionQuantity.isValidFormat(trimmedQuantity)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(TransactionQuantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!TransactionQuantity.isValidValue(Integer.parseInt(trimmedQuantity))) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(TransactionQuantity.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TransactionQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static ProductQuantity parseProductQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!ProductQuantity.isValidFormat(trimmedQuantity)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(ProductQuantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!ProductQuantity.isValidValue(Integer.parseInt(trimmedQuantity))) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(ProductQuantity.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String product} into an {@code product}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code product} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String money} into an {@code Money}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code money} is invalid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money parseMoney(String money) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedMoney \u003d money.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidMoney(trimmedMoney)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidAmount(Integer.parseInt(trimmedMoney))) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(Money.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(trimmedMoney);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Description parseTransDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses a {@code String threshold} into an {@code trimmedThreshold}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static QuantityThreshold parseThreshold(String threshold) throws ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(threshold);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String trimmedThreshold \u003d threshold.trim();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedThreshold)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(QuantityThreshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new QuantityThreshold(trimmedThreshold);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 48,
      "-": 120,
      "junhaotan": 34,
      "YingxuH": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/AddCustomerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new AddCustomerCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandParser implements Parser\u003cAddCustomerCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns an AddCustomerCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Email email \u003d getEmail(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Address address \u003d getAddress(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new Customer(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new AddCustomerCommand(customer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Address getAddress(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new Address(Address.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Email getEmail(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new Email(Email.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 19,
      "-": 41,
      "junhaotan": 20,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/DeleteCustomerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandParser implements Parser\u003cDeleteCustomerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public DeleteCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DeleteCustomerCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 29,
      "YingxuH": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/EditCustomerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new EditCustomerCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandParser implements Parser\u003cEditCustomerCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCustomerCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns an EditCustomerCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d getEditPersonDescriptor(argMultimap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new EditCustomerCommand(index, editCustomerDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Get an edit person descriptor from the user input values."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return edit person descriptor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private EditCustomerDescriptor getEditPersonDescriptor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editCustomerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editCustomerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return editCustomerDescriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 12,
      "-": 61,
      "junhaotan": 25,
      "YingxuH": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/customer/FindCustomerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.JointCustomerPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new FindCustomerCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandParser implements Parser\u003cFindCustomerCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCustomerCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a FindCustomerCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public FindCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addToPredicates(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new FindCustomerCommand(new JointCustomerPredicate(predicates));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Add attributes entered by user to predicates list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void addToPredicates(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String customerArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String[] customerKeywords \u003d customerArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(customerKeywords)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String addressArgs \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String[] addressKeywords \u003d addressArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            predicates.add(new AddressContainsKeywordsPredicate(Arrays.asList(addressKeywords)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String emailArgs \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String[] emailKeywords \u003d emailArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            predicates.add(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String phoneArgs \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String[] phoneKeywords \u003d phoneArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            predicates.add(new PhoneContainsKeywordsPredicate(Arrays.asList(phoneKeywords)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "junhaotan": 78,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/AddProductCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INITIAL_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_THRESHOLD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new AddProductCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProductCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an AddProductCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_COSTPRICE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        PREFIX_PRICE, PREFIX_QUANTITY, PREFIX_SALES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_COSTPRICE, PREFIX_PRICE, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_DESCRIPTION, PREFIX_COSTPRICE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_PRICE, PREFIX_QUANTITY, PREFIX_SALES)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        CostPrice costPrice \u003d ParserUtil.parseCostPrice(argMultimap.getValue(PREFIX_COSTPRICE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseProductQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money sales \u003d getSales(argMultimap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        QuantityThreshold threshold \u003d getThreshold(argMultimap, quantity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (quantity.getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INITIAL_QUANTITY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product product \u003d new Product(description, costPrice, price, quantity, sales, threshold, 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new AddProductCommand(product);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money getSales(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SALES)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseMoney(argMultimap.getValue(PREFIX_SALES).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new Money(Money.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private QuantityThreshold getThreshold(ArgumentMultimap argMultimap, Quantity quantity)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_THRESHOLD)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseThreshold(argMultimap.getValue(PREFIX_THRESHOLD).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            // sets the default threshold at 20% of initial quantity"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String lowLimit \u003d String.valueOf(quantity.getValue() / 5);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new QuantityThreshold(lowLimit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 70,
      "junhaotan": 16,
      "YingxuH": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/DeleteProductCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new DeleteProductCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandParser implements Parser\u003cDeleteProductCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProductCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns a DeleteProductCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DeleteProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProductCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DeleteProductCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 29,
      "YingxuH": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/EditProductCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandParser implements Parser\u003cEditProductCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditProductCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an EditProductCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_COSTPRICE, PREFIX_PRICE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        PREFIX_QUANTITY, PREFIX_SALES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_COSTPRICE, PREFIX_PRICE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_QUANTITY, PREFIX_SALES)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_DESCRIPTION, PREFIX_COSTPRICE, PREFIX_PRICE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_QUANTITY, PREFIX_SALES)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                    EditProductCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editProductDescriptor \u003d getEditProductDescriptor(argMultimap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new EditProductCommand(index, editProductDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Get an edit product descriptor from the user input values."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @return edit product descriptor"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditProductDescriptor getEditProductDescriptor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editProductDescriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COSTPRICE).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editProductDescriptor.setCostPrice(ParserUtil"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    .parseCostPrice(argMultimap.getValue(PREFIX_COSTPRICE).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            editProductDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editProductDescriptor.setQuantity("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseProductQuantity(argMultimap.getValue(PREFIX_QUANTITY).get())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALES).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editProductDescriptor.setSales(ParserUtil.parseMoney(argMultimap.getValue(PREFIX_SALES).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return editProductDescriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 69,
      "junhaotan": 6,
      "YingxuH": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/FindProductCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandParser implements Parser\u003cFindProductCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindProductCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns a FindProductCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public FindProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new FindProductCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/LowLimitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_THRESHOLD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.LowLimitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new LowLimitCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class LowLimitCommandParser implements Parser\u003cLowLimitCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LowLimitCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a LowLimitCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public LowLimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PRODUCT, PREFIX_THRESHOLD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRODUCT, PREFIX_THRESHOLD)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LowLimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_PRODUCT, PREFIX_THRESHOLD)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    LowLimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index productIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PRODUCT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        QuantityThreshold threshold \u003d ParserUtil.parseThreshold(argMultimap.getValue(PREFIX_THRESHOLD).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new LowLimitCommand(productIndex, threshold);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "junhaotan": 47,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/product/PlotSalesCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.product.PlotSalesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new PlotProductSalesCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class PlotSalesCommandParser implements Parser\u003cPlotSalesCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int DEFAULT_LENGTH \u003d 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final DateTime DEFAULT_START_DATE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new DateTime(DateTime.DEFAULT_VALUE.minusDays(DEFAULT_LENGTH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PlotProductSalesCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns a PlotProductSalesCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PlotSalesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    PlotSalesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlotSalesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime startDateTime \u003d getStartDateTime(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime endDateTime \u003d getEndDateTime(argMultimap, startDateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new PlotSalesCommand(index, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DateTime getStartDateTime(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DateTime getEndDateTime(ArgumentMultimap argMultimap, DateTime startDateTime)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new DateTime(startDateTime.value.plusDays(DEFAULT_LENGTH));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 14,
      "YingxuH": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/ProfitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.statistics.ProfitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new ProfitCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProfitCommandParser implements Parser\u003cProfitCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ProfitCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an ProfitCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProfitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProfitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ProfitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new ProfitCommand(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 50,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/RevenueCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.statistics.RevenueCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Parses input arguments and creates a new RevenueCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class RevenueCommandParser implements Parser\u003cRevenueCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RevenueCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * and returns an RevenueCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public RevenueCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RevenueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    RevenueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new RevenueCommand(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 50,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/AddTransactionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parse input arguments and creates an AddTransactionCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommandParser implements Parser\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        PREFIX_MONEY, PREFIX_TRANS_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_MONEY, PREFIX_TRANS_DESCRIPTION)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index customerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index productIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PRODUCT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseTransactionQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime dateTime \u003d getDateTime(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Money money \u003d getMoney(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Description description \u003d getDescription(argMultimap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        TransactionFactory transactionFactory \u003d new TransactionFactory(customerIndex, productIndex, dateTime,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                quantity, money, description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new AddTransactionCommand(transactionFactory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DateTime getDateTime(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATETIME)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new DateTime(DateTime.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money getMoney(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MONEY)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new Money(Money.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Description getDescription(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TRANS_DESCRIPTION)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return ParserUtil.parseTransDescription(argMultimap.getValue(PREFIX_TRANS_DESCRIPTION).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new Description(Description.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 21,
      "junhaotan": 4,
      "YingxuH": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/EditTransactionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANS_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionCommandParser implements Parser\u003cEditTransactionCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTransactionCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an EditTransactionCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        PREFIX_QUANTITY, PREFIX_MONEY, PREFIX_TRANS_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_QUANTITY, PREFIX_MONEY, PREFIX_TRANS_DESCRIPTION)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                PREFIX_QUANTITY, PREFIX_MONEY, PREFIX_TRANS_DESCRIPTION)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    EditTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d getEditTransactionDescriptor(argMultimap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ParseException(EditTransactionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new EditTransactionCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditTransactionDescriptor getEditTransactionDescriptor(ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setCustomerIndex("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRODUCT).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setProductIndex("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PRODUCT).get())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setDateTime("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setQuantity("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseTransactionQuantity(argMultimap.getValue(PREFIX_QUANTITY).get())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONEY).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            editTransactionDescriptor.setMoney("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANS_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            editTransactionDescriptor.setDescription("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    ParserUtil.parseTransDescription(argMultimap.getValue(PREFIX_TRANS_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return editTransactionDescriptor;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 12,
      "junhaotan": 6,
      "YingxuH": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/FindTransactionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.FindTransactionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.CustomerContainsKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTimeEqualsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.JointTransactionPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.MoneyEqualsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.ProductContainsKeywordPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parse input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommandParser implements Parser\u003cFindTransactionCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTransactionCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns a FindTransactionCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public FindTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_MONEY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_MONEY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    FindTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesDuplicate(argMultimap, PREFIX_CUSTOMER, PREFIX_PRODUCT, PREFIX_DATETIME, PREFIX_MONEY)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_SAME_PREFIX,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    FindTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addToPredicates(argMultimap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new FindTransactionCommand(new JointTransactionPredicate(predicates));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Add attributes entered by user to predicates list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void addToPredicates(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_CUSTOMER)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String customerArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CUSTOMER).get()).toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String[] customerKeywords \u003d customerArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new CustomerContainsKeywordPredicate(Arrays.asList(customerKeywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_PRODUCT)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String productArgs \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_PRODUCT).get()).toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String[] productKeywords \u003d productArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new ProductContainsKeywordPredicate(Arrays.asList(productKeywords)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_DATETIME)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            predicates.add(new DateTimeEqualsPredicate(dateTime));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (anyPrefixesPresent(argMultimap, PREFIX_MONEY)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Money money \u003d ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            predicates.add(new MoneyEqualsPredicate(money));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean anyPrefixesDuplicate(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.hasDuplicateValues(prefix));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 21,
      "junhaotan": 1,
      "YingxuH": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transaction/UndoTransactionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.UndoTransactionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Parses input arguments and creates a new UndoTransactionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class UndoTransactionCommandParser implements Parser\u003cUndoTransactionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoTransactionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * and returns a UndoTransactionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public UndoTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new UndoTransactionCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhaotan": 4,
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InventorySystem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.ClearTransactionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.UniqueProductList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class InventorySystem implements ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final UniqueCustomerList persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final UniqueProductList products;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Creates an InventorySystem using the Persons and Products in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem(ReadOnlyInventorySystem toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        resetData(toBeCopied, ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        resetData(toBeCopied, ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        resetData(toBeCopied, ClearTransactionCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the contents of the customer list with {@code customers}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.persons.setPersons(customers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the contents of the product list with {@code products}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code products} must not contain duplicate products."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.products.setProduct(products);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transactions} must not contain duplicate products."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactions.setTransaction(transactions);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Resets the existing data of this {@code InventorySystem} with {@code newData}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void resetData(ReadOnlyInventorySystem newData, String commandWord) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (commandWord.equals(ClearCustomerCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else if (commandWord.equals(ClearProductCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setProducts(newData.getProductList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        } else if (commandWord.equals(ClearTransactionCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return persons.contains(customer);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a product with the same identity as {@code product} exists in the product list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return products.contains(product);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds a customer to the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must not already exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void addPerson(Customer p) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds a product to the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must not already exist in the product list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void addProduct(Product p) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.add(p);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Finds a product by id."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param id the unique if for product."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return the product found."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return products.findProductById(id);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons.setPerson(target, editedCustomer);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the given product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * existing product in the product list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.setProduct(target, editedProduct);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the given product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * existing product in the product list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void removePerson(Customer key) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ////Transaction Level operations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code t} exists in the system."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param t transaction to be checked."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if a transaction with the same identity exists in the list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transactions.contains(t);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addTransaction(Transaction t) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.add(t);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void removeTransaction(Transaction t) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.remove(t);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes {@code key} from this {@code InventorySystem}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code key} must exist in the product list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void removeProduct(Product key) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.remove(key);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + products.asUnmodifiableObservableList().size() + \" products\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getPersonList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return products.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof InventorySystem // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 persons.equals(((InventorySystem) other).persons));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 57,
      "-": 94,
      "junhaotan": 30,
      "YingxuH": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Path getInventorySystemFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void setInventorySystemFilePath(Path inventorySystemFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces address book data with the data in {@code inventorySystem}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /** Returns the InventorySystem */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ReadOnlyInventorySystem getInventorySystem();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    boolean hasPerson(Customer customer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a product with the same identity as {@code product} exists in the product list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    boolean hasProduct(Product product);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void deletePerson(Customer target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Deletes the given product."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must exist in the product list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void deleteProduct(Product target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The transaction must exist in the product list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void addPerson(Customer customer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds the given product."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code product} must not already exist in the product list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void addProduct(Product product);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Find product by id."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code id} the unique id."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Product findProductById(UUID id);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void setPerson(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the given product {@code target} with {@code editedProduct}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the product list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * another existing product in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void setProduct(Product target, Product editedProduct);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered customer list */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds the given transaction."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transaction} must not already exist in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return a filtered observable transactions list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param predicate specifies the matching condition."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the current {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredCustomerList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the current {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredProductList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the current {@code predicate}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredTransactionList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 34,
      "-": 84,
      "junhaotan": 19,
      "YingxuH": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystem inventorySystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final FilteredList\u003cProduct\u003e filteredProducts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Predicate\u003cCustomer\u003e customerPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Predicate\u003cProduct\u003e productPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Predicate\u003cTransaction\u003e transactionPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ModelManager(ReadOnlyInventorySystem addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.inventorySystem \u003d new InventorySystem(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(this.inventorySystem.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredProducts \u003d new FilteredList\u003c\u003e(this.inventorySystem.getProductList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.inventorySystem.getTransactionList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this(new InventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(inventorySystemFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userPrefs.setAddressBookFilePath(inventorySystemFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventorySystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.inventorySystem.resetData(inventorySystem, commandWord);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem.hasPerson(customer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem.hasProduct(product);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem.findProductById(id);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.removePerson(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.removeProduct(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.addPerson(customer);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void addProduct(Product product) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.addProduct(product);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem.hasTransaction(transaction);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.addTransaction(transaction);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.removeTransaction(transaction);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FilteredList\u003cTransaction\u003e newFilteredTransactions \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(inventorySystem.getTransactionList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        newFilteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newFilteredTransactions;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.setPerson(target, editedCustomer);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(target, editedProduct);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        inventorySystem.setProduct(target, editedProduct);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return filteredProducts;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerPredicate \u003d predicate;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredCustomers.setPredicate(customerPredicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        filteredProducts.setPredicate(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        int fullProductListSize \u003d getFilteredProductList().size();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productPredicate \u003d predicate;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        SortedList\u003cProduct\u003e sortedProduct \u003d new SortedList\u003c\u003e(filteredProducts);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sortedProduct.comparatorProperty().set((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (o1.getProgress() - o2.getProgress() \u003e 0) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } else if (o1.getProgress() \u003d\u003d o2.getProgress()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (sortedProduct.size() \u003d\u003d fullProductListSize) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            inventorySystem.setProducts(sortedProduct);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredProducts.setPredicate(productPredicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionPredicate \u003d predicate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredTransactions.setPredicate(transactionPredicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return inventorySystem.equals(other.inventorySystem)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 filteredProducts.equals(other.filteredProducts)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 48,
      "-": 150,
      "junhaotan": 32,
      "YingxuH": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventorySystem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an unmodifiable view of the persons list and product list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * This list will not contain any duplicate persons or duplicate products."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    ObservableList\u003cCustomer\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    ObservableList\u003cProduct\u003e getProductList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 12,
      "junhaotan": 2,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"inventorysystem.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Addresses can take any values (up to 45 characters), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"N/A\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 45;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "-": 53,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/AddressContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getAddress().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Customer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Customer(UUID id, Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(id, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean isSamePerson(Customer otherCustomer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 (otherCustomer.getId().equals(getId())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherCustomer.getId().equals(getId())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail()))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherCustomer.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 26,
      "-": 103,
      "junhaotan": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_LENGTH \u003d 40;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"N/A\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \"3. The email must be equal or fewer than 40 characters in total\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.equals(DEFAULT_VALUE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_LENGTH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "-": 63,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/EmailContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getEmail().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/JointCustomerPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Tests whether a {@code Customer}\u0027s attributes fulfill the given properties."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class JointCustomerPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cPredicate\u003cCustomer\u003e\u003e predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public JointCustomerPredicate(List\u003cPredicate\u003cCustomer\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .allMatch(predicate -\u003e predicate.test(customer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof JointCustomerPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 predicates.equals(((JointCustomerPredicate) other).predicates)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (predicates.size() \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            for (Predicate predicate : predicates) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                if (msg.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    if (predicate instanceof NameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg \u003d String.format(\"No customers named %s \", predicate.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof AddressContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg \u003d String.format(\"No customers staying in the area %s \", predicate.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof EmailContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg \u003d String.format(\"No customers with email %s \", predicate.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof PhoneContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg \u003d String.format(\"No customers with phone number %s \", predicate.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    if (predicate instanceof NameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg +\u003d String.format(\"named %s \", predicate.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof AddressContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg +\u003d String.format(\"staying in the area %s \", predicate.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof EmailContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg +\u003d String.format(\"with email %s \", predicate.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    } else if (predicate instanceof PhoneContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        msg +\u003d String.format(\"with phone number %s \", predicate.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            msg +\u003d \"found!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            Predicate\u003cCustomer\u003e predicate \u003d predicates.get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (predicate instanceof NameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                msg \u003d String.format(\"No customers named %s found!\", predicate.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } else if (predicate instanceof AddressContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                msg \u003d String.format(\"No customers staying in the area %s found!\", predicate.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } else if (predicate instanceof EmailContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                msg \u003d String.format(\"No customers with email %s found!\", predicate.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } else if (predicate instanceof PhoneContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                msg \u003d String.format(\"No customers with phone number %s found!\", predicate.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "junhaotan": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 30;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 56,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "junhaotan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Customer\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 and at most 15 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 15;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 49,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/PhoneContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (i + 1 \u003d\u003d keywords.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                print +\u003d keywords.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            print +\u003d keywords.get(i) + \" or \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/UniqueCustomerList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A customer is considered unique by comparing using {@code Customer#isSamePerson(Customer)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * adding and updating of persons uses Customer#isSamePerson(Customer) for equality so as to ensure that the customer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueCustomerList. However, the removal of a customer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * uses Customer#equals(Object) so as to ensure that the customer with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * @see Customer#isSamePerson(Customer)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!target.isSamePerson(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Removes the equivalent customer from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * The customer must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Replaces the contents of this list with {@code customers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!personsAreUnique(customers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if {@code customers} contains only unique customers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private boolean personsAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                if (customers.get(i).isSamePerson(customers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "junhaotan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/CostPrice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents a Product\u0027s cost price in the product list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class CostPrice {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \"Price can take any positive integer values (up to 1000000), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,7}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final int MAX_VALUE \u003d 1000000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Constructs an {@code Price}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CostPrice(String price) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // remove leading zeroes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d price.replaceFirst(\"^0+(?!$)\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                int value \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return value \u003c\u003d MAX_VALUE \u0026\u0026 value \u003e\u003d MIN_VALUE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof CostPrice // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 value.equals(((CostPrice) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "junhaotan": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Tests that a {@code Product}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getDescription().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s price in the product list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Price can take any positive integer values (up to 1000000), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,7}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 1000000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Price}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *th"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // remove leading zeroes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d price.replaceFirst(\"^0+(?!$)\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                int value \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return value \u003c\u003d MAX_VALUE \u0026\u0026 value \u003e\u003d MIN_VALUE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 67,
      "junhaotan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Product.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product in the product list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final CostPrice costPrice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private QuantityThreshold threshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private double progress;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Product(Description description, CostPrice costPrice, Price price, Quantity quantity,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                   Money money, QuantityThreshold threshold, double progress) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireAllNonNull(description, costPrice, price, quantity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.progress \u003d progress;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product(UUID id, Description description, CostPrice costPrice, Price price, Quantity quantity,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                   Money money, QuantityThreshold threshold, double progress) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(id, description, costPrice, price, quantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.progress \u003d progress;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CostPrice getCostPrice() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return costPrice;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public QuantityThreshold getThreshold() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setThreshold(String quantityThreshold) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.threshold \u003d new QuantityThreshold(quantityThreshold);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public double getProgress() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return progress;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setProgress(double progress) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.progress \u003d progress;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public int getQuantitySold(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (transaction.getProduct().equals(this)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int quantity \u003d transaction.getQuantity().getValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                count +\u003d quantity;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int getProfit(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int profit \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (transaction.getProduct().equals(this)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                int price \u003d transaction.getMoney().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int quantity \u003d transaction.getQuantity().getValue();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                int costPrice \u003d Integer.parseInt(transaction.getProduct().getCostPrice().value);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                profit +\u003d (price - costPrice * quantity);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if both products have the same identity and data fields."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean isSameProduct(Product otherProduct) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (otherProduct \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherProduct !\u003d null"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getId().equals(getId())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (otherProduct.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherProduct.getCostPrice().equals(getCostPrice())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherProduct.getPrice().equals(getPrice()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if the product\u0027s quantity is below or equal its threshold."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean reachesThreshold() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this.quantity.getValue() \u003c\u003d this.threshold.value;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if both products have the same identity and data fields."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof Product)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product otherProduct \u003d (Product) other;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherProduct.getId().equals(getId())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (otherProduct.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 otherProduct.getCostPrice().equals(getCostPrice())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherProduct.getPrice().equals(getPrice()))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherProduct.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return Objects.hash(description, costPrice, price, quantity, money);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(\"\\nCost Price: $\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(getCostPrice())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(\" Price: $\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(\" Sales: $\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getMoney())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(\" Threshold: \")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .append(getThreshold());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 118,
      "junhaotan": 60,
      "YingxuH": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/ProductQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s quantity in the prodct list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductQuantity implements Quantity {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int MIN_VALUE \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_VALUE \u003d \"The numeric value of Product Quantity must be \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"larger than or equal to \" + MIN_VALUE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \" and smaller than or equal to \" + MAX_VALUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code Quantity}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param quantity A valid quantity in string type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductQuantity(String quantity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidFormat(quantity), MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int numericValue \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidValue(numericValue), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d numericValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductQuantity(int q) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidValue(q), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d q;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string matches the regex of a valid product quantity."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidFormat(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int value \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return isValidValue(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a integer is a valid value for quantity."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidValue(int test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test \u003e\u003d MIN_VALUE \u0026\u0026 test \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the difference between this value and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity minus(Quantity q) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value - q.getValue();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductQuantity(newValue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the summation between this value and the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity plus(Quantity q) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value + q.getValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductQuantity(newValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if two product quantities are equal in terms of value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Quantity) other).getValue()); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int compareTo(Quantity q) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value - q.getValue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "YingxuH": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/UniqueProductList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A product is considered unique by comparing using {@code Product#isSameProduct(Product)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * As such, adding and updating of products uses Product#isSameProduct(Product) for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * equality so as to ensure that the product being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * unique in terms of identity in the UniqueProductList. However, the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * removal of a product uses Product#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * as to ensure that the product with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * @see Product#isSameProduct(Product)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class UniqueProductList implements Iterable\u003cProduct\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if the list contains an equivalent product as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean contains(Product toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProduct);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Adds a product to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void add(Product toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another existing product in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(target, editedProduct);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!target.isSameProduct(editedProduct) \u0026\u0026 contains(editedProduct)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.set(index, editedProduct);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(UniqueProductList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Replaces the contents of this list with {@code products}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code products} must not contain duplicate products."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setProduct(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireAllNonNull(products);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!productsAreUnique(products)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        internalList.setAll(products);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Removes the equivalent product from the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The product must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void remove(Product toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Find a product by UUID."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param id the unique id."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return a specific product with matching id."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Product p: internalList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            System.out.println(id.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            System.out.println(p.getId().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ObservableList\u003cProduct\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Iterator\u003cProduct\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof UniqueProductList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueProductList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if {@code products} contains only unique products."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private boolean productsAreUnique(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (int i \u003d 0; i \u003c products.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c products.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                if (products.get(i).isSameProduct(products.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 139,
      "YingxuH": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/DuplicateProductException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Signals that the operation will result in duplicate Products (Products are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DuplicateProductException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DuplicateProductException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        super(\"Operation would result in duplicate products\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/ProductNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Signals that the operation is unable to find the specified product."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProductNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Tags names should be alphanumeric and at most 15 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 15;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/CustomerContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code Customer} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class CustomerContainsKeywordPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CustomerContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(transaction.getCustomer().getName().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof CustomerContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 keywords.equals(((CustomerContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents the date time of a transaction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should be in yyyy-mm-dd hh:mm format, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"and it should not be in future\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .ofPattern(\"uuuu-MM-dd HH:mm\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\d{4}-\\\\d{2}-\\\\d{2})\\\\s+\\\\d{2}:\\\\d{2}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final ZoneId DEFAULT_ZONE \u003d ZoneId.of(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final LocalDateTime DEFAULT_VALUE \u003d LocalDateTime.now(DEFAULT_ZONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param dateTime A valid dateTime string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param dateTime A valid LocalDateTime format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d dateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid sales."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(test, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (dateTime.compareTo(DEFAULT_VALUE) \u003e 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the current date time is before the other date time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isBefore(DateTime other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.isBefore(other.value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the current date time is after the other date time."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isAfter(DateTime other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDate a \u003d value.toLocalDate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        a.atStartOfDay();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.isAfter(other.value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the current date time is on the same day with other date time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isOnSameDay(DateTime other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.toLocalDate().equals(other.value.toLocalDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Generate a range of dates."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param startDateTime the start date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param endDateTime the end date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return a list of dates between start and end."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static List\u003cDateTime\u003e populateDates(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cDateTime\u003e dateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        LocalDate localDate \u003d startDateTime.value.toLocalDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        while (localDate.isBefore(endDateTime.value.toLocalDate().plusDays(1))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dateTimes.add(new DateTime(localDate.atStartOfDay()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            localDate \u003d localDate.plusDays(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dateTimes;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.format(DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the string representation of only year and date."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toDateString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.toLocalDate().toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "YingxuH": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateTimeEqualsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code DateTime} matches the DateTime object given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTimeEqualsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime targetDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTimeEqualsPredicate(DateTime targetDateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetDateTime \u003d targetDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return transaction.getDateTime().equals(targetDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTimeEqualsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 targetDateTime.equals(((DateTimeEqualsPredicate) other).targetDateTime)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateTimeInRangePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code DateTime} matches the DateTime object given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTimeInRangePredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTimeInRangePredicate(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime transactionDate \u003d transaction.getDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return (transactionDate.isAfter(startDateTime) || transactionDate.equals(startDateTime))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 (transactionDate.isBefore(endDateTime) || transactionDate.equals(endDateTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof DateTimeInRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 startDateTime.equals(((DateTimeInRangePredicate) other).startDateTime)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 startDateTime.equals(((DateTimeInRangePredicate) other).endDateTime)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/JointTransactionPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests whether a {@code Transaction}\u0027s attributes fulfill the given properties."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class JointTransactionPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JointTransactionPredicate(List\u003cPredicate\u003cTransaction\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .allMatch(predicate -\u003e predicate.test(transaction));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof JointTransactionPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 predicates.equals(((JointTransactionPredicate) other).predicates)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/MoneyEqualsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Tests that a {@code Transactions}\u0027s {@code Money} matches the Money object given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class MoneyEqualsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Money targetMoney;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public MoneyEqualsPredicate(Money targetMoney) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.targetMoney \u003d targetMoney;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return transaction.getMoney().equals(targetMoney);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof MoneyEqualsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 targetMoney.equals(((MoneyEqualsPredicate) other).targetMoney)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/ProductContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Product} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductContainsKeywordPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(transaction.getProduct().getDescription().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof ProductContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 keywords.equals(((ProductContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/ProductIdEqualsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Product} matches the id given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductIdEqualsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductIdEqualsPredicate(UUID id) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.equals(transaction.getProductId());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof ProductIdEqualsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 id.equals(((ProductIdEqualsPredicate) other).id)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Transaction in the system."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Product product;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UUID productId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final UUID customerId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Transaction(Customer customer, Product product, UUID customerId, UUID productId,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                       DateTime dateTime, Quantity quantity, Money money, Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product getProduct() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return product;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public UUID getProductId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return productId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public UUID getCustomerId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return customerId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if any two transactions have the same customer, products, and dateTime."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * This defines a weaker notion of equality."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param otherTransaction other transaction."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if these two transactions have the same customer, products, and dateTime."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSameTransaction(Transaction otherTransaction) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (otherTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherTransaction !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getCustomerId().equals(getCustomerId())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getProductId().equals(getProductId())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherTransaction.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return otherTransaction.getCustomerId().equals(getCustomerId())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransaction.getProductId().equals(getProductId())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 otherTransaction.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        builder.append(getCustomer().getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" bought \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getProduct().getDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\"\\nDate/ time: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .append(getMoney());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public XYChart.Data\u003cString, Integer\u003e toData() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new XYChart.Data\u003c\u003e(dateTime.value.toLocalDate().toString(), quantity.getValue());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31,
      "YingxuH": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Creates a transaction with the customer and product index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionFactory {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index customerIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Index productIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactory(Index customerIndex, Index productIndex, DateTime dateTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              Quantity quantity, Money money, Description description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates a transaction with the found product and customer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param model the model manager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return created transaction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Transaction createTransaction(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money updatedMoney;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e customerList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cProduct\u003e productList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (customerIndex.getZeroBased() \u003e\u003d customerList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (productIndex.getZeroBased() \u003e\u003d productList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(customerIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product product \u003d model.getFilteredProductList().get(productIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        UUID customerId \u003d model.getFilteredCustomerList().get(customerIndex.getZeroBased()).getId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        UUID productId \u003d model.getFilteredProductList().get(productIndex.getZeroBased()).getId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (money.value \u003d\u003d Money.DEFAULT_VALUE) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedMoney \u003d new Money(Integer.parseInt(product.getPrice().value) * quantity.getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            updatedMoney \u003d money;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Transaction(customer, product, customerId, productId, dateTime, quantity, updatedMoney, description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Index getProductIndex() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return productIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Index getCustomerIndex() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return customerIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof TransactionFactory)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory otherTransactionFactory \u003d (TransactionFactory) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherTransactionFactory.customerIndex.equals(customerIndex)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.productIndex.equals(productIndex)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.money.equals(money)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.quantity.equals(quantity)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 otherTransactionFactory.description.equals(description);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "junhaotan": 18,
      "YingxuH": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Transaction\u0027s quantity in the transaction list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionQuantity implements Quantity {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_VALUE \u003d \"The numeric value of Transaction Quantity must be \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"larger than or equal to \" + MIN_VALUE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            + \" and smaller than or equal to \" + MAX_VALUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code Quantity}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param quantity A valid quantity in string type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionQuantity(String quantity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidFormat(quantity), MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int numericValue \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidValue(numericValue), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d numericValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionQuantity(int q) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidValue(q), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d q;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string matches the regex of a valid transaction quantity."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidFormat(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int value \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return isValidValue(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a integer is a valid value for quantity."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidValue(int test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test \u003e\u003d MIN_VALUE \u0026\u0026 test \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the difference between this value and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity minus(Quantity q) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value - q.getValue();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TransactionQuantity(newValue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the summation between this value and the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Quantity plus(Quantity q) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(q);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value + q.getValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TransactionQuantity(newValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if two transaction quantities are equal in value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Quantity) other).getValue()); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int compareTo(Quantity q) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value - q.getValue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueTransactionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Implements a list of non-duplicate transactions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class UniqueTransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param toCheck the transaction to be checked"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if there is an equivalent transaction in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTransaction);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a transaction to the unique list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param toAdd transaction to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The product identity of {@code editedProduct} must not be the same as another existing product in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!target.isSameTransaction(editedTransaction) \u0026\u0026 contains(editedTransaction)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code transactions} must not contain duplicate products."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTransaction(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!transactionsAreUnique(transactions)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if {@code transactions} contains only unique products."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private boolean transactionsAreUnique(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size() - 1; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            for (int j \u003d i + 1; j \u003c transactions.size(); j++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                if (transactions.get(i).isSameTransaction(transactions.get(j))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateTransactionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals of duplicate transactions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DuplicateTransactionException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DuplicateTransactionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(\"Operation would result in duplicate transactions\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException{}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a Product\u0027s description in the product list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"N/A\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 57,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Money.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Transaction\u0027s Monetary Information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMoney(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Money {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Money should take non-negative integer values (up to 1000000), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_VALUE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"The numeric value of Money must not be negative and must be smaller than 1000000\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,7}$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int MAX_VALUE \u003d 1000000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int DEFAULT_VALUE \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code Money}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param amount A valid amount in string type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(String amount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidMoney(amount), MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int numericValue \u003d Integer.parseInt(amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidAmount(numericValue), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d numericValue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code Money}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param amount A valid amount in int type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(int amount) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid sales."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the amount is in a valid range."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param test integer to be tested."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return true if the integer is valid, false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidAmount(int test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new money whose value is the difference between this value and the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param m other money."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new money."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money minus(Money m) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value - m.value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(newValue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new money whose value is the summation between this value and the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param m other money."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new money."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money plus(Money m) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int newValue \u003d value + m.value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(newValue);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Money // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((Money) other).value)); // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "YingxuH": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * The API of quantity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public interface Quantity extends Comparable\u003cQuantity\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Quantity should take non-negative integer values (up to 1000000), and it should not be blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    String VALIDATION_REGEX \u003d \"^\\\\d{1,7}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    int MAX_VALUE \u003d 1000000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the value of the quantity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    int getValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the difference between this value and the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Quantity minus(Quantity q);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a new quantity whose value is the summation between this value and the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * other\u0027s value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param q other quantity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return new quantity."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Quantity plus(Quantity q);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    boolean equals(Object other);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    int hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    int compareTo(Quantity q);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 16,
      "YingxuH": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/QuantityThreshold.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Represents the quantity threshold for each product before the application notifies the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class QuantityThreshold {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \"Quantity threshold can take any positive integer values (up to 1000000), and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * There must be one or more digits entered."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final int MAX_VALUE \u003d 1000000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Constructs an {@code QuantityThreshold}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param quantityThreshold A valid quantityThreshold."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public QuantityThreshold(String quantityThreshold) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        requireNonNull(quantityThreshold);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        checkArgument(isValidQuantity(quantityThreshold), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        value \u003d Integer.parseInt(quantityThreshold);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public QuantityThreshold(int quantityThreshold) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(quantityThreshold);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidQuantityValue(quantityThreshold), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        value \u003d quantityThreshold;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns true if a given string is a valid quantity threshold."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 Integer.parseInt(test) \u003c MAX_VALUE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidQuantityValue(int test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test \u003e 0 \u0026\u0026 test \u003c MAX_VALUE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public double getDouble() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Double.valueOf(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                || (other instanceof QuantityThreshold // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((QuantityThreshold) other).value); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 9,
      "junhaotan": 47,
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains utility methods for populating {@code InventorySystem} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ALEX_YEOH \u003d new Customer(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"friends\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer BERNICE_YU \u003d new Customer(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"colleagues\", \"friends\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer CHARLOTTE \u003d new Customer(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"neighbours\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer DAVID_LI \u003d new Customer(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"family\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer IRFAN \u003d new Customer(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"classmates\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ROY \u003d new Customer(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"colleagues\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer VIVIAN_TAN \u003d new Customer(new Name(\"Vivian Tan\"), new Phone(\"86724359\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"viviantan@example.com\"), new Address(\"Blk 239 Tampines Street 31, #08-21\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"classmates\", \"colleagues\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer MARCUS_NEO \u003d new Customer(new Name(\"Marcus Neo\"), new Phone(\"95482145\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Email(\"marcusneo@mail.com\"), new Address(\"Blk 834 Bukit Panjang Street 19, #12-08\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            getTagSet(\"celebrity\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product IPAD_PRO \u003d new Product(new Description(\"iPad Pro\"), new CostPrice(\"599\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"1299\"), new ProductQuantity(29), new Money(14289),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"8\"), 0.725);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product AIRPODS_PRO \u003d new Product(new Description(\"Airpods Pro\"), new CostPrice(\"129\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"379\"), new ProductQuantity(96), new Money(1516),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"20\"), 0.96);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product IPHONE_X \u003d new Product(new Description(\"iPhone X\"), new CostPrice(\"349\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"1199\"), new ProductQuantity(60), new Money(Money.DEFAULT_VALUE),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"12\"), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product IPHONE_8PLUS \u003d new Product(new Description(\"iPhone 8 Plus\"), new CostPrice(\"299\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"950\"), new ProductQuantity(48), new Money(1900),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"10\"), 0.96);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product MACBOOK_AIR \u003d new Product(new Description(\"Macbook Air\"), new CostPrice(\"680\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"1449\"), new ProductQuantity(29), new Money(1499),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"6\"), 0.967);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product APPLE_WATCH \u003d new Product(new Description(\"Apple Watch\"), new CostPrice(\"109\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"440\"), new ProductQuantity(80), new Money(Money.DEFAULT_VALUE),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"16\"), 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Product APPLE_PENCIL \u003d new Product(new Description(\"Apple Pencil\"), new CostPrice(\"59\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new Price(\"189\"), new ProductQuantity(100), new Money(Money.DEFAULT_VALUE),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new QuantityThreshold(\"20\"), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Customer[] getSamplePersons() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Customer[] {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            ALEX_YEOH, BERNICE_YU, CHARLOTTE, DAVID_LI, IRFAN, VIVIAN_TAN, MARCUS_NEO"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Product[] getSampleProducts() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Product[] {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            IPAD_PRO, AIRPODS_PRO, IPHONE_X, IPHONE_8PLUS, MACBOOK_AIR, APPLE_WATCH, APPLE_PENCIL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Transaction[] getSampleTransactions() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new Transaction[] {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(ALEX_YEOH, IPAD_PRO, ALEX_YEOH.getId(), IPAD_PRO.getId(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"2\"), new Money(\"2598\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(BERNICE_YU, IPHONE_8PLUS, BERNICE_YU.getId(), IPHONE_8PLUS.getId(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"2\"), new Money(\"1900\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(DAVID_LI, IPAD_PRO, DAVID_LI.getId(), IPAD_PRO.getId(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"4\"), new Money(\"5196\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(VIVIAN_TAN, MACBOOK_AIR, VIVIAN_TAN.getId(), MACBOOK_AIR.getId(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"1\"), new Money(\"1449\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(IRFAN, AIRPODS_PRO, IRFAN.getId(), AIRPODS_PRO.getId(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"4\"), new Money(\"1516\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new Transaction(CHARLOTTE, IPAD_PRO, CHARLOTTE.getId(), IPAD_PRO.getId(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTime(DateTime.DEFAULT_VALUE), new ProductQuantity(\"5\"), new Money(\"6495\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Description(\"N/A\"))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static ReadOnlyInventorySystem getSampleInventorySystem() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem sampleAb \u003d new InventorySystem();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Customer sampleCustomer : getSamplePersons()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            sampleAb.addPerson(sampleCustomer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Product sampleProduct : getSampleProducts()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            sampleAb.addProduct(sampleProduct);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Transaction sampleTransaction : getSampleTransactions()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            sampleAb.addTransaction(sampleTransaction);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "-": 32,
      "junhaotan": 95,
      "YingxuH": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventorySystemStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Represents a storage for {@link InventorySystem}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface InventorySystemStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Path getInventorySystemFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns InventorySystem data as a {@link ReadOnlyInventorySystem}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see #getInventorySystemFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Saves the given {@link ReadOnlyInventorySystem} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param inventorySystem cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveInventorySystem(ReadOnlyInventorySystem inventorySystem) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see #saveInventorySystem(ReadOnlyInventorySystem)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveInventorySystem(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventorySystemStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A class to access InventorySystem data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonInventorySystemStorage implements InventorySystemStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventorySystemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonInventorySystemStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return readInventorySystem(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Similar to {@link #readInventorySystem()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Optional\u003cJsonSerializableInventorySystem\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                filePath, JsonSerializableInventorySystem.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveInventorySystem(ReadOnlyInventorySystem inventorySystem) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        saveInventorySystem(inventorySystem, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Similar to {@link #saveInventorySystem(ReadOnlyInventorySystem)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveInventorySystem(ReadOnlyInventorySystem inventorySystem, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        requireNonNull(inventorySystem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventorySystem(inventorySystem), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventorySystem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.transaction.JsonAdaptedTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * An Immutable InventorySystem that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "class JsonSerializableInventorySystem {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"Transactions list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"Products list contains duplicate product(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final List\u003cJsonAdaptedProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs a {@code JsonSerializableInventorySystem} with the given persons, transactions and products."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonSerializableInventorySystem(@JsonProperty(\"persons\") List\u003cJsonAdaptedCustomer\u003e persons,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                           @JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                           @JsonProperty(\"products\") List\u003cJsonAdaptedProduct\u003e products) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.products.addAll(products);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts a given {@code ReadOnlyInventorySystem} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventorySystem}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonSerializableInventorySystem(ReadOnlyInventorySystem source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions.addAll(source.getTransactionList().stream().map(JsonAdaptedTransaction::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        products.addAll(source.getProductList().stream().map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts this address book into the model\u0027s {@code InventorySystem} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public InventorySystem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem addressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : persons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (addressBook.hasPerson(customer)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            addressBook.addPerson(customer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (addressBook.hasTransaction(transaction)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            addressBook.addTransaction(transaction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (JsonAdaptedProduct jsonAdaptedProduct : products) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Product product \u003d jsonAdaptedProduct.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (addressBook.hasProduct(product)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            addressBook.addProduct(product);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 31,
      "-": 40,
      "junhaotan": 8,
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public interface Storage extends InventorySystemStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Path getInventorySystemFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    void saveInventorySystem(ReadOnlyInventorySystem inventorySystem) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Manages storage of InventorySystem data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private InventorySystemStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public StorageManager(InventorySystemStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventorySystem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return addressBookStorage.getInventorySystemFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return readInventorySystem(addressBookStorage.getInventorySystemFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Optional\u003cReadOnlyInventorySystem\u003e readInventorySystem(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return addressBookStorage.readInventorySystem(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveInventorySystem(ReadOnlyInventorySystem inventorySystem) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        saveInventorySystem(inventorySystem, addressBookStorage.getInventorySystemFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void saveInventorySystem(ReadOnlyInventorySystem addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        addressBookStorage.saveInventorySystem(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 16,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/customer/JsonAdaptedCustomer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"id\") String id, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                               @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                               @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final UUID modelUuid \u003d getUuid();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Name modelName \u003d getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Phone modelPhone \u003d getPhone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Email modelEmail \u003d getEmail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Address modelAddress \u003d getAddress();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Customer(modelUuid, modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID getUuid() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return UUID.fromString(id);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Name getName() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Phone getPhone() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Phone(phone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Email getEmail() throws IllegalValueException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Email(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Address getAddress() throws IllegalValueException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Address(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private HashSet\u003cTag\u003e getTags() throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 43,
      "-": 82,
      "junhaotan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/product/JsonAdaptedProduct.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Jackson-friendly version of {@link Product}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedProduct {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Product\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final String costPrice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String money;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final String threshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedProduct} with the given product details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public JsonAdaptedProduct(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                              @JsonProperty(\"costPrice\") String costPrice, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                             @JsonProperty(\"quantity\") String quantity, @JsonProperty(\"money\") String money,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              @JsonProperty(\"threshold\") String threshold, @JsonProperty(\"id\") String id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts a given {@code Product} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public JsonAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        costPrice \u003d source.getCostPrice().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        money \u003d source.getMoney().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        threshold \u003d source.getThreshold().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Product} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted product."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final UUID modelId \u003d getUuid();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Description modelDescription \u003d getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final CostPrice modelCostPrice \u003d getCostPrice();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Price modelPrice \u003d getPrice();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Quantity modelQuantity \u003d getQuantity();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Money modelMoney \u003d getMoney();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final QuantityThreshold modelQuantityThreshold \u003d getQuantityThreshold();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Product(modelId, modelDescription, modelCostPrice, modelPrice, modelQuantity,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                modelMoney, modelQuantityThreshold, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID getUuid() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return UUID.fromString(id);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Description getDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private CostPrice getCostPrice() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (costPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    CostPrice.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!CostPrice.isValidPrice(costPrice)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new IllegalValueException(CostPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new CostPrice(costPrice);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Price getPrice() throws IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Price(price);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Quantity getQuantity() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!ProductQuantity.isValidFormat(quantity)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(ProductQuantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!ProductQuantity.isValidValue(Integer.parseInt(quantity))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(ProductQuantity.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductQuantity(quantity);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money getMoney() throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (money \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Money.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Money.isValidMoney(money)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!Money.isValidAmount(Integer.parseInt(money))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Money(money);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private QuantityThreshold getQuantityThreshold() throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (threshold \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    QuantityThreshold.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (!QuantityThreshold.isValidQuantity(threshold)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            throw new IllegalValueException(QuantityThreshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new QuantityThreshold(threshold);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 111,
      "junhaotan": 24,
      "YingxuH": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transaction/JsonAdaptedTransaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final JsonAdaptedCustomer customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final JsonAdaptedProduct product;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String productId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final String customerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String money;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"customer\") JsonAdaptedCustomer customer,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                  @JsonProperty(\"product\") JsonAdaptedProduct product,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                  @JsonProperty(\"customerId\") String customerId,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                  @JsonProperty(\"productId\") String productId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                               @JsonProperty(\"dateTime\") String dateTime, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                               @JsonProperty(\"money\") String money, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customer \u003d new JsonAdaptedCustomer(source.getCustomer());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        product \u003d new JsonAdaptedProduct(source.getProduct());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        customerId \u003d source.getCustomerId().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productId \u003d source.getProductId().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d source.getMoney().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Customer modelCustomer \u003d getCustomer();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Product modelProduct \u003d getProduct();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final UUID modelCustomerId \u003d getCustomerId();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final UUID modelProductId \u003d getProductId();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final DateTime modelDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Quantity modelQuantity \u003d getQuantity();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Money modelMoney \u003d getMoney();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final Description modelDescription \u003d getDescription();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Transaction(modelCustomer, modelProduct, modelCustomerId, modelProductId,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                modelDateTime, modelQuantity, modelMoney, modelDescription);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Customer getCustomer() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return customer.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Product getProduct() throws IllegalValueException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (product \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return product.toModelType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID getCustomerId() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (customerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return UUID.fromString(customerId);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID getProductId() throws IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (productId \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return UUID.fromString(productId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DateTime getDateTime() throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Quantity getQuantity() throws IllegalValueException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!TransactionQuantity.isValidFormat(quantity)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!TransactionQuantity.isValidValue(Integer.parseInt(quantity))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(TransactionQuantity.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TransactionQuantity(quantity);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money getMoney() throws IllegalValueException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (money \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    Money.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidMoney(money)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidAmount(Integer.parseInt(money))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_CONSTRAINTS_VALUE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Money(money);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Description getDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 47,
      "YingxuH": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final int MAX_BUFFER_SIZE \u003d 100; // size of buffer to store command history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private LinkedList\u003cString\u003e commandHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private ListIterator\u003cString\u003e historyIterator \u003d commandHistory.listIterator(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e keyPressedEvent(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Event handler for text field when an key is pressed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param event KeyEvent to process."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void keyPressedEvent(KeyEvent event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        switch (event.getCode()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            traverseHistory(-1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            traverseHistory(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Goes through the text field history."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param index positive to traverse down, negative to traverse up."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void traverseHistory(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (index \u003e 0 \u0026\u0026 historyIterator.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            command \u003d historyIterator.next();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (index \u003c 0 \u0026\u0026 historyIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            command \u003d historyIterator.previous();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        commandTextField.setText(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        commandTextField.positionCaret(command.length()); // position the text cursor at the end of the command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (commandHistory.size() \u003e\u003d MAX_BUFFER_SIZE) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                commandHistory.pop();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            commandHistory.offer(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            historyIterator \u003d commandHistory.listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            commandExecutor.execute(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "junhaotan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.scene.media.MediaException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-t09-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private WebView webView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String uri \u003d HelpWindow.class.getResource(\"/html/userGuide.html\").toURI().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            webView.getEngine().load(uri);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } catch (URISyntaxException | MediaException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        webView.getEngine().reload();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "junhaotan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.ui.customer.CustomerListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.product.ProductListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.statistics.StatisticsListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.transaction.TransactionListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private CustomerListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanel productListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StatisticsListPanel statisticsListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private NotificationWindow notificationWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private PlotWindow plotWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private StackPane customerListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane productListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        notificationWindow \u003d new NotificationWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        plotWindow \u003d new PlotWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        personListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        customerListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanel(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelPlaceholder.getChildren().add(productListPanel.getRoot());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        statisticsListPanel \u003d new StatisticsListPanel(logic);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsListPanel.getRoot());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getInventorySystemFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Label commandBoxLabel \u003d new Label(\"Enter command\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        commandBoxLabel.setTextFill(Color.web(\"#ffffff\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        HBox commandHBox \u003d new HBox();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        HBox.setHgrow(commandBoxLabel, Priority.ALWAYS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        HBox.setHgrow(commandBox.getRoot(), Priority.ALWAYS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        commandHBox.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        commandHBox.setSpacing(10);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        commandHBox.getChildren().addAll(commandBoxLabel, commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandHBox);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Plot the sales of a product."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void handlePlot(XYChart.Series dataSeries, String title) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!plotWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            plotWindow.show(dataSeries, title);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            plotWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void handleNotification(Product editedProduct) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!notificationWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            notificationWindow.show(editedProduct.getDescription(), editedProduct.getQuantity());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            notificationWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            statisticsPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            statisticsPanelPlaceholder.getChildren().add(new StatisticsListPanel(logic).getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (commandResult.isShowNotification()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                handleNotification(commandResult.getNotificationData());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (commandResult.isShowPlot()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                handlePlot(commandResult.getDataSeries(), commandResult.getTitle());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 23,
      "-": 142,
      "junhaotan": 3,
      "YingxuH": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotificationWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Controller for notification page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class NotificationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String NOTIFICATION_MESSAGE \u003d \"Product %s quantity low!\\nRemaining balance: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String FXML \u003d \"NotificationWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Label notificationMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates a new NotificationWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @param root Stage to use as root of the NotificationWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public NotificationWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Creates a new NotificationWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public NotificationWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void show(Description description, Quantity quantity) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        logger.fine(\"Showing notification window.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        notificationMessage.setText(String.format(NOTIFICATION_MESSAGE, description, quantity));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns true if the notification window is currently being shown."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Focuses on the notification window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "junhaotan": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlotWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Controller of a plot page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class PlotWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlotWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"PlotWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private BarChart barChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates a new PlotWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PlotWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates a new PlotWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PlotWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Shows the plot window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void show(XYChart.Series dataSeries, String titleText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        logger.fine(\"Showing plot window.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        barChart.getData().setAll(dataSeries);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        title.setText(titleText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the plot window is currently being shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Focuses on the plot window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/inventory_system_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/customer/CustomerCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private HBox cardPaneCustomer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        phone.setText(customer.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        address.setText(customer.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        email.setText(customer.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    Label newLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    newLabel.setStyle(\"-fx-background-color:#242424\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    tags.getChildren().add(newLabel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 55,
      "junhaotan": 12,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/customer/CustomerListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.fine(\"Linked customer list to panel.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 12,
      "-": 30,
      "junhaotan": 4,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/product/ProductCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Product}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String RED_BAR \u003d \"red-bar\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String ORANGE_BAR \u003d \"orange-bar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String YELLOW_BAR \u003d \"yellow-bar\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String GREEN_BAR \u003d \"green-bar\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String DISPLAY_CURRENCY \u003d \"$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String[] barColorStyleClasses \u003d { RED_BAR, ORANGE_BAR, YELLOW_BAR, GREEN_BAR };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Product product;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private HBox cardPaneProduct;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Label costPrice;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label sales;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Label threshold;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private double progress;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard(Product product, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description.setText(product.getDescription().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        costPrice.setText(DISPLAY_CURRENCY + product.getCostPrice().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price.setText(DISPLAY_CURRENCY + product.getPrice().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity.setText(String.valueOf(product.getQuantity().getValue()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        sales.setText(DISPLAY_CURRENCY + product.getMoney().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        threshold.setText(product.getThreshold().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        updateProgressBar();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Updates the progress bar to visualise remaining stock quantity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void updateProgressBar() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        progress \u003d product.getQuantity().getValue() / (product.getThreshold().getDouble() * 5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        product.setProgress(progress);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        progressBar.setProgress(progress);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        if (progress \u003c\u003d 0.2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            setBarStyleClass(progressBar, RED_BAR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (progress \u003c\u003d 0.4) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            setBarStyleClass(progressBar, ORANGE_BAR);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else if (progress \u003c\u003d 0.6) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            setBarStyleClass(progressBar, YELLOW_BAR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            setBarStyleClass(progressBar, GREEN_BAR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void setBarStyleClass(ProgressBar bar, String barStyleClass) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        bar.getStyleClass().removeAll(barColorStyleClasses);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        bar.getStyleClass().add(barStyleClass);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof ProductCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard card \u003d (ProductCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 product.equals(card.product);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 7,
      "junhaotan": 37,
      "YingxuH": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/product/ProductListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cProduct\u003e productListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanel(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setItems(productList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.fine(\"Linked product list to panel.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setCellFactory(listView -\u003e new ProductListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class ProductListViewCell extends ListCell\u003cProduct\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(Product product, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(product, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || product \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(new ProductCard(product, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "YingxuH": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatisticsCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * An UI component that displays information of a {@code Product}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class StatisticsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String FXML \u003d \"StatisticsListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on InventorySystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public final Product product;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Label quantity; // quantity of product since creation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Label sales;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Label costPrice;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Label profit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public StatisticsCard(Product product, int displayedIndex, List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description.setText(product.getDescription().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        costPrice.setText(\"$\" + product.getCostPrice().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price.setText(\"$\" + product.getPrice().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        quantity.setText(String.valueOf(product.getQuantitySold(transactions)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        sales.setText(\"$\" + product.getMoney().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        profit.setText(\"$\" + product.getProfit(transactions));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        if (!(other instanceof StatisticsCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        StatisticsCard card \u003d (StatisticsCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u0026\u0026 product.equals(card.product);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 72,
      "junhaotan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatisticsListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class StatisticsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String FXML \u003d \"StatisticsListPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static List\u003cTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static List\u003cProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsListPanel.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private ListView\u003cProduct\u003e statisticsListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LineChart\u003cInteger, Integer\u003e quantityLineChart;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LineChart\u003cInteger, Integer\u003e salesLineChart;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public StatisticsListPanel(Logic logic) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactions \u003d logic.getInventorySystem().getTransactionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products \u003d logic.getInventorySystem().getProductList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        statisticsListView.setItems(getSortedProductList(logic));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.fine(\"Linked top selling product list to panel.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        statisticsListView.setCellFactory(listView -\u003e new StatisticsListViewCell());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantityLineChart.getData().setAll(fetchProductQuantity());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        salesLineChart.getData().setAll(fetchProductSales());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.fine(\"Fetched product quantity and sales.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sorts the product list according to product revenue."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return sorted list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ObservableList\u003cProduct\u003e getSortedProductList(Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e modifiableProducts \u003d new ArrayList\u003c\u003e(logic.getInventorySystem().getProductList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Collections.sort(modifiableProducts, new Comparator\u003cProduct\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            public int compare(Product o1, Product o2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int o1Sales \u003d o1.getProfit(transactions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int o2Sales \u003d o2.getProfit(transactions);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return o2Sales - o1Sales;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return FXCollections.observableArrayList(modifiableProducts);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sorts the product list according to product revenue."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return sorted list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private XYChart.Series fetchProductQuantity() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        XYChart.Series dataSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e allProductQuantities \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products.forEach(p -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (allProductQuantities.containsKey(p.getQuantity().getValue())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int oldValue \u003d allProductQuantities.get(p.getQuantity().getValue());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                allProductQuantities.put(p.getQuantity().getValue(), oldValue + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                allProductQuantities.put(p.getQuantity().getValue(), 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Map.Entry\u003cInteger, Integer\u003e entry: allProductQuantities.entrySet()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            XYChart.Data nextData \u003d new XYChart.Data(entry.getKey().intValue(), entry.getValue().intValue());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dataSeries.getData().add(nextData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dataSeries;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sorts the product list according to product revenue."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return sorted list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private XYChart.Series fetchProductSales() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        XYChart.Series dataSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e allProductSales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products.forEach(p -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (allProductSales.containsKey(p.getMoney().value)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                int oldValue \u003d allProductSales.get(p.getMoney().value);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                allProductSales.put(p.getMoney().value, oldValue + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                allProductSales.put(p.getMoney().value, 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Map.Entry\u003cInteger, Integer\u003e entry: allProductSales.entrySet()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            XYChart.Data nextData \u003d new XYChart.Data(entry.getKey().intValue(), entry.getValue().intValue());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dataSeries.getData().add(nextData);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return dataSeries;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    class StatisticsListViewCell extends ListCell\u003cProduct\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        protected void updateItem(Product product, boolean empty) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            super.updateItem(product, empty);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            if (empty || product \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                setGraphic(new StatisticsCard(product, getIndex() + 1, transactions).getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 51,
      "YingxuH": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/transaction/TransactionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableView\u003cTransaction\u003e transactionTableView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e customerCol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e productCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e dateTimeCol;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e quantityCol;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e amountCol;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        transactionTableView.setItems(transactionList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getCustomer().getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerCol.setSortable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getProduct().getDescription().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productCol.setSortable(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTimeCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getDateTime().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTimeCol.setSortable(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantityCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getQuantity().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantityCol.setSortable(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        amountCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getMoney().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        amountCol.setSortable(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptionCol.setCellValueFactory(t -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            property.setValue(t.getValue().getDescription().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptionCol.setSortable(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        logger.fine(\"Linked transaction list to panel.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 89
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cHBox id\u003d\"cardPaneCustomer\" fx:id\u003d\"cardPaneCustomer\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cImage url\u003d\"@../images/customer_icon.png\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cSeparator prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/Separator\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Phone\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel minWidth\u003d\"-Infinity\" text\u003d\"Address\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"Address: \\$address\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Email\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"Email: \\$email\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 54,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Customers\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "  \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 6,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cURL value\u003d\"@HelpWindow.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cWebView fx:id\u003d\"webView\" prefHeight\u003d\"650.0\" prefWidth\u003d\"800.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "junhaotan": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"iTrack Pro\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    \u003cImage url\u003d\"@/images/inventory_system_logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cTabPane prefHeight\u003d\"200.0\" prefWidth\u003d\"519.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cTab text\u003d\"Main\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                          \u003cVBox fx:id\u003d\"customerList\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"customerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                          \u003cVBox fx:id\u003d\"productList\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                             \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                             \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                             \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"productListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                             \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cgraphic\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                              \u003cImage url\u003d\"@../images/home_icon.png\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003c/graphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cTab text\u003d\"Transactions\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cVBox fx:id\u003d\"transactionList\" minWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                          \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                                 \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cgraphic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                              \u003cImage url\u003d\"@../images/transaction_icon.png\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003c/graphic\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cVBox styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cgraphic\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                              \u003cImage url\u003d\"@../images/statistics_icon.png\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003c/graphic\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 30,
      "-": 36,
      "junhaotan": 1,
      "YingxuH": 48
    }
  },
  {
    "path": "src/main/resources/view/NotificationWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cfx:root minHeight\u003d\"240.0\" minWidth\u003d\"240.0\" resizable\u003d\"false\" title\u003d\"Alert!\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    \u003cImage url\u003d\"@/images/info_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"193.0\" prefWidth\u003d\"255.0\" style\u003d\"-fx-background-color: #101010;\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Low quantity notification\" textAlignment\u003d\"CENTER\" textFill\u003d\"#e797fd\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                           \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                      \u003cLabel fx:id\u003d\"notificationMessage\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"217.0\" prefWidth\u003d\"253.0\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 16,
      "junhaotan": 24
    }
  },
  {
    "path": "src/main/resources/view/PlotWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"SalesPlot\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cImage url\u003d\"@/images/stats-icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #101010;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: #101010;\" styleClass\u003d\"notification-window\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cVBox alignment\u003d\"TOP_CENTER\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cGroup\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxWidth\u003d\"1.7976931348623157E308\" textAlignment\u003d\"CENTER\" textFill\u003d\"#e797fd\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                          \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003c/Group\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cBarChart fx:id\u003d\"barChart\" legendVisible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003cxAxis\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                  \u003cCategoryAxis side\u003d\"BOTTOM\" tickLabelRotation\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003cyAxis\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                  \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                                \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "YingxuH": 64
    }
  },
  {
    "path": "src/main/resources/view/ProductListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cHBox id\u003d\"cardPaneProduct\" fx:id\u003d\"cardPaneProduct\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cURL value\u003d\"@Progress.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cImageView fitHeight\u003d\"24.0\" fitWidth\u003d\"26.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cImage url\u003d\"@../images/product_icon.png\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"progressBar\" progress\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cSeparator prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/Separator\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cLabel text\u003d\"Cost Price\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"costPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$costPrice\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Price\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Quantity\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Sales\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"sales\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sales\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cLabel text\u003d\"Threshold\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                  \u003cLabel fx:id\u003d\"threshold\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$threshold\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 60,
      "junhaotan": 26,
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/resources/view/ProductListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Products\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cListView fx:id\u003d\"productListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/resources/view/StatisticsListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cHBox id\u003d\"cardPaneStatistics\" fx:id\u003d\"cardPaneStatistics\" style\u003d\"-fx-background-color: #1fcbff; -fx-border-width: 0; -fx-background-radius: 10px;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cSeparator prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/Separator\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Cost Price\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel fx:id\u003d\"costPrice\" text\u003d\"\\$costPrice\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cLabel text\u003d\"Price\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cLabel fx:id\u003d\"price\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cLabel text\u003d\"Total quantity sold\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cLabel fx:id\u003d\"quantity\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cLabel text\u003d\"Sales\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cLabel fx:id\u003d\"sales\" text\u003d\"\\$sales\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cLabel text\u003d\"Profits\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"profit\" text\u003d\"\\$profit\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 99,
      "junhaotan": 3
    }
  },
  {
    "path": "src/main/resources/view/StatisticsListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cHBox style\u003d\"-fx-background-color: #242424;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cGroup\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Product Quantity Histogram\" textAlignment\u003d\"CENTER\" textFill\u003d\"#e797fd\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/Group\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLineChart fx:id\u003d\"quantityLineChart\" legendVisible\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"174.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cxAxis\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cNumberAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cyAxis\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cGroup\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Product Sales Histogram\" textAlignment\u003d\"CENTER\" textFill\u003d\"#e797fd\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                              \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/Group\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLineChart fx:id\u003d\"salesLineChart\" legendVisible\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"238.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cxAxis\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cNumberAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003cyAxis\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                     \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox style\u003d\"-fx-background-color: #242424;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            \u003cURL value\u003d\"@StatisticsListPanel.css\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Top Selling Products\" textAlignment\u003d\"CENTER\" textFill\u003d\"#e797fd\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cListView fx:id\u003d\"statisticsListView\" style\u003d\"-fx-background-color: #242424;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003c/padding\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 20,
      "junhaotan": 3,
      "YingxuH": 65
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "\u003cHBox id\u003d\"cardPaneTransaction\" fx:id\u003d\"cardPaneTransaction\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Customer\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"customer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customer\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Product\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"product\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$product\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Date/ time\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"money\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$money\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cLabel text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "               \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 49,
      "YingxuH": 27
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cLabel text\u003d\"Transactions\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cTableView fx:id\u003d\"transactionTableView\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     \u003ccolumns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "       \u003cTableColumn fx:id\u003d\"customerCol\" prefWidth\u003d\"125.0\" sortable\u003d\"false\" text\u003d\"Customer\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "       \u003cTableColumn fx:id\u003d\"productCol\" prefWidth\u003d\"125.0\" sortable\u003d\"false\" text\u003d\"Product\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cTableColumn fx:id\u003d\"dateTimeCol\" minWidth\u003d\"15.0\" prefWidth\u003d\"170.0\" sortable\u003d\"false\" text\u003d\"DateTime\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cTableColumn fx:id\u003d\"quantityCol\" prefWidth\u003d\"81.0\" sortable\u003d\"false\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cTableColumn fx:id\u003d\"amountCol\" prefWidth\u003d\"72.0\" sortable\u003d\"false\" text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         \u003cTableColumn fx:id\u003d\"descriptionCol\" prefWidth\u003d\"287.0\" sortable\u003d\"false\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     \u003c/columns\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/TableView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 4,
      "YingxuH": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/inventory_system_logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.JsonInventorySystemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonInventorySystemStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String deleteCommand \u003d \"deletec 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String listCommand \u003d ListCustomerCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(listCommand, ListCustomerCommand.MESSAGE_EMPTY, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String addCommand \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.addPerson(expectedCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCustomerList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonInventorySystemStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void saveInventorySystem(ReadOnlyInventorySystem inventorySystem, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 8,
      "-": 142,
      "junhaotan": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false).hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true).hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "YingxuH": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRODUCT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_THRESHOLD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.CustomerContainsKeywordPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_DESCRIPTION_WATCH \u003d \"Black watch\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_DESCRIPTION_BAG \u003d \"Black bag\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALID_COSTPRICE_WATCH \u003d \"249\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALID_COSTPRICE_BAG \u003d \"149\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_PRICE_WATCH \u003d \"11\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_PRICE_BAG \u003d \"22\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_QUANTITY_WATCH \u003d \"1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_QUANTITY_BAG \u003d \"2\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_SALES_WATCH \u003d \"22\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String VALID_SALES_BAG \u003d \"44\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALID_THRESHOLD_WATCH \u003d \"20\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String VALID_THRESHOLD_BAG \u003d \"12\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_CUSTOMER_INDEX_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_PRODUCT_INDEX_BAG \u003d \"1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_DATETIME_AMY_BAG \u003d \"2020-03-01 10:00\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_QUANTITY_AMY_BAG \u003d \"1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_MONEY_AMY_BAG \u003d \"30\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY_BAG \u003d \"under discount\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_CUSTOMER_INDEX_AMY \u003d \"-1\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_PRODUCT_INDEX_BAG \u003d \"0\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_DATETIME_AMY_BAG \u003d \"2020-03-0110:00\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_MONEY_AMY_BAG \u003d \"-30\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DESCRIPTION_DESC_BAG \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DESCRIPTION_DESC_WATCH \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COSTPRICE_DESC_BAG \u003d \" \" + PREFIX_COSTPRICE + VALID_COSTPRICE_BAG;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String COSTPRICE_DESC_WATCH \u003d \" \" + PREFIX_COSTPRICE + VALID_COSTPRICE_WATCH;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String PRICE_DESC_BAG \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String PRICE_DESC_WATCH \u003d \" \" + PREFIX_PRICE + VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String QUANTITY_DESC_BAG \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String QUANTITY_DESC_WATCH \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String SALES_DESC_BAG \u003d \" \" + PREFIX_SALES + VALID_SALES_BAG;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String SALES_DESC_WATCH \u003d \" \" + PREFIX_SALES + VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String THRESHOLD_DESC_BAG \u003d \" \" + PREFIX_THRESHOLD + VALID_THRESHOLD_BAG;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final String THRESHOLD_DESC_WATCH \u003d \" \" + PREFIX_THRESHOLD + VALID_THRESHOLD_WATCH;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String CUSTOMER_INDEX_DESC_AMY_BAG \u003d \" \" + PREFIX_CUSTOMER + VALID_CUSTOMER_INDEX_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String PRODUCT_INDEX_DESC_AMY_BAG \u003d \" \" + PREFIX_PRODUCT + VALID_PRODUCT_INDEX_BAG;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DATETIME_DESC_AMY_BAG \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_AMY_BAG;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String QUANTITY_DESC_AMY_BAG \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_AMY_BAG;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_DESC_AMY_BAG \u003d \" \" + PREFIX_MONEY + VALID_MONEY_AMY_BAG;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY_BAG \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY_BAG;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String CUSTOMER_NAME_DESC_AMY \u003d \" \" + PREFIX_CUSTOMER + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String PRODUCT_DESCRIPTION_DESC_BAG \u003d \" \" + PREFIX_PRODUCT + VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"911a\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"bob!yahoo\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String INVALID_SALES_DESC \u003d \" \" + PREFIX_SALES;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_CUSTOMER_INDEX_DESC \u003d \" \" + PREFIX_CUSTOMER + INVALID_CUSTOMER_INDEX_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_PRODUCT_INDEX_DESC \u003d \" \" + PREFIX_PRODUCT + INVALID_PRODUCT_INDEX_BAG;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + INVALID_DATETIME_AMY_BAG;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_MONEY_DESC \u003d \" \" + PREFIX_MONEY + INVALID_MONEY_AMY_BAG;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_CUSTOMER_NAME_DESC \u003d \" \" + PREFIX_CUSTOMER + \"James\u0026\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String INVALID_PRODUCT_DESCRIPTION_DESC \u003d \" \" + PREFIX_PRODUCT + \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final EditCustomerCommand.EditCustomerDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final EditCustomerCommand.EditCustomerDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final EditProductCommand.EditProductDescriptor DESC_BAG;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final EditProductCommand.EditProductDescriptor DESC_WATCH;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final QuantityThreshold THRESHOLD_BAG;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final QuantityThreshold THRESHOLD_WATCH;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DESC_AMY \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DESC_BOB \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DESC_BAG \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .withCostPrice(VALID_COSTPRICE_BAG).withPrice(VALID_PRICE_BAG).withQuantity(VALID_QUANTITY_BAG)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .withSales(VALID_SALES_BAG).withThreshold(VALID_THRESHOLD_BAG).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DESC_WATCH \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .withCostPrice(VALID_COSTPRICE_WATCH).withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_WATCH)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .withSales(VALID_SALES_WATCH).withThreshold(VALID_THRESHOLD_WATCH).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        THRESHOLD_BAG \u003d new QuantityThreshold(VALID_THRESHOLD_BAG);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        THRESHOLD_WATCH \u003d new QuantityThreshold(VALID_THRESHOLD_WATCH);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * - the address book, filtered customer list and selected customer in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem expectedAddressBook \u003d new InventorySystem(actualModel.getInventorySystem());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getInventorySystem());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the customer at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final String[] splitName \u003d customer.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(1, model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the product at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static void showProductAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product product \u003d model.getFilteredProductList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final String[] splitName \u003d product.getDescription().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(1, model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final String[] splitName \u003d transaction.getCustomer().getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model.updateFilteredTransactionList(new CustomerContainsKeywordPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 53,
      "-": 113,
      "junhaotan": 36,
      "YingxuH": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "YingxuH": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "YingxuH": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/AddCustomerCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCustomerCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder(\"a4365691-ea10-47ad-b33b-fc038f1e5e80\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.addPerson(validCustomer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new AddCustomerCommand(validCustomer), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Customer customerInList \u003d model.getInventorySystem().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(new AddCustomerCommand(customerInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Messages.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 6,
      "-": 31,
      "junhaotan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/AddCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BOB_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCustomerCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        CommandResult commandResult \u003d new AddCustomerCommand(validCustomer).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(validCustomer), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addCustomerCommand \u003d new AddCustomerCommand(validCustomer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validCustomer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Messages.MESSAGE_DUPLICATE_PERSON, () -\u003e addCustomerCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer alice \u003d new CustomerBuilder(ALICE_ID).withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer bob \u003d new CustomerBuilder(BOB_ID).withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addAliceCommand \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addBobCommand \u003d new AddCustomerCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand addAliceCommandCopy \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void setPerson(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * A Model stub that contains a single customer."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private final Customer customer;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        ModelStubWithPerson(Customer customer) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return this.customer.isSamePerson(customer);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * A Model stub that always accept the customer being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final ArrayList\u003cCustomer\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return personsAdded.stream().anyMatch(customer::isSamePerson);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            personsAdded.add(customer);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new InventorySystem();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 43,
      "-": 145,
      "junhaotan": 43,
      "YingxuH": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/ClearCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ClearCustomerCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_emptyInventorySystem_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_nonEmptyInventorySystem_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setInventorySystem(new InventorySystem(), ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 21,
      "junhaotan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/DeleteCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * {@code DeleteCustomerCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_PERSON_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.deletePerson(customerToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventorySystem().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteSecondCommand \u003d new DeleteCustomerCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommandCopy \u003d new DeleteCustomerCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model.updateFilteredCustomerList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(model.getFilteredCustomerList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 79,
      "junhaotan": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/EditCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE_ID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * for EditCustomerCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer lastCustomer \u003d model.getFilteredCustomerList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        CustomerBuilder personInList \u003d new CustomerBuilder(lastCustomer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(lastCustomer, editedCustomer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditCustomerDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customerInFilteredList \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder(customerInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer firstCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(firstCustomer).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // edit customer in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Customer secondCustomerInList \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                model.getInventorySystem().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Customer firstCustomerInList \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                model.getInventorySystem().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditCustomerDescriptorBuilder(secondCustomerInList).withId(firstCustomerInList.getId()).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditCustomerCommand(INDEX_FIRST_PERSON, editCustomerDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventorySystem().getPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final EditCustomerCommand standardCommand \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor copyDescriptor \u003d new EditCustomerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand commandWithSameValues \u003d new EditCustomerCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCustomerCommand()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 15,
      "-": 110,
      "junhaotan": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/EditCustomerDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptorWithSameValues \u003d new EditCustomerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 48,
      "junhaotan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/FindCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.JointCustomerPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCustomerCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findFirstCommand \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findSecondCommand \u003d new FindCustomerCommand(secondPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand findFirstCommandCopy \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_zeroKeywords_noCustomerFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneAddressKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d \"No customers staying in the area serangoon found!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(\"serangoon\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneAddressKeyword_multipleCustomersFound() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(\"street\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL, GEORGE), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleAddressKeywords_oneCustomerFound() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(\"jurong bugis changi\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleAddressKeywords_multipleCustomersFound() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(\"jurong clementi tokyo\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, FIONA), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"george\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(GEORGE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameKeyword_multipleCustomersFound() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Meier\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, DANIEL), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameKeywords_oneCustomerFound() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"george alex peter\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(GEORGE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameKeywords_multipleCustomersFound() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneEmailKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d \"No customers with email jack@example.com found!\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d prepareEmailPredicate(\"jack@example.com\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneEmailKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d prepareEmailPredicate(\"heinz@example.com\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(CARL), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_onePhoneKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d \"No customers with phone number 81232712 found!\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d preparePhonePredicate(\"81232712\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_onePhoneKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d preparePhonePredicate(\"87652533\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndAddressKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareAddressPredicate(\"bugis\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndAddressKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareAddressPredicate(\"jurong\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndAddressKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul peter\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareAddressPredicate(\"bugis bishan changi\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndAddressKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline peter pan\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareAddressPredicate(\"jurong bugis bishan\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndAddressKeyword_multipleCustomerFound() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline benson\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareAddressPredicate(\"jurong clementi\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndPhoneKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePhonePredicate(\"9999999\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndPhoneKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePhonePredicate(\"94351253\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndPhoneKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul peter jojo\"));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePhonePredicate(\"999999 122313123 7872318237\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndPhoneKeyword_multipleCustomerFound() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline benson\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePhonePredicate(\"94351253 98765432\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndEmailKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul\"));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareEmailPredicate(\"test@example.com\"));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_oneNameAndEmailKeyword_oneCustomerFound() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline\"));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareEmailPredicate(\"alice@example.com\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndEmailKeyword_noCustomerFound() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"paul peter jojo\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareEmailPredicate(\"test@example.com hahah@wahaha.com\"));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_multipleNameAndEmailKeyword_multipleCustomerFound() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cPredicate\u003cCustomer\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(preparePredicate(\"pauline benson\"));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        predicates.add(prepareEmailPredicate(\"alice@example.com johnd@example.com\"));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JointCustomerPredicate jointCustomerPredicate \u003d new JointCustomerPredicate(predicates);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(jointCustomerPredicate);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.updateFilteredCustomerList(jointCustomerPredicate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses {@code userInput} into a {@code PhoneContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private PhoneContainsKeywordsPredicate preparePhonePredicate(String userInput) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 59,
      "junhaotan": 312
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/customer/ListCustomerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCustomerCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ListCustomerCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 31,
      "junhaotan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/AddProductCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.TypicalProducts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCustomerCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_newProduct_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d TypicalProducts.WATCH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.addProduct(validProduct);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new AddProductCommand(validProduct), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(AddProductCommand.MESSAGE_SUCCESS, validProduct), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProduct_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productInList \u003d model.getInventorySystem().getProductList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(new AddProductCommand(productInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Messages.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 45,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/AddProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.ABACUS_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BOOK_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_nullProduct_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProductCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_productAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStubAcceptingProductAdded modelStub \u003d new ModelStubAcceptingProductAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        CommandResult commandResult \u003d new AddProductCommand(validProduct).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(String.format(AddProductCommand.MESSAGE_SUCCESS, validProduct),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(Arrays.asList(validProduct), modelStub.productsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProduct_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product validProduct \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addProductCommand \u003d new AddProductCommand(validProduct);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProduct(validProduct);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Messages.MESSAGE_DUPLICATE_PRODUCT, () -\u003e addProductCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product alice \u003d new ProductBuilder(ABACUS_ID).withDescription(\"Abacus\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product bob \u003d new ProductBuilder(BOOK_ID).withDescription(\"Book\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addAliceCommand \u003d new AddProductCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addBobCommand \u003d new AddProductCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        AddProductCommand addAliceCommandCopy \u003d new AddProductCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void deleteProduct(Product target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setPerson(Customer target, Customer editedProduct) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A Model stub that contains a single product."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStubWithProduct extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private final Product product;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelStubWithProduct(Product product) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            this.product \u003d product;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return this.product.isSameProduct(product);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A Model stub that always accept the product being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private class ModelStubAcceptingProductAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final ArrayList\u003cProduct\u003e productsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return productsAdded.stream().anyMatch(product::isSameProduct);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            requireNonNull(product);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            productsAdded.add(product);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return new InventorySystem();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 253,
      "YingxuH": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/ClearProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ClearProductCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_emptyInventorySystem_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ClearProductCommand(), model, ClearProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_nonEmptyInventorySystem_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setInventorySystem(new InventorySystem(), ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ClearProductCommand(), model, ClearProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 27,
      "junhaotan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/DeleteProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * {@code DeleteProductCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d model.getFilteredProductList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProductCommand.MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(deleteProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProductList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandFailure(deleteProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productToDelete \u003d model.getFilteredProductList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteProductCommand.MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showNoProduct(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(deleteProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventorySystem().getProductList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteProductCommand \u003d new DeleteProductCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandFailure(deleteProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteFirstCommand \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteSecondCommand \u003d new DeleteProductCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DeleteProductCommand deleteFirstCommandCopy \u003d new DeleteProductCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void showNoProduct(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        model.updateFilteredProductList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(model.getFilteredProductList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 103,
      "junhaotan": 2,
      "YingxuH": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/EditProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.ABACUS_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * for EditProductCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(editedProduct).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(model.getFilteredProductList().get(0), editedProduct);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index indexLastProduct \u003d Index.fromOneBased(model.getFilteredProductList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product lastProduct \u003d model.getFilteredProductList().get(indexLastProduct.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ProductBuilder productInList \u003d new ProductBuilder(lastProduct);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d productInList.withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(editedProduct)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(indexLastProduct, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(lastProduct, editedProduct);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d model.getFilteredProductList().get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder(editedProduct).build());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Product productInFilteredList \u003d model.getFilteredProductList().get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                ProductBuilder(productInFilteredList).withDescription(VALID_DESCRIPTION_WATCH).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder(productInFilteredList)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_WATCH).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(EditProductCommand.MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InventorySystem(model.getInventorySystem()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.setProduct(model.getFilteredProductList().get(0), editedProduct);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertCommandSuccess(editProductCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProductUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product firstProduct \u003d model.getFilteredProductList().get(INDEX_FIRST_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(firstProduct).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_SECOND_PRODUCT, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_duplicateProductFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // edit product in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product productInList \u003d model.getInventorySystem().getProductList().get(INDEX_SECOND_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new EditProductDescriptorBuilder(productInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidProductIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProductList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(editedProduct).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_invalidProductIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventorySystem().getProductList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product editedProduct \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(editedProduct).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand editProductCommand \u003d new EditProductCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandFailure(editProductCommand, model, Messages.MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        final EditProductCommand standardCommand \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, DESC_BAG);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor copyDescriptor \u003d new EditProductDescriptor(DESC_BAG);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand commandWithSameValues \u003d new EditProductCommand(INDEX_FIRST_PRODUCT, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearProductCommand()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditProductCommand(INDEX_SECOND_PRODUCT, DESC_BAG)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditProductCommand(INDEX_FIRST_PRODUCT, DESC_WATCH)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 179,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/EditProductDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptorWithSameValues \u003d new EditProductDescriptor(DESC_BAG);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(DESC_BAG.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(DESC_BAG.equals(DESC_BAG));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(DESC_WATCH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor editedAmy \u003d new"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                EditProductDescriptorBuilder(DESC_BAG).withDescription(VALID_DESCRIPTION_WATCH).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withQuantity(VALID_QUANTITY_WATCH).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different sales -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        editedAmy \u003d new EditProductDescriptorBuilder(DESC_BAG).withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(DESC_BAG.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/FindProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindProductCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findFirstCommand \u003d new FindProductCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findSecondCommand \u003d new FindProductCommand(secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand findFirstCommandCopy \u003d new FindProductCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_zeroKeywords_noProductFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d \"Please enter at least one keyword!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand command \u003d new FindProductCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertEquals(Collections.emptyList(), model.getFilteredProductList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_multipleKeywords_multipleProductsFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PRODUCTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"bag book\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand command \u003d new FindProductCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertEquals(Arrays.asList(BAG, BOOK), model.getFilteredProductList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 75,
      "junhaotan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/ListProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProductAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListProductCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ListProductCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ListProductCommand(), model, ListProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        showProductAtIndex(model, INDEX_FIRST_PRODUCT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertCommandSuccess(new ListProductCommand(), model, ListProductCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 37,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/product/LowLimitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.THRESHOLD_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.THRESHOLD_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class LowLimitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void constructor_nullLowLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LowLimitCommand(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void constructor_negativeLowLimit_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LowLimitCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Index(0), new QuantityThreshold(\"-1\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void constructor_negativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new LowLimitCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new Index(-1), new QuantityThreshold(\"10\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        final LowLimitCommand standardCommand \u003d new LowLimitCommand(INDEX_FIRST_PRODUCT, THRESHOLD_BAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        QuantityThreshold copyThreshold \u003d new QuantityThreshold(THRESHOLD_BAG.value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        LowLimitCommand commandWithSameValues \u003d new LowLimitCommand(INDEX_FIRST_PRODUCT, copyThreshold);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearProductCommand()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new LowLimitCommand(INDEX_SECOND_PRODUCT, THRESHOLD_BAG)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(standardCommand.equals(new LowLimitCommand(INDEX_FIRST_PRODUCT, THRESHOLD_WATCH)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/ProfitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.DateTimeBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProfitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_nullProfit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProfitCommand(null, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime startDate \u003d new DateTimeBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime endDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_END_DATE).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime otherStartDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_OTHER_START_DATE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime otherEndDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_OTHER_END_DATE).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ProfitCommand profitCommand \u003d new ProfitCommand(startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ProfitCommand otherProfitCommand \u003d new ProfitCommand(otherStartDate, otherEndDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(profitCommand.equals(profitCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ProfitCommand profitCommandCopy \u003d new ProfitCommand(startDate, endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(profitCommand.equals(profitCommandCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(profitCommand.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(profitCommand.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(profitCommand.equals(otherProfitCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 44,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/RevenueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.DateTimeBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class RevenueCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_nullRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RevenueCommand(null, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime startDate \u003d new DateTimeBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime endDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_END_DATE).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime otherStartDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_OTHER_START_DATE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DateTime otherEndDate \u003d new DateTimeBuilder(DateTimeBuilder.DEFAULT_OTHER_END_DATE).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        RevenueCommand revenueCommand \u003d new RevenueCommand(startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        RevenueCommand otherRevenueCommand \u003d new RevenueCommand(otherStartDate, otherEndDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(revenueCommand.equals(revenueCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        RevenueCommand revenueCommandCopy \u003d new RevenueCommand(startDate, endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(revenueCommand.equals(revenueCommandCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(revenueCommand.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(revenueCommand.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(revenueCommand.equals(otherRevenueCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 44,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/transaction/AddTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.TransactionFactoryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTransactionCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_transactionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommandTest.ModelStubAcceptingTransactionAdded modelStub \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new AddTransactionCommandTest.ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory validTransactionFactory \u003d new TransactionFactoryBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction validTransaction \u003d validTransactionFactory.createTransaction(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product validProductToEdit \u003d BAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product validEditedProduct \u003d new ProductBuilder(BAG).withQuantity("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                BAG.getQuantity().minus(validTransaction.getQuantity()).toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult commandResult \u003d new AddTransactionCommand(validTransactionFactory).execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(String.format(AddTransactionCommand.MESSAGE_SUCCESS, validTransaction),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Arrays.asList(validTransaction), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(validProductToEdit, modelStub.productToEdit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(validEditedProduct, modelStub.editedProduct);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_duplicateTransaction_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommandTest.ModelStubWithTransaction modelStub \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new AddTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory validTransactionFactory \u003d new TransactionFactoryBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction validTransaction \u003d validTransactionFactory.createTransaction(modelStub);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommand addTransactionCommand \u003d new AddTransactionCommand(validTransactionFactory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        modelStub.setTransaction(validTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Messages.MESSAGE_DUPLICATE_TRANSACTION, () -\u003e addTransactionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory tOne \u003d new TransactionFactoryBuilder().withDescription(\"under discount\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory tTwo \u003d new TransactionFactoryBuilder().withDescription(\"NA\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommand addTOneCommand \u003d new AddTransactionCommand(tOne);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommand addTTwoCommand \u003d new AddTransactionCommand(tTwo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(addTOneCommand.equals(addTOneCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddTransactionCommand addTOneCommandCopy \u003d new AddTransactionCommand(tOne);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(addTOneCommand.equals(addTOneCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(addTOneCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(addTOneCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(addTOneCommand.equals(addTTwoCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteProduct(Product product) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setPerson(Customer target, Customer editedTransaction) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStubWithTransaction extends AddTransactionCommandTest.ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Transaction transaction;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final FilteredList\u003cCustomer\u003e filteredCustomerList \u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList(ALICE));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final FilteredList\u003cProduct\u003e filteredProductList \u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList(BAG));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredCustomerList;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredProductList;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends AddTransactionCommandTest.ModelStub {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final ArrayList\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final FilteredList\u003cCustomer\u003e filteredCustomerList \u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList(ALICE));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final FilteredList\u003cProduct\u003e filteredProductList \u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList(BAG));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Product productToEdit;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private Product editedProduct;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredCustomerList;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredProductList;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            transactionsAdded.add(transaction);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productToEdit \u003d target;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.editedProduct \u003d editedProduct;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product getProductToEdit() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return productToEdit;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product getEditedProduct() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return editedProduct;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new InventorySystem();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhaotan": 1,
      "YingxuH": 358
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/transaction/ClearTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ClearTransactionCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_emptyInventorySystem_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearTransactionCommand(), model,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ClearTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void execute_nonEmptyInventorySystem_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInventorySystem(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedModel.setInventorySystem(new InventorySystem(), ClearTransactionCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertCommandSuccess(new ClearTransactionCommand(), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ClearTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/transaction/FindTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_TWO_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BENSON_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.CustomerContainsKeywordPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTimeEqualsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.DateTimeBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicateAlice \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicateBob \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Collections.singletonList(\"Bob\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand findNamesHasAlice \u003d new FindTransactionCommand(predicateAlice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand findNameHasBob \u003d new FindTransactionCommand(predicateBob);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(findNamesHasAlice.equals(findNamesHasAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand findNamesHasAliceCopy \u003d new FindTransactionCommand(predicateAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(findNamesHasAlice.equals(findNamesHasAliceCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(findNamesHasAlice.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(findNamesHasAlice.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(findNamesHasAlice.equals(findNameHasBob));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommandTest.ModelStubWithTransaction modelStub \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FindTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Collections.emptyList(), modelStub.getFilteredTransactionList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_oneCustomerNameKeyword_oneTransactionFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Arrays.asList(\"Benson\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommandTest.ModelStubWithTransaction modelStub \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FindTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 1),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Arrays.asList(BENSON_BUY_ONE_BAG_MARCH_FIRST), modelStub.getFilteredTransactionList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_oneCustomerNameKeyword_threeTransactionFound() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Arrays.asList(\"Alice\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommandTest.ModelStubWithTransaction modelStub \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FindTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Arrays.asList("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ALICE_BUY_ONE_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ALICE_BUY_TWO_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ALICE_BUY_ONE_BAG_MARCH_SECOND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ), modelStub.getFilteredTransactionList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_oneDateTime_oneTransactionFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTime marchFirst \u003d new DateTimeBuilder(\"2020-03-01 10:00\").build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTimeEqualsPredicate predicate \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new DateTimeEqualsPredicate(marchFirst);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommandTest.ModelStubWithTransaction modelStub \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FindTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Arrays.asList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ALICE_BUY_ONE_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ALICE_BUY_TWO_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                BENSON_BUY_ONE_BAG_MARCH_FIRST"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ), modelStub.getFilteredTransactionList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteProduct(Product product) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setPerson(Customer target, Customer editedTransaction) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStubWithTransaction extends FindTransactionCommandTest.ModelStub {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final FilteredList\u003cTransaction\u003e filteredTransactionList \u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_ONE_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_TWO_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_ONE_BAG_MARCH_SECOND,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        BENSON_BUY_ONE_BAG_MARCH_FIRST"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            filteredTransactionList.setPredicate(predicate);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredTransactionList;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 322
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/transaction/ListTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_TWO_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BENSON_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ListTransactionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        model \u003d new ListTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        expectedModel \u003d new ListTransactionCommandTest.ModelStubWithTransaction();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ListTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ListTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Path getInventorySystemFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystemFilePath(Path inventorySystemFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addPerson(Customer customer) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addProduct(Product product) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public Product findProductById(UUID id) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setInventorySystem(ReadOnlyInventorySystem inventorySystem, String commandWord) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ReadOnlyInventorySystem getInventorySystem() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasPerson(Customer customer) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deletePerson(Customer target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteProduct(Product product) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setPerson(Customer target, Customer editedTransaction) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setProduct(Product target, Product editedProduct) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e filterTransaction(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredCustomerList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private class ModelStubWithTransaction extends ListTransactionCommandTest.ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final FilteredList\u003cTransaction\u003e filteredTransactionList \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.observableArrayList("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_ONE_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_TWO_BAG_MARCH_FIRST,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        ALICE_BUY_ONE_BAG_MARCH_SECOND,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        BENSON_BUY_ONE_BAG_MARCH_FIRST"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            filteredTransactionList.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredTransactionList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (!(obj instanceof ModelStubWithTransaction)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            ModelStubWithTransaction other \u003d (ModelStubWithTransaction) obj;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return filteredTransactionList.equals(other.filteredTransactionList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 250
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                                       String... expectedValues) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_oneArgument() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_multipleArguments() throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "junhaotan": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InventorySystemParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PRODUCT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.ABACUS_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ListCustomerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ListProductCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.LowLimitCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.product.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.product.ProductUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class InventorySystemParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystemParser parser \u003d new InventorySystemParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_addCustomer() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddCustomerCommand command \u003d (AddCustomerCommand) parser.parseCommand(CustomerUtil.getAddCommand(customer));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new AddCustomerCommand(customer), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_clearCustomer() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD) instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD + \" 3\") instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_deleteCustomer() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteCustomerCommand command \u003d (DeleteCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                DeleteCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new DeleteCustomerCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_editCustomer() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(customer).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand command \u003d (EditCustomerCommand) parser.parseCommand(EditCustomerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + CustomerUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // assertEquals(new EditCustomerCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_findCustomer() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindCustomerCommand command \u003d (FindCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                FindCustomerCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertEquals(new FindCustomerCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_listCustomer() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD) instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD + \" 3\") instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_addProduct() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Product product \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddProductCommand command \u003d (AddProductCommand) parser.parseCommand(ProductUtil.getAddCommand(product));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new AddProductCommand(product), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_clearProduct() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearProductCommand.COMMAND_WORD) instanceof ClearProductCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearProductCommand.COMMAND_WORD + \" 3\") instanceof ClearProductCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_deleteProduct() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        DeleteProductCommand command \u003d (DeleteProductCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                DeleteProductCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PRODUCT.getOneBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new DeleteProductCommand(INDEX_FIRST_PRODUCT), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_editProduct() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Product product \u003d new ProductBuilder(ABACUS_ID).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditProductCommand.EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder(product).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditProductCommand command \u003d (EditProductCommand) parser.parseCommand(EditProductCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + INDEX_SECOND_PRODUCT.getOneBased() + \" \" + ProductUtil.getEditProductDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertEquals(new EditProductCommand(INDEX_SECOND_PRODUCT, descriptor), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_findProduct() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        FindProductCommand command \u003d (FindProductCommand) parser.parseCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                FindProductCommand.COMMAND_WORD + \" p/\" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertEquals(new FindProductCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_listProduct() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListProductCommand.COMMAND_WORD) instanceof ListProductCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ListProductCommand.COMMAND_WORD + \" 3\") instanceof ListProductCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_lowLimit() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        LowLimitCommand command \u003d (LowLimitCommand) parser.parseCommand(LowLimitCommand.COMMAND_WORD + \" p/\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + INDEX_SECOND_PRODUCT.getOneBased() + \" \" + \" t/10\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(new LowLimitCommand(INDEX_SECOND_PRODUCT, new QuantityThreshold(10)), command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 57,
      "junhaotan": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 192,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/AddCustomerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class AddCustomerCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private AddCustomerCommandParser parser \u003d new AddCustomerCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parse_allCompulsoryFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // all compulsory fields without tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomerMultipleTags \u003d new CustomerBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomerMultipleTags));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parse_multipleSameFieldValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple names - shows error message"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple phones - shows error message"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple emails - shows error message"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple addresses - shows error message"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 97,
      "junhaotan": 39,
      "YingxuH": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/DeleteCustomerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * outside of the DeleteCustomerCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * same path through the DeleteCustomerCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class DeleteCustomerCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private DeleteCustomerCommandParser parser \u003d new DeleteCustomerCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCustomerCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                DeleteCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 24,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/EditCustomerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private EditCustomerCommandParser parser \u003d new EditCustomerCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_showsErrorMessage()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Customer} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parse_multipleRepeatedFields_showsErrorMessage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_showsErrorMessage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 162,
      "junhaotan": 31,
      "YingxuH": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/customer/FindCustomerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.FindCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class FindCustomerCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private FindCustomerCommandParser parser \u003d new FindCustomerCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"amy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_AMY, new FindCustomerCommand(predicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCustomerCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 23,
      "junhaotan": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/AddProductCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COSTPRICE_DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COSTPRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALES_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_BAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_WATCH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.WATCH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class AddProductCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private AddProductCommandParser parser \u003d new AddProductCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product expectedProduct \u003d new ProductBuilder(WATCH).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple descriptions - shows error message"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BAG + DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple prices - shows error message"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH + PRICE_DESC_BAG"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple quantities - shows error message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + QUANTITY_DESC_BAG + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // multiple sales - shows error message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + QUANTITY_DESC_WATCH + SALES_DESC_BAG + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Product expectedProduct \u003d new ProductBuilder(BAG).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BAG + COSTPRICE_DESC_BAG + PRICE_DESC_BAG"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        + QUANTITY_DESC_BAG, new AddProductCommand(expectedProduct));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_WATCH + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + VALID_PRICE_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + PRICE_DESC_WATCH + VALID_QUANTITY_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_WATCH"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + VALID_PRICE_WATCH + VALID_QUANTITY_WATCH + VALID_SALES_WATCH,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + COSTPRICE_DESC_WATCH + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + QUANTITY_DESC_WATCH + SALES_DESC_WATCH, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + QUANTITY_DESC_WATCH + SALES_DESC_WATCH, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + INVALID_QUANTITY_DESC + SALES_DESC_WATCH, Quantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // invalid sales"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + INVALID_SALES_DESC, Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + COSTPRICE_DESC_WATCH"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + INVALID_SALES_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_WATCH + COSTPRICE_DESC_WATCH"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                + PRICE_DESC_WATCH + QUANTITY_DESC_WATCH + SALES_DESC_WATCH,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 88,
      "junhaotan": 29,
      "YingxuH": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/DeleteProductCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * outside of the DeleteProductCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * same path through the DeleteProductCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DeleteProductCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private DeleteProductCommandParser parser \u003d new DeleteProductCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteProductCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DeleteProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 8,
      "-": 24,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/EditProductCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_BAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALES_DESC_WATCH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_BAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.EditProductDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditProductCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditProductCommandParser parser \u003d new EditProductCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_BAG, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS_FORMAT); // invalid quantity"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALES_DESC, Money.MESSAGE_CONSTRAINTS_FORMAT); // invalid sales"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC + QUANTITY_DESC_BAG, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRICE_DESC_WATCH + INVALID_PRICE_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        + INVALID_QUANTITY_DESC + VALID_SALES_BAG + VALID_PRICE_BAG,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_WATCH"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + QUANTITY_DESC_BAG + SALES_DESC_BAG + DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_BAG).withSales(VALID_SALES_BAG)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_WATCH + QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BAG).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BAG).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BAG;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_BAG).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_BAG;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withQuantity(VALID_QUANTITY_BAG).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SALES_DESC_BAG;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withSales(VALID_SALES_BAG).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void parse_multipleRepeatedFields_showsErrorMessage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BAG + SALES_DESC_BAG + QUANTITY_DESC_BAG"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_BAG + SALES_DESC_BAG + QUANTITY_DESC_BAG"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH + SALES_DESC_WATCH + QUANTITY_DESC_WATCH;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        EditProductDescriptor descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        EditProductCommand expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_WATCH + INVALID_PRICE_DESC + SALES_DESC_WATCH"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                + PRICE_DESC_WATCH;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptorBuilder().withPrice(VALID_PRICE_WATCH).withQuantity(VALID_QUANTITY_WATCH)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withSales(VALID_SALES_WATCH).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        expectedCommand \u003d new EditProductCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 157,
      "junhaotan": 14,
      "YingxuH": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/product/FindProductCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.FindProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class FindProductCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private FindProductCommandParser parser \u003d new FindProductCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                FindProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        FindProductCommand expectedFindProductCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new FindProductCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindProductCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindProductCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 24,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/transaction/AddTransactionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CUSTOMER_INDEX_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CUSTOMER_INDEX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONEY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRODUCT_INDEX_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONEY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRODUCT_INDEX_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactionFactories.ONE_ONE_MARCH_FIRST_TWENTY_ONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.TransactionFactoryBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddTransactionCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private AddTransactionCommandParser parser \u003d new AddTransactionCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory expectedTransactionFactory \u003d new TransactionFactoryBuilder(ONE_ONE_MARCH_FIRST_TWENTY_ONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withMoney(30).withQuantity(1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CUSTOMER_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        + PRODUCT_INDEX_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new AddTransactionCommand(expectedTransactionFactory));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_multiplePrefixPresent_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple customer index - shows error message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + CUSTOMER_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRODUCT_INDEX_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple product index - shows error message"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRODUCT_INDEX_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple date time - shows error message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple quantity - shows error message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple money - shows error message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // multiple description - shows error message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DESCRIPTION_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory expectedTransactionFactory \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new TransactionFactoryBuilder(ONE_ONE_MARCH_FIRST_TWENTY_ONE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        .withMoney(30).withQuantity(1).withDescription().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new AddTransactionCommand(expectedTransactionFactory));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTransactionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // missing customer index"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // missing product index"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // missing quantity index"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid customer index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, INVALID_CUSTOMER_INDEX_DESC + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid product index"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + INVALID_PRODUCT_INDEX_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + INVALID_DATETIME_DESC + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + INVALID_QUANTITY_DESC + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                TransactionQuantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid money"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + INVALID_MONEY_DESC + DESCRIPTION_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/transaction/EditTransactionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_SAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CUSTOMER_INDEX_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CUSTOMER_INDEX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONEY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRODUCT_INDEX_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONEY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRODUCT_INDEX_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_AMY_BAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY_BAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONEY_AMY_BAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY_BAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private EditTransactionCommandParser parser \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            new EditTransactionCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, CUSTOMER_INDEX_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // nothing specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"-5\" + CUSTOMER_INDEX_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"0\" + CUSTOMER_INDEX_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\" + CUSTOMER_INDEX_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\" + CUSTOMER_INDEX_DESC_AMY_BAG,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid customer index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CUSTOMER_INDEX_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid product index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRODUCT_INDEX_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                TransactionQuantity.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid money"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONEY_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CUSTOMER_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRODUCT_INDEX_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withCustomerIndex(Index.fromOneBased(1)).withProductIndex(Index.fromOneBased(1))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withDateTime(VALID_DATETIME_AMY_BAG).withQuantity(VALID_QUANTITY_AMY_BAG)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withMoney(VALID_MONEY_AMY_BAG).withDescription(VALID_DESCRIPTION_AMY_BAG).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionCommand expectedCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRODUCT_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + QUANTITY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withProductIndex(Index.fromOneBased(1)).withDateTime(VALID_DATETIME_AMY_BAG)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withQuantity(VALID_QUANTITY_AMY_BAG).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        EditTransactionCommand expectedCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CUSTOMER_INDEX_DESC_AMY_BAG"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + PRODUCT_INDEX_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + QUANTITY_DESC_AMY_BAG + MONEY_DESC_AMY_BAG + DESCRIPTION_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_MULTIPLE_SAME_PREFIX, EditTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/transaction/FindTransactionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CUSTOMER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CUSTOMER_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONEY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRODUCT_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONEY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRODUCT_DESCRIPTION_DESC_BAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_AMY_BAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONEY_AMY_BAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.FindTransactionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.CustomerContainsKeywordPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTimeEqualsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.JointTransactionPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.MoneyEqualsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.ProductContainsKeywordPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindTransactionCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private FindTransactionCommandParser parser \u003d new FindTransactionCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_emptyArg_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                FindTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid customer name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, INVALID_CUSTOMER_NAME_DESC,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid product description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, INVALID_PRODUCT_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid money"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, INVALID_MONEY_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                Money.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d NAME_DESC_AMY + DESCRIPTION_DESC_WATCH"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + DATETIME_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d CUSTOMER_NAME_DESC_AMY + PRODUCT_DESCRIPTION_DESC_BAG"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + DATETIME_DESC_AMY_BAG + MONEY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String[] customerKeywords \u003d VALID_NAME_AMY.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Arrays.asList(customerKeywords));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String[] productKeywords \u003d VALID_DESCRIPTION_BAG.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductContainsKeywordPredicate descriptionPredicate \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new ProductContainsKeywordPredicate(Arrays.asList(productKeywords));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTimeEqualsPredicate dateTimePredicate \u003d new DateTimeEqualsPredicate(new DateTime(VALID_DATETIME_AMY_BAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        MoneyEqualsPredicate moneyPredicate \u003d new MoneyEqualsPredicate(new Money(VALID_MONEY_AMY_BAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        JointTransactionPredicate jointPredicate \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new JointTransactionPredicate(Arrays.asList("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        namePredicate, descriptionPredicate, dateTimePredicate, moneyPredicate"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand expectedCommand \u003d new FindTransactionCommand(jointPredicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String userInput \u003d DATETIME_DESC_AMY_BAG + MONEY_DESC_AMY_BAG;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTimeEqualsPredicate dateTimePredicate \u003d new DateTimeEqualsPredicate(new DateTime(VALID_DATETIME_AMY_BAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        MoneyEqualsPredicate moneyPredicate \u003d new MoneyEqualsPredicate(new Money(VALID_MONEY_AMY_BAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        JointTransactionPredicate jointPredicate \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new JointTransactionPredicate(Arrays.asList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        dateTimePredicate, moneyPredicate"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        FindTransactionCommand expectedCommand \u003d new FindTransactionCommand(jointPredicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/transaction/UndoTransactionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.UndoTransactionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * outside of the DeleteTransactionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * same path through the DeleteTransactionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class UndoTransactionCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private UndoTransactionCommandParser parser \u003d new UndoTransactionCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_validArgs_returnsUndoCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Index targetIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UndoTransactionCommand(targetIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                UndoTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventorySystemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.ClearCustomerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.ClearProductCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class InventorySystemTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private final InventorySystem addressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem newData \u003d getTypicalInventorySystem();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.resetData(newData, ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        addressBook.resetData(newData, ClearProductCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // Two customers with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e newCustomers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newCustomers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                ClearCustomerCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * A stub ReadOnlyInventorySystem whose customers list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyInventorySystem {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        private final ObservableList\u003cCustomer\u003e customers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        private final ObservableList\u003cProduct\u003e products \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        AddressBookStub(Collection\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            this.customers.setAll(customers);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            return customers;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            return products;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 11,
      "-": 78,
      "junhaotan": 23,
      "YingxuH": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.InventorySystemBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(new InventorySystem(), new InventorySystem(modelManager.getInventorySystem()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventorySystemFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        modelManager.setInventorySystemFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(path, modelManager.getInventorySystemFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCustomerList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        InventorySystem addressBook \u003d new InventorySystemBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem differentAddressBook \u003d new InventorySystem();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        modelManager.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        modelManager.updateFilteredCustomerList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 5,
      "-": 119,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 34,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/CustomerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class CustomerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer customer \u003d new CustomerBuilder(ALICE_ID).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e customer.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different phone and email, same id -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different name, same id -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer aliceCopy \u003d new CustomerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different name, same id -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different phone, same id -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different email, same id -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different address -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 14,
      "-": 56,
      "junhaotan": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(Email.isValidEmail(\"aaaaaaaaabbbbbbbbbbcccccccccccddddddddeeeeeeeeeee@example.com\")); // long email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 2,
      "-": 58,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder(ALICE_ID).withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "junhaotan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/UniqueCustomerListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class UniqueCustomerListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private final UniqueCustomerList uniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertTrue(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInListExceptAddress_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertFalse(uniqueCustomerList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCustomerList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPersons((UniqueCustomerList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPersons(expectedUniqueCustomerList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setPersons((List\u003cCustomer\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e customerList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        uniqueCustomerList.setPersons(customerList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        List\u003cCustomer\u003e listWithDuplicateCustomers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCustomerList.setPersons(listWithDuplicateCustomers));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            -\u003e uniqueCustomerList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.ABACUS_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.testutil.product.ProductBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d new"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Abacus\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Abacus\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aBacus\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus Bob\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"10\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(predicate.test(new ProductBuilder(ABACUS_ID).withDescription(\"Abacus\").withPrice(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .withQuantity(\"10\").withMoney(\"10\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 80,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Black watch\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Very long description of black watch\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 36,
      "YingxuH": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/PriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null prices"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"1000000\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/ProductQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductQuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProductQuantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ProductQuantity(invalidQuantity));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProductQuantity.isValidFormat(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // invalid quantities"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ProductQuantity.isValidFormat(\"93121534\")); // exceed max value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        // valid quantities"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ProductQuantity.isValidFormat(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ProductQuantity.isValidFormat(\"1000000\")); // long prices"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same value -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity firstQuantity \u003d new ProductQuantity(10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity secondQuantity \u003d new ProductQuantity(10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(firstQuantity.equals(secondQuantity));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same object -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity quantity \u003d new ProductQuantity(10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(quantity.equals(quantity));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //compared with null -\u003e throws exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e quantity.compareTo(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different value -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        firstQuantity \u003d new ProductQuantity(11);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        secondQuantity \u003d new ProductQuantity(1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(firstQuantity.equals(secondQuantity));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void minus() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //minus null -\u003e throws null pointer exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity five \u003d new ProductQuantity(5);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e five.plus(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus self -\u003e return 0"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity zero \u003d new ProductQuantity(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(five.minus(five).equals(zero));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus number larger than self -\u003e throws exception"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity six \u003d new ProductQuantity(6);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e five.minus(six));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus number smaller than self -\u003e return normal result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity one \u003d new ProductQuantity(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(six.minus(five).equals(one));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void plus() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //plus null -\u003e throws exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity five \u003d new ProductQuantity(5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e five.plus(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus self -\u003e return self x 2"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity ten \u003d new ProductQuantity(10);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(five.plus(five).equals(ten));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self plus other number -\u003e returns quantity with value \u003d self + other"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity six \u003d new ProductQuantity(6);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductQuantity eleven \u003d new ProductQuantity(11);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(five.plus(six).equals(eleven));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 27,
      "YingxuH": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/CustomerContainsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.CustomerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class CustomerContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Alice\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Alice\", \"Bob\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                CustomerContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                CustomerContainsKeywordPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate firstPredicateCopy \u003d new"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                CustomerContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void test_customerContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //one keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicate \u003d new"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                CustomerContainsKeywordPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(predicate.test(ALICE_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //multiple keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicate \u003d new CustomerContainsKeywordPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withName(\"Alice Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withCustomer(editedAlice).build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //only one matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicate \u003d new CustomerContainsKeywordPredicate(Arrays.asList(\"Alice\", \"Andreas\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withCustomer(editedAlice).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //mixed case keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicate \u003d new CustomerContainsKeywordPredicate(Arrays.asList(\"aLicE\", \"bOb\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withCustomer(editedAlice).build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void test_customerContainsKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // no keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CustomerContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                new CustomerContainsKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(predicate.test(ALICE_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //no matching keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicate \u003d new CustomerContainsKeywordPredicate(Arrays.asList(\"random\", \"string\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(predicate.test(ALICE_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //keywords matching other attributes rather than customer name."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        predicate \u003d new CustomerContainsKeywordPredicate(Arrays.asList(\"1\", \"2020-03-01\", \"10:00\", \"20\", \"promotion\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withQuantity(1).withDateTime(\"2020-03-01 10:00\").withMoney(20).withDescription(\"promotion\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 3,
      "YingxuH": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalDateTimes.MARCH_FIRST_2020_10AM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalDateTimes.MARCH_FIRST_2020_5PM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalDateTimes.MARCH_SECOND_2020_5PM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_invalidDateTimeString_throwsArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //invalid format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //invalid month value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-13-02 10:00\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-00-02 10:00\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-20-02 10:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //invalid date value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2019-02-29 10:00\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-02-30 10:00\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-04-31 10:00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-03-32 10:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-03-00 10:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //invalid time value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-02-20 12:60\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-02-20 12:61\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-02-20 25:00\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(\"2020-02-20 30:00\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDateTime currentPlusOneHour \u003d currentDateTime.plusHours(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDateTime currentPlusOneDay \u003d currentDateTime.plusDays(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //null date time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //invalid date time string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // space only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"201\")); // invalid year format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12345\")); // invalid year format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2012\")); // year only"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-02-02\")); // missing time value"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-02-0210:00\")); // missing space"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-02-02 10\")); // missing minute value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"02-02-2020 10:00\")); // wrong date format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020/02/02 10:00\")); // wrong date format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(currentPlusOneHour.format(formatter))); // in future by one hour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(currentPlusOneDay.format(formatter))); // in future by one day"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //valid date time string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2020-02-20 10:00\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2020-02-28 20:00\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2020-03-15 23:59\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //one\u0027s day before another\u0027s day -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_FIRST_2020_5PM.isBefore(MARCH_SECOND_2020_5PM));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //one\u0027s hour before another\u0027s -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_FIRST_2020_10AM.isBefore(MARCH_FIRST_2020_5PM));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //compared with null -\u003e throw null pointer exception"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MARCH_FIRST_2020_5PM.isBefore(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //one\u0027s day after another\u0027s day -\u003e return true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_SECOND_2020_5PM.isAfter(MARCH_FIRST_2020_5PM));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //one\u0027s hour after another\u0027s hour -\u003e return true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_FIRST_2020_5PM.isAfter(MARCH_FIRST_2020_10AM));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //compared with null -\u003e throw null pointer exception"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MARCH_FIRST_2020_5PM.isAfter(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isOnSameDay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //two DateTime objects on the same day but different time -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_FIRST_2020_5PM.isOnSameDay(MARCH_FIRST_2020_10AM));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //two identical datetime objects -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(MARCH_FIRST_2020_5PM.isOnSameDay(MARCH_FIRST_2020_5PM));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //tested with null -\u003e throws null pointer exception"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MARCH_FIRST_2020_5PM.isOnSameDay(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.TransactionFactoryBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionFactoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void createTransaction() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null model -\u003e throws null pointer exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactory \u003d new TransactionFactoryBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e defaultFactory.createTransaction(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactory \u003d new TransactionFactoryBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryCopy \u003d new TransactionFactoryBuilder(defaultFactory).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(defaultFactory.equals(defaultFactoryCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(defaultFactory.equals(defaultFactory));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null \u003d\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different customer index -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithCustomerTwo \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withCustomerIndex(Index.fromOneBased(2)).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithCustomerTwo));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different product index -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithProductTwo \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withProductIndex(Index.fromOneBased(2)).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithProductTwo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithDiffDateTime \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withDateTime(\"2020-03-03 10:00\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithDiffDateTime));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithDiffQuantity \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withQuantity(2).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithDiffQuantity));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different money -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithDiffMoney \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withMoney(2).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithDiffMoney));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionFactory defaultFactoryWithDiffDescription \u003d new TransactionFactoryBuilder(defaultFactory)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withDescription(\"normal price\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(defaultFactory.equals(defaultFactoryWithDiffDescription));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionQuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionQuantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionQuantity(invalidQuantity));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isValidFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionQuantity.isValidFormat(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid quantities"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"0\")); // smaller than minimum value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidFormat(\"93121534\")); // exceed max value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // valid quantities"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidFormat(\"1\")); // minimal valid number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidFormat(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidFormat(\"1000000\")); // long prices"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isValidValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidValue(0)); // smaller than minimal"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidValue(1000001)); // exceed max value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(TransactionQuantity.isValidValue(2000001)); // exceed max value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidValue(1)); // minimal valid number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidValue(999999)); // maximal valid number"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidValue(10)); // two digits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(TransactionQuantity.isValidValue(143)); // three digits"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same value -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity firstQuantity \u003d new TransactionQuantity(10);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity secondQuantity \u003d new TransactionQuantity(10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(firstQuantity.equals(secondQuantity));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same object -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity quantity \u003d new TransactionQuantity(10);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(quantity.equals(quantity));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //compared with null -\u003e throws exception"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e quantity.compareTo(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different value -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        firstQuantity \u003d new TransactionQuantity(11);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        secondQuantity \u003d new TransactionQuantity(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(firstQuantity.equals(secondQuantity));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void minus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //minus null -\u003e throws null pointer exception"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity five \u003d new TransactionQuantity(5);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e five.plus(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus number larger than self -\u003e throws exception"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity six \u003d new TransactionQuantity(6);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e five.minus(six));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus number smaller than self -\u003e return normal result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity one \u003d new TransactionQuantity(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(six.minus(five).equals(one));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void plus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //plus null -\u003e throws exception"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity five \u003d new TransactionQuantity(5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e five.plus(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self minus self -\u003e return self x 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity ten \u003d new TransactionQuantity(10);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(five.plus(five).equals(ten));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //self plus other number -\u003e returns quantity with value \u003d self + other"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity six \u003d new TransactionQuantity(6);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TransactionQuantity eleven \u003d new TransactionQuantity(11);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(five.plus(six).equals(eleven));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BAG_MARCH_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_ONE_BOOK_MARCH_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.ALICE_BUY_TWO_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BENSON_BUY_ONE_ABACUS_MARCH_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BENSON_BUY_ONE_BAG_MARCH_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isSameTransaction() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same transaction -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(ALICE_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different quantity while same customer, product, and time -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(ALICE_BUY_TWO_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different customer and product, while same date -\u003e return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(BENSON_BUY_ONE_ABACUS_MARCH_FIRST));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same customer, product, and quantity, while different date -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(ALICE_BUY_ONE_BAG_MARCH_SECOND));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same customer, quantity, dateTime, while different product -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(ALICE_BUY_ONE_BOOK_MARCH_FIRST));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same customer, product, dateTime, and quantity, while different money -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction editedTransaction \u003d new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withMoney(100).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(editedTransaction));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different description while same other attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withDescription(\"new description\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.isSameTransaction(editedTransaction));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction aliceCopy \u003d new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(ALICE_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different customer -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(BENSON_BUY_ONE_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different product -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(ALICE_BUY_ONE_BOOK_MARCH_FIRST));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(ALICE_BUY_ONE_BAG_MARCH_SECOND));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different quantity -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(ALICE_BUY_TWO_BAG_MARCH_FIRST));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different money -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Transaction editedTransaction \u003d new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withMoney(100).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(editedTransaction));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //different description -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(ALICE_BUY_ONE_BAG_MARCH_FIRST)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .withDescription(\"new description\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(ALICE_BUY_ONE_BAG_MARCH_FIRST.equals(editedTransaction));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/MoneyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class MoneyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Money(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void constructor_invalidSales_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String invalidSales \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Money(invalidSales));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isValidSales() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null sales"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Money.isValidMoney(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid sales format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidMoney(\"93121534\")); // long sales"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // valid sales"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(Money.isValidMoney(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(Money.isValidMoney(\"1000000\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidAmount((93121534))); // long amount"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidAmount((10000000))); // long amount"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(Money.isValidAmount((1000001))); // long amount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(Money.isValidAmount((0))); // 0 amount"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(Money.isValidAmount((999999))); // almost exceeds limit."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCustomerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.storage.customer.JsonAdaptedCustomer.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.customer.JsonAdaptedCustomer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class JsonAdaptedCustomerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_ID \u003d \"a4365691-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(null, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedCustomer(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_ID, null, VALID_PHONE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedCustomer(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_ID, VALID_NAME, null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedCustomer(VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_ID, VALID_NAME,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedCustomer(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedCustomer person \u003d new JsonAdaptedCustomer(VALID_ID, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedCustomer person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                new JsonAdaptedCustomer(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                        VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 29,
      "-": 88,
      "junhaotan": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedProductTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.storage.product.JsonAdaptedProduct.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.storage.product.JsonAdaptedProduct;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonAdaptedProductTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String INVALID_COSTPRICE \u003d \"-12345\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String INVALID_SALES \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BAG.getDescription().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String VALID_COSTPRICE \u003d BAG.getCostPrice().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_PRICE \u003d BAG.getPrice().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_QUANTITY \u003d BAG.getQuantity().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final String VALID_SALES \u003d BAG.getMoney().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private static final String VALID_THRESHOLD \u003d BAG.getThreshold().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String VALID_ID \u003d BAG.getId().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_validProductDetails_returnsProduct() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        JsonAdaptedProduct bag \u003d new JsonAdaptedProduct(BAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(BAG, bag.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(null, VALID_COSTPRICE, VALID_PRICE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                VALID_QUANTITY, VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void toModelType_invalidCostPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, INVALID_COSTPRICE, VALID_PRICE, VALID_QUANTITY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                        VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d CostPrice.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, INVALID_PRICE, VALID_QUANTITY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                VALID_QUANTITY, VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, VALID_PRICE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        INVALID_QUANTITY, VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, VALID_PRICE, null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                VALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_invalidSales_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonAdaptedProduct product \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, VALID_PRICE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        VALID_QUANTITY, INVALID_SALES, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d Money.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public void toModelType_nullSales_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, VALID_PRICE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                VALID_QUANTITY, null, VALID_THRESHOLD, VALID_ID);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Money.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public void toModelType_nullThreshold_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        JsonAdaptedProduct product \u003d new JsonAdaptedProduct(VALID_DESCRIPTION, VALID_COSTPRICE, VALID_PRICE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "                VALID_QUANTITY, VALID_SALES, null, VALID_ID);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, QuantityThreshold.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, product::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 70,
      "junhaotan": 32,
      "YingxuH": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventorySystemStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonInventorySystemStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInventorySystemStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventorySystem\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new JsonInventorySystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                .readInventorySystem(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem original \u003d getTypicalInventorySystem();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage jsonAddressBookStorage \u003d new JsonInventorySystemStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        jsonAddressBookStorage.saveInventorySystem(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem readBack \u003d jsonAddressBookStorage.readInventorySystem(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        jsonAddressBookStorage.saveInventorySystem(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readInventorySystem(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        jsonAddressBookStorage.saveInventorySystem(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readInventorySystem().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private void saveAddressBook(ReadOnlyInventorySystem addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            new JsonInventorySystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                    .saveInventorySystem(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new InventorySystem(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 22,
      "-": 85,
      "junhaotan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventorySystemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.testutil.customer.TypicalCustomers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class JsonSerializableInventorySystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInventorySystemTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        InventorySystem typicalPersonsAddressBook \u003d TypicalCustomers.getTypicalInventorySystem();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonSerializableInventorySystem dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "                JsonSerializableInventorySystem.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventorySystem.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 12,
      "-": 34,
      "junhaotan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.getTypicalInventorySystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.ReadOnlyInventorySystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        JsonInventorySystemStorage addressBookStorage \u003d new JsonInventorySystemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * {@link JsonInventorySystemStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventorySystemStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem original \u003d getTypicalInventorySystem();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        storageManager.saveInventorySystem(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        ReadOnlyInventorySystem retrieved \u003d storageManager.readInventorySystem().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertEquals(original, new InventorySystem(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        assertNotNull(storageManager.getInventorySystemFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 10,
      "-": 57,
      "junhaotan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventorySystemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class to help with building InventorySystem objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " *     {@code InventorySystem ab \u003d new InventorySystemBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class InventorySystemBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private InventorySystem inventorySystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public InventorySystemBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        inventorySystem \u003d new InventorySystem();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public InventorySystemBuilder(InventorySystem inventorySystem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.inventorySystem \u003d inventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Adds a new {@code Customer} to the {@code InventorySystem} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public InventorySystemBuilder withPerson(Customer customer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        inventorySystem.addPerson(customer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public InventorySystem build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return inventorySystem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the middle index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the last index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the customer in the {@code model}\u0027s customer list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static Customer getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return model.getFilteredCustomerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "junhaotan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_FIRST_PRODUCT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_SECOND_PRODUCT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Index INDEX_THIRD_PRODUCT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_FIRST_TRANSACTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 3,
      "-": 12,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/customer/CustomerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class CustomerBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder(String id) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Initializes the CustomerBuilder with the data of {@code customerToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder(Customer customerToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        id \u003d customerToCopy.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        name \u003d customerToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        phone \u003d customerToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        email \u003d customerToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        address \u003d customerToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(customerToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code UUID} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withId(String id) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Name} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Customer} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Address} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Phone} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Email} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public CustomerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public Customer build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new Customer(id, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 13,
      "-": 65,
      "junhaotan": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/customer/CustomerUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.AddCustomerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class for Customer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class CustomerUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an add command string for adding the {@code customer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getAddCommand(Customer customer) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return AddCustomerCommand.COMMAND_WORD + \" \" + getPersonDetails(customer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the part of command string for the given {@code customer}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getPersonDetails(Customer customer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_NAME + customer.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_PHONE + customer.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_EMAIL + customer.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_ADDRESS + customer.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        customer.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the part of command string for the given {@code EditCustomerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCustomerDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 1,
      "-": 44,
      "junhaotan": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/customer/EditCustomerDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.testutil.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.customer.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class to help with building EditCustomerDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class EditCustomerDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private EditCustomerCommand.EditCustomerDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder(EditCustomerDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.descriptor \u003d new EditCustomerDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an {@code EditCustomerDescriptor} with fields containing {@code customer}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder(Customer customer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setId(customer.getId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setName(customer.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setPhone(customer.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setEmail(customer.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setAddress(customer.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setTags(customer.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code UUID} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withId(UUID id) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setId(id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Email} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Address} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCustomerDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditCustomerCommand.EditCustomerDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/customer/TypicalCustomers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class TypicalCustomers {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String ALICE_ID \u003d \"a4365691-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String BOB_ID \u003d \"a4365692-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String CARL_ID \u003d \"a4365693-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DANIEL_ID \u003d \"a4365694-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String ELLE_ID \u003d \"a4365695-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String FIONA_ID \u003d \"a4365696-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String GEORGE_ID \u003d \"a4365697-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String HOON_ID \u003d \"a4365698-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String IDA_ID \u003d \"a4365699-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String AMY_ID \u003d \"a4365680-ea10-47ad-b33b-fc038f1e5e81\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ALICE \u003d new CustomerBuilder(ALICE_ID).withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer BENSON \u003d new CustomerBuilder(BOB_ID).withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer CARL \u003d new CustomerBuilder(CARL_ID).withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer DANIEL \u003d new CustomerBuilder(DANIEL_ID).withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer ELLE \u003d new CustomerBuilder(ELLE_ID).withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer FIONA \u003d new CustomerBuilder(FIONA_ID).withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer GEORGE \u003d new CustomerBuilder(GEORGE_ID).withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer HOON \u003d new CustomerBuilder(HOON_ID).withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static final Customer IDA \u003d new CustomerBuilder(IDA_ID).withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Customer AMY \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new CustomerBuilder(AMY_ID).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Customer BOB \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            new CustomerBuilder(BOB_ID).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private TypicalCustomers() {} // prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code InventorySystem} with all the typical persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static InventorySystem getTypicalInventorySystem() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem ab \u003d new InventorySystem();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        for (Customer customer : getTypicalPersons()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            ab.addPerson(customer);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static List\u003cCustomer\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 18,
      "-": 52,
      "junhaotan": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/product/EditProductDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand.EditProductDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class to help with building EditProductDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class EditProductDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private EditProductDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder(EditProductDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.descriptor \u003d new EditProductDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code EditProductDescriptor} with fields containing {@code product}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder(Product product) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor \u003d new EditProductDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setId(product.getId());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setDescription(product.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setCostPrice(product.getCostPrice());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setPrice(product.getPrice());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setQuantity(product.getQuantity());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setSales(product.getMoney());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setThreshold(product.getThreshold());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code UUID} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withId(UUID id) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setId(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Description} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setDescription(new Description(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Price} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditProductDescriptorBuilder withCostPrice(String costPrice) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setCostPrice(new CostPrice(costPrice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code Price} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditProductDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public EditProductDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setQuantity(new ProductQuantity(quantity));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Sales} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditProductDescriptorBuilder withSales(String sales) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setSales(new Money(sales));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code QuantityThreshold} of the {@code EditProductDescriptor} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptorBuilder withThreshold(String threshold) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        descriptor.setThreshold(new QuantityThreshold(threshold));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public EditProductDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 83,
      "junhaotan": 13,
      "YingxuH": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/product/ProductBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.CostPrice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductQuantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.util.QuantityThreshold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class ProductBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Abacus\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_COSTPRICE \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"11\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_SALES \u003d \"10000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private CostPrice costPrice;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Money money;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    private QuantityThreshold threshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder(String id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        costPrice \u003d new CostPrice(DEFAULT_COSTPRICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d new ProductQuantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        money \u003d new Money(DEFAULT_SALES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        int calculatedThreshold \u003d Integer.parseInt(DEFAULT_QUANTITY) / 5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        threshold \u003d new QuantityThreshold(String.valueOf(calculatedThreshold));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Initializes the ProductBuilder with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder(Product productToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        id \u003d productToCopy.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        description \u003d productToCopy.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        costPrice \u003d productToCopy.getCostPrice();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        price \u003d productToCopy.getPrice();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        quantity \u003d productToCopy.getQuantity();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        money \u003d productToCopy.getMoney();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        threshold \u003d productToCopy.getThreshold();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code UUID} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withId(String id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.id \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Description} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets the {@code CostPrice} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ProductBuilder withCostPrice(String costPrice) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.costPrice \u003d new CostPrice(costPrice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Price} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d new ProductQuantity(quantity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Sets the {@code Money} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public ProductBuilder withMoney(String money) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        this.money \u003d new Money(money);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Sets te {@code QuantityThreshold} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public ProductBuilder withThreshold(String threshold) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        this.threshold \u003d new QuantityThreshold(threshold);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a product with the given attributes."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Product(id, description, costPrice,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                price, quantity, money, threshold, 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 89,
      "junhaotan": 23,
      "YingxuH": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/product/ProductUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "package seedu.address.testutil.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COSTPRICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.AddProductCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.logic.commands.product.EditProductCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " * A utility class for Product."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhaotan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "public class ProductUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns an add command string for adding the {@code product}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getAddCommand(Product product) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return AddProductCommand.COMMAND_WORD + \" \" + getProductDetails(product);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the part of command string for the given {@code product}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getProductDetails(Product product) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + product.getDescription().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_COSTPRICE + product.getCostPrice().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_PRICE + product.getPrice().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_QUANTITY + String.valueOf(product.getQuantity().getValue()) + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        sb.append(PREFIX_SALES + String.valueOf(product.getMoney().value) + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhaotan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     * Returns the part of command string for the given {@code EditProductDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static String getEditProductDescriptorDetails(EditProductCommand.EditProductDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.getDescription().ifPresent(description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.getCostPrice().ifPresent(costPrice"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            -\u003e sb.append(PREFIX_COSTPRICE).append(costPrice.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.getPrice().ifPresent(price -\u003e sb.append(PREFIX_PRICE).append(price.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.getQuantity().ifPresent(quantity"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            -\u003e sb.append(PREFIX_QUANTITY).append(quantity.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        descriptor.getMoney().ifPresent(sales -\u003e sb.append(PREFIX_SALES).append(sales.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/product/TypicalProducts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "package seedu.address.testutil.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COSTPRICE_BAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COSTPRICE_WATCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_WATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_WATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_BAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALES_WATCH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_THRESHOLD_BAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_THRESHOLD_WATCH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.InventorySystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class TypicalProducts {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String ABACUS_ID \u003d \"56d39090-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String BOOK_ID \u003d \"56d39091-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String CAMERA_ID \u003d \"56d39092-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DISC_ID \u003d \"56d39093-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String EGG_ID \u003d \"56d39094-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String FAN_ID \u003d \"56d39095-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String GAME_ID \u003d \"56d39096-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String HAT_ID \u003d \"56d39097-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String IPAD_ID \u003d \"56d39098-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String WATCH_ID \u003d \"56d39099-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String BAG_ID \u003d \"56d39100-b1b6-4642-9e13-dfa8eae19289\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product ABACUS \u003d new ProductBuilder(ABACUS_ID).withDescription(\"Abacus\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(\"12\").withQuantity(\"1\").withCostPrice(\"1\").withThreshold(\"1\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withMoney(\"100000\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product BOOK \u003d new ProductBuilder(BOOK_ID).withDescription(\"Beige Book\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(\"311\").withCostPrice(\"1\").withThreshold(\"1\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"2\").withMoney(\"98\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product CAMERA \u003d new ProductBuilder(CAMERA_ID).withDescription(\"Camera\").withPrice(\"93\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"2\").withMoney(\"123\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product DISC \u003d new ProductBuilder(DISC_ID).withDescription(\"Disc\").withPrice(\"83\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"3\").withMoney(\"154\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product EGG \u003d new ProductBuilder(EGG_ID).withDescription(\"Egg\").withPrice(\"94\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"5\").withMoney(\"543\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product FAN \u003d new ProductBuilder(FAN_ID).withDescription(\"Fan\").withPrice(\"94\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"4\").withMoney(\"678\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product GAME \u003d new ProductBuilder(GAME_ID).withDescription(\"Game\").withPrice(\"92\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"8\").withMoney(\"468\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product HAT \u003d new ProductBuilder(HAT_ID).withDescription(\"Hat\").withPrice(\"84\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"22\").withMoney(\"456\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product IPAD \u003d new ProductBuilder(IPAD_ID).withDescription(\"Ipad\").withPrice(\"81\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(\"37\").withMoney(\"854\").withThreshold(\"1\").withCostPrice(\"1\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product WATCH \u003d new ProductBuilder(WATCH_ID)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_WATCH)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withCostPrice(VALID_COSTPRICE_WATCH)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(VALID_PRICE_WATCH)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withQuantity(VALID_QUANTITY_WATCH)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withMoney(VALID_SALES_WATCH)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withThreshold(VALID_THRESHOLD_WATCH)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final Product BAG \u003d new ProductBuilder(BAG_ID)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BAG)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withCostPrice(VALID_COSTPRICE_BAG)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withPrice(VALID_PRICE_BAG)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BAG)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withMoney(VALID_SALES_BAG)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "            .withThreshold(VALID_THRESHOLD_BAG)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String KEYWORD_MATCHING_BEIGE \u003d \"Beige\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    private TypicalProducts() {} // prevents instantiation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Returns an {@code InventorySystem} with all the typical persons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "    public static InventorySystem getTypicalInventorySystem() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        InventorySystem ab \u003d new InventorySystem();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        for (Product product : getTypicalProducts()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "            ab.addProduct(product);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProducts() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ABACUS, BAG, BOOK, CAMERA, DISC, EGG, FAN, GAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 87,
      "junhaotan": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/DateTimeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " * A utility class to help with building DateTime objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "public class DateTimeBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2020-01-01 00:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2020-12-12 23:59\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_OTHER_START_DATE \u003d \"2020-02-02 00:01\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public static final String DEFAULT_OTHER_END_DATE \u003d \"2020-11-30 23:58\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DateTimeBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(DEFAULT_START_DATE, DateTime.DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     * Initializes the DateTimeBuilder with the data of {@code startEndDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTimeBuilder(String dateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTime.DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initializes the DateTimeBuilder with the data of {@code dateTimeToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DateTimeBuilder(DateTime dateTimeToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d dateTimeToCopy.value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    public DateTime build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aliciatxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aliciatxl": 23,
      "YingxuH": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/EditTransactionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the customer Index of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withCustomerIndex(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setCustomerIndex(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the product index of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withProductIndex(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setProductIndex(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setQuantity(new TransactionQuantity(quantity));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Money} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withMoney(String money) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setMoney(new Money(money));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/TransactionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Customer DEFAULT_CUSTOMER \u003d ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Product DEFAULT_PRODUCT \u003d BAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"2020-01-01 10:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int DEFAULT_MONEY \u003d 20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"under promotion\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Product product;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private UUID productId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private UUID customerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money money;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customer \u003d DEFAULT_CUSTOMER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        product \u003d DEFAULT_PRODUCT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerId \u003d DEFAULT_CUSTOMER.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productId \u003d DEFAULT_PRODUCT.getId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d new Money(DEFAULT_MONEY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d new TransactionQuantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customer \u003d transactionToCopy.getCustomer();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        product \u003d transactionToCopy.getProduct();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerId \u003d transactionToCopy.getCustomerId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productId \u003d transactionToCopy.getProductId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d transactionToCopy.getDateTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d transactionToCopy.getMoney();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d transactionToCopy.getQuantity();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Customer} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withCustomer(Customer customer) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customerId \u003d customer.getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Product} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withProduct(Product product) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productId \u003d product.getId();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Money} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withMoney(int money) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d new Money(money);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withQuantity(int quantity) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d new TransactionQuantity(quantity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a transaction with the given attributes."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Transaction build() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Transaction(customer, product, customerId, productId, dateTime,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                quantity, money, description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 1,
      "YingxuH": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/TransactionFactoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionQuantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.util.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class to help with building TransactionFactory objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TransactionFactoryBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index DEFAULT_CUSTOMER_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index DEFAULT_PRODUCT_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"2020-01-01 10:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int DEFAULT_MONEY \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"under promotion\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Index customerIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Index productIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money money;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerIndex \u003d DEFAULT_CUSTOMER_INDEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productIndex \u003d DEFAULT_PRODUCT_INDEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d new Money(DEFAULT_MONEY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d new TransactionQuantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initializes the TransactionFactoryBuilder with the data of {@code transactionFactoryToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder(TransactionFactory transactionFactoryToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        customerIndex \u003d transactionFactoryToCopy.getCustomerIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productIndex \u003d transactionFactoryToCopy.getProductIndex();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dateTime \u003d transactionFactoryToCopy.getDateTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        money \u003d transactionFactoryToCopy.getMoney();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        quantity \u003d transactionFactoryToCopy.getQuantity();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d transactionFactoryToCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code customerIndex} of the {@code TransactionFactory} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withCustomerIndex(Index customerIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code productIndex} of the {@code TransactionFactory} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withProductIndex(Index productIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.productIndex \u003d productIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code DateTime} of the {@code TransactionFactory} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Money} of the {@code TransactionFactory} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withMoney(int money) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.money \u003d new Money(money);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withQuantity(int quantity) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.quantity \u003d new TransactionQuantity(quantity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Description} of the {@code Transaction} to N/A."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactoryBuilder withDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d new Description(Description.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a transaction with the given attributes."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TransactionFactory build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TransactionFactory(customerIndex, productIndex, dateTime,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                quantity, money, description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/TypicalDateTimes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class containing a list of {@code DateTime} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TypicalDateTimes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTime MARCH_FIRST_2020_10AM \u003d new DateTimeBuilder(\"2020-03-01 10:00\").build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTime MARCH_FIRST_2020_5PM \u003d new DateTimeBuilder(\"2020-03-01 17:00\").build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTime MARCH_SECOND_2020_5PM \u003d new DateTimeBuilder(\"2020-03-02 17:00\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DateTime MARCH_THIRD_2020_10AM \u003d new DateTimeBuilder(\"2020-03-03 10:00\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/TypicalTransactionFactories.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.TransactionFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class containing a list of {@code TransactionFactory} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TypicalTransactionFactories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final TransactionFactory ONE_ONE_MARCH_FIRST_TWENTY_ONE \u003d new TransactionFactoryBuilder()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withCustomerIndex(Index.fromOneBased(1)).withProductIndex(Index.fromOneBased(1))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1).withDescription(\"under discount\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final TransactionFactory ONE_ONE_MARCH_FIRST_TWENTY_TWO \u003d new TransactionFactoryBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withCustomerIndex(Index.fromOneBased(1)).withProductIndex(Index.fromOneBased(1))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(2).withDescription(\"promotion\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final TransactionFactory ONE_TWO_MARCH_FIRST_TWENTY_ONE \u003d new TransactionFactoryBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withCustomerIndex(Index.fromOneBased(1)).withProductIndex(Index.fromOneBased(2))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1).withDescription(\"normal price\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/transaction/TypicalTransactions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhaotan"
        },
        "content": "import static seedu.address.testutil.customer.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.ABACUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.product.TypicalProducts.BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction ALICE_BUY_ONE_BAG_MARCH_FIRST \u003d new TransactionBuilder().withCustomer(ALICE)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(BAG).withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"promotion\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction ALICE_BUY_TWO_BAG_MARCH_FIRST \u003d new TransactionBuilder().withCustomer(ALICE)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(BAG).withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(2)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"promotion\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction ALICE_BUY_ONE_BOOK_MARCH_FIRST \u003d new TransactionBuilder().withCustomer(ALICE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(BOOK).withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"normal price\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction ALICE_BUY_ONE_BAG_MARCH_SECOND \u003d new TransactionBuilder().withCustomer(ALICE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(BAG).withDateTime(\"2020-03-02 10:00\").withMoney(20).withQuantity(1)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"promotion\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction BENSON_BUY_ONE_ABACUS_MARCH_FIRST \u003d new TransactionBuilder().withCustomer(BENSON)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(ABACUS).withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"normal price\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Transaction BENSON_BUY_ONE_BAG_MARCH_FIRST \u003d new TransactionBuilder().withCustomer(BENSON)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withProduct(BAG).withDateTime(\"2020-03-01 10:00\").withMoney(20).withQuantity(1)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withDescription(\"promotion\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhaotan": 2,
      "YingxuH": 31
    }
  }
]
