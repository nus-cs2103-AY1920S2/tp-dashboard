[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d Inventory Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103-W14-2/main[image:https://travis-ci.org/AY1920S2-CS2103-W14-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://ci.appveyor.com/project/CS2103-W14-2/main[image:https://ci.appveyor.com/api/projects/status/rlr0xji2vhij1016?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103-W14-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103-W14-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* This is a desktop Inventory Manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* It facilitates easily management of stocks, which includes:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    ** warning when supplies are"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    low"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    ** easy sourcing of suppliers for selected goods"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    ** expiry management"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    ** seamless updating of inventory upon procurement and sales transactions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* This application is optimized for fast-typists. If you are comfortable with the keyboard,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Inventory Manager will be a joy to use!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* This project is an extension of AddressBook-Level3 project codebase created by https://se-education.org[SE-EDU initiative]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 27,
      "PangJiaDa": 11
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    archiveName \u003d \u0027inventorymanager.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u0027site-name\u0027: \u0027InventoryManager\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W14-2/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 152
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Copyright by Iconfactory - https://iconfactory.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "- inventory_manager_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "-": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Nicholas Cristian Fernando"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image::nicholascf.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "{empty}[https://github.com/NicholasCF[github]] [\u003c\u003cnicholascf#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Responsibilities: Suppliers"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Pang Jia Da"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image::pangjiada.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "{empty}[https://github.com/PangJiaDa[github]] [\u003c\u003cpangjiada#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Responsibilities: Transactions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Fang Shao Hua"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image::fangshaohua94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "{empty}[https://github.com/FangShaoHua94[github]] [\u003c\u003cfangshaohua94#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Responsibilities: Inventory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Liu Chao"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image::liuchao93.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "{empty}[https://github.com/LiuChao93[github]] [\u003c\u003cliuchao93#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Responsibilities: Suppliers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "FangShaoHua94": 1,
      "-": 28,
      "PangJiaDa": 14,
      "LiuChao93": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103-W14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** `liu.chao5693@gmail.com`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** `nicholas.fernando@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** `e0203379@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** `pangjiada@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 5,
      "-": 5,
      "LiuChao93": 1
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d InventoryManager - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A project often depends on third-party libraries. For example, InventoryManager depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 41
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d InventoryManager v1.4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "By: `AY1920S2-CS2103-W14-2`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other (By Pang Jia Da)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete-s 1`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".Component interactions for `delete-s 1` command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::ArchitectureSequenceDiagram[]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::ArchitectureSequenceDiagram[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d UI component (by Fang Shao Hua)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `SupplierListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Logic component (by Fang Shao Hua)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".  `Logic` uses the `InventoryManagerParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a supplier)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ":numbered!:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d (By Pang Jia Da)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ":numbered:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "component for the `execute(\"buy 1 g/Apple q/50\")` API call."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ".Interactions Inside the Logic Component for the `buy 1 g/Apple q/50` Command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::buysequencediagram[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image::BuySequenceDiagram.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::buysequencediagram[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "NOTE: The lifeline for `BuyCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//tag::model[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Model component (by Nicholas Cristian Fernando)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* stores three sets of versioned data: `VersionedAddressBook`, `VersionedInventory` and `VersionedTransactionHistory`,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "which inherit features from their non-versioned counterparts"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* exposes three unmodifiable lists: `ObservableList\u003cSupplier\u003e`, `ObservableList\u003cGood\u003e` and `ObservableList\u003cTransaction\u003e`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "to be observed and displayed by the UI."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The `AddressBook` stores a list of `Supplier` objects, which each:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* stores details of a supplier: `Name`, `Phone`, `Address`, `Email` and `Offer`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* can have variable number of `Offer` objects, representing an offer to sell a specific good at a specific price."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* links to a `GoodName` and a `Price` via each of its `Offer` objects"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Structure of the AddressBook"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::SupplierModelClassDiagram.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The `Inventory` stores a list of `Good` objects, which each stores details of a good:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* its name `GoodName`,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* two quantities represented by two `GoodQuantity` objects, one indicating the current quantity and the other the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "minimum threshold quantity"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Structure of the Inventory"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::GoodModelClassDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The `TransactionHistory` stores a list of `Transaction` objects. Each `Transaction` stores common details of a transaction:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `TransactionId` for unique identification,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `GoodName` for the transaction good, and"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `GoodQuantity` for the transaction quantity."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A `Transaction` can be either `SellTransaction` or `BuyTransaction`:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `SellTransaction` has a `Price` to indicate the price at which the goods is sold."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `BuyTransaction` has a `Supplier` and a `Price` to indicate the supplier and the price the goods is bought at respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Structure of the TransactionHistory"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::TransactionModelClassDiagram.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//end::model[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Storage component (by Fang Shao Hua)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* can save 3 sets of data: `AddressBook`, `Inventory` and `TransactionHistory` in json format, save them in separate json file and read the data back."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Classes used by multiple components are in the `cs2103_w14_2.inventory.commons` package."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "This section describes some noteworthy details on how certain features"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "are implemented and pitfalls to avoid when making modifications."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::buyandsellcommand[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Buy and Sell Commands (By Pang Jia Da)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The `buy` and `sell` commands are the main ways a user is expected to"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "interact with the Inventory Manager, and encompasses the bulk of the commands a"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "user is going to enter into Inventory Manager."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Commonalities in Implementation of `buy` and `sell`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Both `buy` and `sell` commands are required to accomplish 3 things:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Update the quantity in the inventory, subject to their respective validity"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "checks."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Create a transaction record of itself to be added to the transaction history."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Commit the mutated model to facilitate proper functioning of `undo` and `redo`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "commands"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The API that `Model` exposes has been structured to mirror the requirements"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "of the commands. The above 3 requirements can be satisfied by calls to:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". `Model#setGood()`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". `Model#addTransaction()`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". `Model#commit()`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Specifics of `buy` Command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The two ways `buy` executes successfully depends on whether the good"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "already exists in the inventory or not."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* If the good does not already exist, then a new Good"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "entry has to be created with the quantity bought."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* If it does exist, then the"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "existing good entry has to be retrieved, and the quantity updated."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Developers modifying existing `Good` related information must be aware that"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Goods are immutable. In updating only the `quantity` field, all other fields"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "must be correctly duplicated to the updated `Good` entry created. Common mistakes"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "are to omit those fields, resulting in loss of persistent Good related"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "information. To make explicit this requirement to future Developers, multiple"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "constructors have been created with their respective purposes documented:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`Good()`, `Good.newGoodEntry()`, `Good.goodWithName()`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Buy Command Input Constraints"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The following constraints have been put on `buy` command inputs. Their reasons"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "are discussed in the following section. Users will not be allowed to:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Purchase from a supplier that is not in the supplier list"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Purchase a good that the supplier does not offer."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Purchase a quantity of good that would cause the total quantity of any"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "individual good in the inventory to exceed the `Good` limit."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The maximum `Good` limit is 999,999."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Developers seeking to modify the `buy` command must respect"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the above 3 input validations as they form the basis of future features."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The `buy` command format is: `buy SUPPLIER_DISPLAYED_INDEX g/GOODNAME q/QUANTITY`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The current implementation of `buy` performs validation of the above"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "respectively as follows:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The `SUPPLIER_DISPLAYED_INDEX` must be within the length of list of suppliers"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "returned by `Model#getFilteredSupplierList()`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Get the offers of the supplier through `Supplier#getOffers()`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Iterate through the `Set\u003cOffer\u003e` of the selected supplier to find"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "existence of an `Offer` with `GOODNAME`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Reuse the inbuilt quantity validation in the `Good` constructor to test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "if the resulting inventory quantity is valid. A `Good` with the new quantity"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "is constructed. If the quantity is invalid, an error is thrown and the"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "relevant feedback to the user returned."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Format of `buy` command"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 1 (current choice):** `buy SUPPLIER_DISPLAYED_INDEX g/GOODNAME"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                                       q/QUANTITY`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Users would not have to type out the entire Supplier\u0027s name in full and"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "case sensitive. This increases command input speed and further optimizes usage"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "for fast typists. Wasted time from typos in minimized."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Verification that a supplier exists in the supplier list is trivial. The"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "supplier at the given index only needs to be retrieved."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** We lose the flexibility of having input parameters being unordered."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "All inputs with a prefix flag, e.g. `g/`, can be input in any order, but now"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the ``SUPPLIER_DISPLAYED_INDEX`` has to be the first parameter."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Additional cognitive burden on users to remember the `buy` command format\u0027s"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "first parameter."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 2:** `buy n/SUPPLIER_NAME g/GOODNAME q/QUANTITY`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros: Flexibility of having unordered input is maintained."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons: Testing revealed that command entry was tedious and error prone,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "especially since supplier names tended to be long and a mix of upper- and lower-"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "case alphabets, reducing user-friendliness."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `buy` Input Constraints:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 1 (current choice):** Supplier has to exist in supplier list"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "before purchase."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Supports future data analytics commands. We can save all relevant"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "transaction information with every particular supplier at the point of"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "transaction because the supplier will have to exist in the supplier list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The feasible future features include: cost analysis and"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "ranking of suppliers by certain parameters."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Users do not have to enter an additional parameter: purchase price,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "since this can be extracted from the Supplier\u0027s offer under the hood."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons: If user has making a new purchase, he or she has to first perform data entry"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "for the supplier and all it\u0027s relevant information before the `buy` command"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "can be executed."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 2:** Supplier would be an optional parameter to the buy command."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros: Command usage is more fluid and user-friendly."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons: Cost and supplier related data would be incomplete, reducing"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "comprehensiveness of data analytics commands."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Specifics of `sell` Command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Sell Command Input Constraints"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The following constraints have been put on `sell` command inputs. Their reasons"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "are discussed in the following section. Users will not be allowed to:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Sell a good they do not currently have in inventory."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Sell a quantity a larger quantity of a good than they currently"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "have in inventory."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The minimum `Good` limit is 0."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Developers seeking to modify the `sell` command must respect"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the above 2 input validations as they form the basis of future features."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The `sell` command format is: `sell GOOD_DISPLAYED_INDEX p/PRICE q/QUANTITY`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The current implementation of `sell` performs validation as follows:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The `GOOD_DISPLAYED_INDEX` must be within the length of list of Goods"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "returned by `Model#getFilteredGoodList()`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Reuse the inbuilt quantity validation in the `Good` constructor to test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "if the resulting inventory quantity is valid. A `Good` with the new quantity"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "is constructed. If the quantity is invalid, an error is thrown and the"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "relevant feedback to the user returned."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Format of `sell` command"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 1 (current choice):** `sell GOOD_DISPLAYED_INDEX p/PRICE"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                                       q/QUANTITY`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Users would not have to type out the entire Good\u0027s name in full and"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "case sensitive. This increases command input speed and further optimizes usage"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "for fast typists. Wasted time from typos in minimized."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Verification that a good exists in the inventory is trivial. The"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "good at the given index only needs to be retrieved."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** We lose the flexibility of having input parameters being unordered."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "All inputs with a prefix flag, e.g. `g/`, can be input in any order, but now"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the ``GOOD_DISPLAYED_INDEX`` has to be the first parameter."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Additional cognitive burden on users to remember the `sell` command format\u0027s"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "first parameter."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 2:** `sell g/GOOD_NAME p/PRICE q/QUANTITY`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros: Flexibility of having unordered input is maintained."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons: Testing revealed that command entry was tedious and error prone,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "especially since Good names tended to be long and a mix of upper- and lower-"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "case alphabets, reducing user-friendliness."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::buyandsellcommand[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature (by Nicholas Cristian Fernando)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The undo/redo mechanism is facilitated by three versioned databases `VersionedInventory`, `VersionedAddressBook` and `VersionedTransactionHistory`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "for `Good`, `Supplier` and `Transaction` data respectively. These versioned classes extend their non-versioned"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "counterparts. These classes also implement the `Versionable` interface, which has these methods:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `Versionable#commit()` -- Adds the current state to the tracked states."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `Versionable#undo()` -- Restores the previous database state."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `Versionable#redo()` -- Restores the most recently undone database state."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "These operations are exposed in the `Model` interface, which extends `Versionable` as well."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Each call of these methods will call the respective methods of each of the versioned classes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The class diagram below shows how the classes are related to each other."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::VersionClassDiagram.png[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The three versioned classes use the same logic for versioning, so only `VersionedInventory` will be mentioned in"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "subsequent examples and diagrams."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The sequence diagram below illustrates the events that occur when a user calls the undo command assuming that there is"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "a state to return to. `VersionedAddressBook#undo()` and `VersionedTransactionHistory#undo()` are called as well, but"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "omitted for brevity."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Currently, `VersionedInventory` uses `LinearHistory` for versioning, and delegates all `Versionable` methods"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "to it. `LinearHistory` can store objects of `Inventory` class, which has implemented the `Copyable` interface to allow"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "creation of independent copies for storage. On the other hand, `LinearHistory` implements the interface"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "`Version`, which extends from `Versionable` and has the following additional method:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `Version#getCurrentState()` -- Returns the current state of the stored object"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The class diagram below shows how the classes are connected such that `VersionedInventory` is able to use"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "`LinearHistory`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::LinearHistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For simplicity, goods are each represented with strings containing their name and quantity."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedInventory` will be created with a list"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "of `Good` objects from storage, while creating a `LinearHistory` that stores a copy of this state,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "and also stores another copy in its history. Using `copy()` method from `Copyable` ensures"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "`currentState` and `saved0` are independent `Inventory` objects."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 2. The user executes `delete-g 3` command to delete the 3rd good in the inventory list. The `delete-g` command"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "first deletes the 3rd good in the `currentState` of the `LinearHistory`, exposed by `VersionedInventory`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Then, the command calls `Model#commit()` since it modifies the data. `LinearHistory` then"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "makes a copy of the modified `currentState` and stores it in the history, moving the statePointer up."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 3. The user executes `buy 1 g/apple q/5` to buy 5 apples from the first supplier. Let us assume that the first"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "supplier sells apples. The `buy` command also calls `Model#commit()` as it modifies the data,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "causing `LinearHistory` to save a copy of the modified `currentState`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "If a command fails its execution, it will not call `Model#commit()`, so the `currentState` will not be saved"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "into the history."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 4. The user now decides that buying the apples was a mistake, and decides to undo that action by executing the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "`undo` command. The `undo` command will call `Model#undo()`, which will shift the `statePointer` one step backward,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "pointing it to the previous saved state `saved1`, and updates `currentState` with `saved1`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "If the `currentStatePointer` is pointing to the first state `saved0`, then there is no state to return to."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "In this case, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redo()`, which shifts the `currentStatePointer` one step forward,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "pointing to the previously undone state, and restores the `currentState` to that state."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "If the `currentStatePointer` is pointing to the latest state, then there are no states to go to."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Thus, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 5. The user then decides to execute the command `list-t`. Commands that do not modify the data, such as `list-t`,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "will not call `Model#commit()`. Thus, the history and `currentState` in `LinearHistory` remains unchanged."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Step 6. The user executes `sell 2 q/1 p/5` to sell 1 of the second goods in the list, banana. This calls `Model#commit()`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Since there is a branching in history, all states after the state pointed by `statePointer` will be purged."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Many mainstream editing software exhibit this behaviour, which would condition the user to expect this"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "behavior."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The activity diagram below shows the conditions under which `Model#commit()` is called by a command, and its effects."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "As shown, only undoable commands that are successfully executed will call `Model#commit()` and purge the \"future\" states."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "This behavior in command execution guards against unwanted states being saved during invalid commands and confusing the"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "user. In addition, the guard against invalid execution at the start helps to keep the `currentState` free of changes"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "when the command will be invalid. Thus, the correctness of the `commit()` behavior is tied to the correct command"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "execution protocol."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::CommitActivityDiagram.png[width\u003d50%]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire state of the database."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Pros: Trivial implementation."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Cons: May encounter performance issues due to memory load, especially with three different databases."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete-s`, just save the supplier being deleted)."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When to save history"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **Alternative 1 (current choice) :** Save all three databases even when only one database is modified."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Cons: Inefficient memory usage, especially when only one database is being modified in each action."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **Alternative 2:** Save a database only when that database is modified."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Pros: Saves memory usage that could be used for performance."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Cons: Requires information on which databases are affected by a command, which breaks abstraction on both the"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "versioned databases and commands."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How storage of states is implemented"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **Alternative 1 (current choice) :** Store states as objects during Java runtime"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Pros: Simple implementation and automatic cleanup."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Cons: Segmentation fault may occur for very long sessions and large databases."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **Alternative 2:** Store states in an external file"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Pros: Less memory usage, leading to better performance."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Cons: File I/O may incur comparable overhead, and abrupt termination of the application may"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "result in temporary files being left behind and cluttering space."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Supplier Feature (By Liu Chao)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "InventoryManager allows users (store managers) to record the `suppliers` whom they buy goods from. Users could add and"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "store the information of `suppliers` such as company name, company address, registered phone number, official email"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "address and goods that company is selling."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "A `supplier` can be stored as a `supplier` object in the InventoryManager. The main components are 1) company name,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "2) company address, 3) registered phone number, 4) official email address and 5) good-price pairs of goods that company"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "is selling. Company name is used to identify the company since every company needs to have an unique name which is"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "registered legally with Accounting and Corporate Regulatory Authority. A Good-price pair of good is a combination of records"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "of a good’s name and a selling price. Good-price pairs are stored as an offer object in the InventoryManager. The following is a class diagram of Supplier feature."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".Class diagram of `Supplier` Feature, displaying only directly related classes"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "image::SupplierModelClassDiagram.jpg[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Supplier Feature"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Users could edit and update the information of registered supplier should there be any changes in InventoryManager by"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "using the EditSupplierCommand."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The edit supplier command format: `edit-s INDEX (must be a positive integer) [n/NAME] [c/PHONE] [e/EMAIL] [a/ADDRESS] [gp/GOOD_PRICE_PAIR]…`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The following sequence diagram shows how the information of existing suppliers (`supplierToEdit`) could be updated by the `EditSupplierCommand`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "`EditSupplierCommandParser` creates a `EditSupplierDescriptor` object to store all the information that needs to be updated to a supplier."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Then both `index` of the supplier that aims to be edited and the `EditSupplierDescriptor` object are passed to the `EditSupplierCommand` where"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "a new supplier object (`editedSupplier`) will be created by combining the information of the `supplierToEdit`, which has gotten by searching through the address book by using `index`,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "and the new information stored in the `EditSupplierDescriptor` object. The original supplier (`supplierToEdit`) is replaced by the newly created supplier object (`editedSupplier`) by using the `model.setSupplier`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".Sequence diagram of Edit Supplier Feature"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "image::SequentialDiagramEditSupplier.png[]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The sequence diagram is generated using PowerPoint. There may be some formatting issues and drawings may not be to scale."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The detailed activity diagram of editing a supplier is shown below."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".Activity Diagram of Edit Supplier Feature"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "image::ActivityDiagramEditSupplier.jpg[]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The activity diagram is generated using PowerPoint. There may be some formatting issues and drawings may not be to scale."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Users could involve any number of fields that is a positive number to edit the existing supplier. Fields include 1) company name,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "2) company address, 3) registered phone number, 4) official email address and 5) good-price pairs of goods that company is selling."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "If the good is not present in the existing supplier’s list, the good will be added into the supplier’s list as a new good price pair entry."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Otherwise, if the good is already present in the supplier’s list, then the good price pair of that good in the supplier’s list will be"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "edited and updated to the entered values. This feature is also used to add another good price pair for the supplier."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "We choose to allow users to edit any number of fields is to provide convenience for the users as the users could edit multiple"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "fields at once with flexibility. We choose to use this feature to add a new good price pair for the supplier is to prevent having"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "an additional command (e.g. include good price pair), which may confuse the users if there is too many commands involved in the"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "application. In addition, using this feature will prevent users from adding a new entry of the same good that is already"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "existed in the supplier’s list. Furthermore, we are using index to allocate suppliers (edit-s 1) instead of using company name"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "(edit-s NTUC) is to provide convenience for the users who could find it challenging to type full company name and could easily"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "allocate index of supplier from the supplier panel."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Good Price Pair from Supplier"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The delete-gp command is the main way a user could delete an entry or entries of good price pair(s) in a supplier’s list."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The user could delete multiple entries of good price pairs by using multiple good names in one command."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The delete good price pair command format: delete-gp INDEX (must be a positive integer) g/GOOD_NAME [g/MORE_GOOD_NAME]..."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The current implementation of delete good price pair command performs validation as follows:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". INDEX must be within the length of list of suppliers returned by Model#getFilteredSupplierList()."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Get the offers of the supplier through Supplier#getOffers(). Iterate through the Set\u003cOffer\u003e of the selected supplier to"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "find existence of an Offer with GOODNAME to be deleted."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Prefix of good name of good to be deleted is validated with GoodName class to check the validity of good name."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". If the user input contains good name. if users do not include good name, the command will throw exception that at least"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "one good name must be included."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d Commonalities in Implementation of delete-gp command"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The delete-gp command is required to accomplish 5 things:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Allocate the supplier that is targeted by using the index subject to validity check."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Find and allocate the good price pair(s) specific by the input good name(s)."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Delete the necessary good price pair(s) in the supplier’s list"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Inform users which goods are successfully deleted and which goods could not be found at the CommandResult."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Commit the mutated model to facilitate proper functioning of undo and redo commands"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Aspect: format of delete good price pair command"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Alternative 1 (current choice): delete-gp INDEX (must be a positive integer) g/GOOD_NAME [g/MORE_GOOD_NAME]..."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** It is able to check if the user includes good name in the command."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "***\tUser will not accidently delete a supplier entry by omitting good name like alternative 2."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "**\tCons"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Users need to remember another command"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Alternative 2 (modifying delete supplier’s command): delete-s INDEX (must be a positive integer) g/GOOD_NAME [g/MORE_GOOD_NAME]..."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "(This is such a way that if user does not include good price pair, the command will delete the supplier entry. If the"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "user includes the good price pair, the command will not delete the supplier’s entry but rather edits the good price pairs"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "in the supplier’s list like alternative 1.)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Users do not need to remember another command."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Cons"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Users could accidently delete a supplier entry by forgetting to input good name."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Aspect: Ability to delete multiple good price pairs at one command"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Alternative 1 (current choice): Users could delete multiple good price pairs by using one command"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Convenience for the Users"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Cons"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Harder to implement than alternative 2"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** More prone to errors and bugs."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Users may forget what the good price pairs are deleted and do not know what are the good price pairs that could not"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "be found if there is a large number of entries."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Alternative 2: Users could only delete one good price pair by using one command."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Easy to implement"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Less prone to errors and bugs"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** At every command, users could know which good price pair entry is successfully deleted and which good price pair could"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "not be found."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Cons"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "*** Inconvenience for the users."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The current implementation will give a summary of all good price pairs that are successfully deleted and all good price"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "pairs that could not be found to assist the users."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::autoexpiry[]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d [Proposed] Automatic Batch Expiry and Warning (By Pang Jia Da)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The primary aim of inventory management is to ensure that there is always"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "sufficient stock of goods. Out-of-stock situations"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "cost the company needless revenue losses."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "When stores sell fast moving consumer goods with short shelf lives,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "this problem becomes hard to solve when every individual batch of purchases"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "have their respective expiry dates."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "This feature aims to augment every `buy` command with it\u0027s respective"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`EXPIRY_DATE`. When the expiry date approaches, unsold goods from that batch"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "would automatically be removed from the inventory, the user would be notified"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "of the expiration and warned if that causes the good to fall below it\u0027s"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "stipulated threshold. The command to source for suppliers who sell that good can"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "also be triggered to facilitate restocking of that good."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Proposed Changes to `Good` class"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Inventory Manager v1.4 currently stores the name, current quantity, and"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "threshold quantity of every good in the inventory. An `expiryDates` field"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "will be added to store all distinct expiry dates, from closest to furthest, and"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the number of units expiring on that date. Java\u0027s built-in `Date` class"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "will suffice."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::goodclassenhancement[]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "image:GoodWithExpiryDate.png[]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::goodclassenhancement[]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Proposed Changes to `buy` Command"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The `buy` command will include an expiry date for every purchase"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "goods. A possible format would be: `buy SUPPLIER_DISPLAYED_INDEX q/QUANTITY"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "g/GOOD_NAME x/EXPIRY_DATE`. This assigns the `EXPIRY_DATE` to all `QUANTITY`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "units of `GOOD_NAME` bought."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The correct `Good` entry can be retrieved from the  `InventoryManager`."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "If there is currently no expiry dates on `EXPIRY_DATE`, a new `Map.entry`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "will be created indicating that `QUANTITY` many units will expire on"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`EXPIRY_DATE`. Else, the current `Map.entry` will be updated."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Proposed Changes to `sell` Command"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Under this implementation, the `sell` command must sell goods in a"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "First-In-First-Out (FIFO) manner. When any valid `sell` command is entered,"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the earliest expiry dates are removed first. This is accomplished by reducing"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the values that are mapped to the earliest expiry dates."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Expiry Detection"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Upon Inventory Manager Program startup, the `expiryDates` of all `Good` s in the"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "inventory is checked with the current System Date. When any expiry date is found"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "to be earlier than the System date, the mapped number of goods will expire"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "and be removed from inventory."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Possible Extensions"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Possible extensions of usefulness are listed below:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Make any expiry event generate it\u0027s respective transaction record in the"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "transaction history."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". If goods fall below their warning threshold as a result of expiry,"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "have a notification to the user and display the list of suppliers that"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "sell that particular good, sorted by increasing price."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure for `expiryDates`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 1 (current choice):** Use a `TreeMap\u003cDate, Integer\u003e`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros: Memory efficient."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** `TreeMap` navigation is more complex than a linear data structure."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Updating is more complex for `sell` commands, especially if goods with"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "multiple expiry dates are being sold."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **Alternative 2:** Maintain an ordered `LinkedList\u003cDate\u003e`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Pros: Simple to implement and update."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Buying `QUANTITY` of a good would correspond to inserting `QUANTITY` of"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`EXPIRY_DATE` into the list and sorting it."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Selling `QUANTITY` of a good would correspond to removing the first"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`QUANTITY` elements."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Finding all expired items can be done be traversing down the list until"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the first non-expired item is found. Everything traversed has expired."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Extremely memory inefficient, especially since each `Good` can contain"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "up to `999,999` quantity, and there will be 1 `Date` for each good stored."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::autoexpiry[]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// tag::findtransaction[]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Find transaction (By Fang Shao Hua)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Inventory Manager has a find transaction feature which allows the user to filter transactions, so that it"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "saves time for the user to look for specific transactions among the transaction history."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "User can provide 3 different types of filter, or combination of filters to filter the transaction list."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "These 3 types of filter are `TransactionType`, `Name` and `GoodName`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "To extract out these filter specifications, `ArgumentMultimap` is needed."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`TransactionType` will be stored in the `preamble`, `Name` will stored in the value under prefix `n/`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "and `GoodName` will be stored in the value under prefix `g/`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`FindTransactionCommandParser` will called `ArgumentMultimap` to parse the user input into respective values."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "These values will then set up filters in the `Predicate` for the model to filter the transaction list."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "If the user did not specify a particular type of filter, that particular type of filter will not be activated."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "The feature requires at least one filter to be able to functional."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "For the `Name` and `GoodName` filters, these filters can take in multiple `Name` and `GoodName` respectively."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "This means that there can be multiple `Name` keywords in the `Name` filter, and the transaction only need to match"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "any of the `Name` to pass the filter. Same goes for the `GoodName` filter."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "NOTE: The transaction has to fulfill all active filters to be added into the filtered list."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Here is a sample activity diagram that shows the general flow:"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::FindTransactionActivityDiagram.png[]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "This feature mainly involves within `Logic`, but also require interaction with `Model` to update the filter list."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Here is a sample activity diagram that shows the flow when user inputs: `find-t buy n/alice g/apple`:"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::FindTransactionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Multiple filters"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* **Alternative 1 (current choice):** Enables multiple filters to filter the transaction list"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Pros: Enable easier and flexible search."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Cons: More complex to implement, need to take care of multiple cases."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* **Alternative 2:** Decompose search function into multiple functions, each consist of single filter"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Pros: Easier to implement, less complexity"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Cons: More code need to be written, and the code will have high degree of duplication. Less flexible search."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// end::findtransaction[]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// tag::setthreshold[]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Set threshold for good (By Fang Shao Hua)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Inventory Manager has a set threshold feature which allows the user to set the threshold quantity for `goods` in `Inventory`,"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "so that it can alert the user when a particular good fall below its threshold quantity."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "The alert mechanism is to resort the goods in the inventory such that those fall below their their threshold will be display first,"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "and their current quantity will be display with red background."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Every command that changes the quantity of good or set new threshold for the good in the inventory will trigger a check and update the filtered list accordingly."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "NOTE: By default, any newly added good in the inventory will be set with threshold quantity of zero."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Here is a sample activity diagram that shows the flow when user inputs: `warn 5 q/100`:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::SetThresholdSequenceDiagram.png[]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::SetThresholdSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// end::setthreshold[]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* has a need to manage a large number of \u003c\u003cfast-moving-consumer-goods, fast-moving consumer goods (FMCG)\u003e\u003e which arrives in batches"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* has a need to manage a large number of suppliers"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* has a need to draw insights from analysing transactions with suppliers and customers"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Value proposition*: manage an FMCG store faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use InventoryManager"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |add a new supplier |"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|`* * *` |user |add a new goods to supplier|"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |delete a supplier |remove entries that I no longer need"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |see goods that are low in stock |know what to buy"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |see goods that are low in stock |buy more before running out"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |update inventory with the \u003c\u003ctransaction-record, transaction records\u003e\u003e |avoid keeping track of the inventory personally"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |update prices of goods offered by suppliers |account for changes in supply agreement or prices"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |clumsy user |undo previous actions |fix mistakes in inputs or spelling"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |be notified of goods falling below a set quantity threshold |buy expected goods in advance"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* * *` |user |be notified of goods that are above a set quantity threshold |avoid expiration of large number of goods"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|`* *` |user |create a set purchase order automatically on a regular basis |simulate supply contracts"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|`* *` |user |find a supplier by goods sold |locate the relevant suppliers without having to go through the entire list"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|`* *` |user |find a goods by name |locate the relevant goods without having to go through the entire list"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* *` |user |hide transaction details by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* *` |user |set expiry event for a batch of goods |account for expiration of goods"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* *` |user |change names of goods |avoid confusion when producers change the name of their products"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* *` |user |have a summary of the transactions throughout the day |determine performance of the day"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`* *` |expanding user |see a performance tracker |find points of improvement in business activity"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|`*` |clumsy user |receive suggestion for the next words |avoid misspelling and be reminded of syntax"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(For all use cases below, the *System* is the `InventoryManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":numbered!:"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC1 - listing all suppliers"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User requests to list suppliers."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager shows a list of suppliers."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows a message to inform that there are no suppliers."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC2 - listing all goods"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User requests to list goods."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager shows a list of goods."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows a message to inform that there are no goods."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC3 - adding a supplier"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User requests to add a supplier with given details."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager creates a supplier with the given details."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The given details of the supplier is incomplete."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 1a1. Inventory Manager shows an error message to indicate the incomplete details."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1b. The given details of the supplier is invalid."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 1b1. Inventory Manager shows an error message to indicate the invalid details."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1c. The given details contains a non-supported parameter e.g. age."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 1c1. Inventory Manager shows an error message to indicate the non-supported parameter."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1d. The specified supplier already exists."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 1d1. Inventory Manager shows an error message to indicate that the supplier already exists."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC4 - deleting a supplier"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User [.underline]#lists all suppliers (UC1).#"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  User selects a supplier from the list and requests to delete the supplier by the index shown on the list."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager deletes the supplier."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows an error message to indicate the invalid index."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Use case: UC5 - deleting a good from supplier\u0027s list"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "1.  User lists all suppliers (UC1)."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "2.  User requests to delete a good from a supplier\u0027s list and give the good\u0027s name."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager confirms the deletion."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "4.  InventoryManager deletes the good from the supplier\u0027s good list."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "1.  The required good is not found."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** InventoryManager informs there is no such good found."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC6 - editing a supplier"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "1.  User lists all suppliers (UC1)"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "2.  User requests to edit a supplier specified by the index and gives the new parameters"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager updates the details of the supplier."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "1.  There is existing good in the list."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** The latest information of good will be updated."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "2.  The given index is invalid."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** InventoryManager shows an error message to indicate the invalid index."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "3.  The given details of the supplier is incomplete."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Inventory Manager shows an error message to indicate the incomplete details."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "4.  The given details of the supplier is invalid."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Inventory Manager shows an error message to indicate the invalid details."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "5.  The given details contains a non-supported parameter e.g. age."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Inventory Manager shows an error message to indicate the non-supported parameter."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "6.  The good is not found in the existing supplier\u0027s good list."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Inventory Manager will include the good as a new good in the supplier\u0027s good list."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC7 - finding a supplier for a particular goods"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User [.underline]#lists all goods (UC2).#"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  User requests to list the suppliers supplying the goods with a specified name."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager shows a list of suppliers providing this goods."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The goods with the given name does not exist."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows an error message to indicate the goods does not exist."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 3a1. InventoryManager informs the user that there are no suppliers providing this goods."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC8 - buying a particular goods"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User [.underline]#lists all the suppliers for a particular good (UC7).#"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  User requests to make a buy order for a quantity of the particular goods from a supplier."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager adds the order and adds the quantity to the total number of that particular goods."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The goods with the given name does not exist."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows an error message to indicate the goods does not exist."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2b. The supplier with the given name does not exist."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2b1. InventoryManager shows an error message to indicate the supplier does not exist."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2c. The quantity given is invalid."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2c1. InventoryManager shows an error message to indicate the quantity is invalid."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2d. One or more parameters are missing."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2d1. InventoryManager shows an error message to indicate the missing parameters."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Use case: UC9 - selling a particular goods"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User [.underline]#lists all goods (UC2).#"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  User requests to make a selling order of a quantity of a particular goods."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager adds the sell order and deducts the quantity in the selling order to the total number of the particular goods."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The goods with the given name does not exist."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows an error message to indicate the goods does not exist."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2b. The quantity given is invalid."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2b1. InventoryManager shows an error message to indicate the quantity is invalid."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2c. The quantity given exceeds current amount in inventory."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2c1. InventoryManager shows an error message to indicate insufficient quantity."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2d. One or more parameters are missing."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2d1. InventoryManager shows an error message to indicate the missing parameters."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - set lower threshold quantity of goods"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User [.underline]#lists all goods (UC2).#"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  User sets a lower quantity threshold for a particular goods."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The quantity is invalid."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager shows an error message to indicate the quantity is invalid."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2b. The quantity is above the upper threshold, if it exists."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2b1. InventoryManager shows an error message to indicate the quantity is above the upper threshold."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* 2c. The given index is out of bounds."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** 2c1. InventoryManager shows an error message to indicate the index is out of bounds."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Use case: UC11 - listing all past transactions"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User requests to list all past transactions."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager lists all past transactions."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager informs the user that there are no past transactions."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Use case: UC12 - search transactions with specific criteria"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "1.  User requests to find transactions with the specific criteria."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "2.  InventoryManager lists all transactions fulfill the specific criteria."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** 2a1. InventoryManager informs the user that there are no transactions."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* 2b. Any of the criteria is in invalid format"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** 2b1. InventoryManager informs the user that the criteria input is invalid."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "// tag::undoredousecase[]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Use case: UC13 - undoing a command"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User enters the undo command through the command line."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager moves to the state before the latest modifying command e.g. add supplier."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager shows a message indicating success."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. InventoryManager is at the oldest recorded state and thus is unable to move to a previous state."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager informs the user that it is unable to undo from the oldest recorded state."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Use case: UC14 - redoing a command"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "1.  User enters the redo command through the command line."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "2.  InventoryManager moves to the state before the latest undo command."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "3.  InventoryManager shows a message indicating success."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* 2a. InventoryManager is unable to move to the next state as it is already at the latest state."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 2a1. InventoryManager informs the user that it is unable to redo from the latest state."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "+"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "// end::undoredousecase[]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":numbered:"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should be able to hold up to 1000 suppliers and goods without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should run without any internet connection."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should have a human-editable storage text file."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should not require a database."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should not require an installer to use."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Should not exceed 100MB in application size."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[[fast-moving-consumer-goods]] Fast-moving consumer goods::"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Goods that are characterised by large inventory quantities, high turnover rate, numerous suppliers and short shelf-life."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[[transaction-record]] Transaction record::"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A record of an event that results in change in the quantity of goods i.e. buying/selling."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum. Mac OS users may need to"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   give permission to open JAR files initially."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Deleting a supplier"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Deleting a supplier while all suppliers are listed"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ".. Prerequisites: List all suppliers using the `list` command. Multiple suppliers in the list."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "   Expected: No supplier is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Undo and Redo"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ". Undo at initial state"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Prerequisites: The application is newly opened i.e. no undoable commands has been done"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: `undo` +"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   Expected: An error is shown, indicating that undo cannot be done from initial state."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: Add a valid supplier followed by `undo` +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   Expected: The supplier is removed"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: `list-t` followed by `undo` +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   Expected: An error is shown, indicating that undo cannot be done from initial state."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   This is because `list-t` is not an undoable command"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ". Redo from latest state"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Prerequisites: One undoable command e.g. `add-s` has been successfully executed as the latest command"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: `redo` +"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   An error is shown, indicating that redo cannot be done from latest state."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: `undo` followed by `redo` +"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   The changes done by the latest undoable command is removed, then reinstated."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ". Overwriting history"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".. Test case: Add a valid supplier, `undo`, add a different valid supplier, and finally `redo` +"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   An error is shown, indicating that redo cannot be done from latest state."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Buying goods"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Prerequisites:"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ".. A supplier at displayed index 1 in the supplier list that sells a good named Rice."
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ".. There should either not be any Rice in the inventory or have an amount that"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "will be strictly less than 1 million after buying."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Test case: `buy 1 g/Rice q/10` +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Expected: The quantity of Rice in the inventory should increase by 10. If Rice"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "was not previously present, a new entry would be created."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Selling goods"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Prerequisites:"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ".. Have a good named Rice in the inventory with at least 10 quantity."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ".. Rice should be at displayed index 1 in the inventory."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". Test case: `sell 1 q/3 p/3` +"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Expected: The quantity of rice in the inventory should decrease by 3."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Set threshold quantity for good"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Prerequisites: One buy command to add good into the inventory. Buy quantity set as 100."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `warn 1 q/10000` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: First good will be under alert with red colour background, as the quantity is lower than the threshold quantity."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `warn 1 q/99` +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: No effect is shown, as the current quantity of good is greater than the threshold quantity."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `warn 1 q/99` followed by sell command to sell quantity of 10 +"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: First good will be under alert with red colour background, as the quantity is lower than the threshold quantity after selling."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `warn` +"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: An error is shown, indicating that the format of the command is wrong."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Other incorrect warn commands to try: `warn abc`, `warn x q/abc` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Find transaction"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Prerequisites: List transaction command."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `find-t buy` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: All buy transaction will be listed."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `find-t buy n/Alice` +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: All buy transaction with Alice being the supplier will be listed."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `find-t buy n/Alice g/apple` +"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: All buy transaction with Alice being the supplier and the good bought being apple will be listed."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Test case: `find-t abc` +"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: An error is shown, indicating that the format of the command is wrong."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".. Other incorrect warn commands to try: `find-t`, `find-t x` (where x is not \"buy\" or \"sell\") +"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Difficulty Level*: 10"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Challenges*:"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** This is an application with three different databases. In addition to having to"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   define operations for three different objects, many of the commands exhibit much interlinking between the components."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   There is a need to take extra care to ensure that the interactions are clearly defined and avoid side effects."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Many features are dependent on other features being developed compared to AB3, which makes it hard to concurrently arrange the interactions."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   An API needed to be clearly defined before the start of the sprint in order to allow team members to start working immediately."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** There are many commands that needs to be tracked, which necessitates consideration whether it would affect the"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   implementation of other commands."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** There is significant amount of code duplication due to having three database classes. Refactoring is needed to make"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "   the code easier to read."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Achievements*:"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Refactored some of the Model classes to allow custom extension by future developers and reduce code duplication."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Implemented a search feature that navigates between two different databases."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** 79% code coverage as measured by Coveralls, an increase from the original 75%."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 593,
      "FangShaoHua94": 128,
      "-": 314,
      "PangJiaDa": 307,
      "LiuChao93": 150
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d InventoryManager - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "-": 112
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d InventoryManager - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, InventoryManager\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 71
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d InventoryManager - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d InventoryManager  - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "By: `AY1920S2-CS2103-W14-2`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "InventoryManager is for those who *prefer to use a desktop app for managing their inventory*. More importantly, InventoryManager is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, InventoryManager can get your inventory management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Download the latest `inventorymanager.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your InventoryManager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds. For Mac OS users, permission may need to be granted to the file before usage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".GUI of Inventory Manager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *`list-s`* : lists all suppliers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* **`add`**`n/John Doe c/98765432 e/johnd@example.com a/John street, block 123, #01-01 gp/apple 4.50` : adds a supplier named `John Doe` selling apples at 4.50 each to the InventoryManager."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* **`delete-s 3`** : deletes the 3rd supplier shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [gp/GOOD PRICE]` can be used as `n/John Doe gp/apple 4.50` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[gp/GOOD PRICE]...` can be used as `{nbsp}` (i.e. 0 times), `gp/apple 4.50`, `gp/orange 2.00 gp/pear 5.00` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME c/CONTACT_NUMBER`, `c/CONTACT_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* For parameters where only one value is expected, only the last specified value will be taken e.g. `c/12345 c/54321` will use only `c/54321`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* All dates follow the format `yyyy-MM-dd`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "To view the command usage or the command format of this application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "An url link will be shown that linked to this page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `help` command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/help.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Listing all suppliers : `list-s` (By Liu Chao)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Shows a list of all suppliers in the inventory manager. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Format: `list-s`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Clearing all supplier entries : `clear-s` (By Liu Chao)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Clears all supplier entries from the address book. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Format: `clear-s`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Adding a supplier: `add-s` (By Liu Chao)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Adds a supplier to the inventory manager +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Format: `add-s n/NAME c/CONTACT_NUMBER e/EMAIL a/ADDRESS [gp/GOOD PRICE]...`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* A supplier can have any number of good-price pairs (including 0)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Must include name, phone number, email, address."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Repeated supplier will cause exception."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `add-s n/NTUC Fairprice Macpherson Mall c/63521728 e/MacphersonMall@NTUC Fairprice.com a/401, #02-22 MacPherson Rd, Macpherson Mall, 368125 gp/banana 5 gp/tissue paper 0.55`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Editing a supplier : `edit-s` (By Liu Chao)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Edits an existing supplier in the inventory manager. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Format: `edit-s INDEX [n/NAME] [c/CONTACT_NUMBER] [e/EMAIL] [a/ADDRESS] [gp/GOOD PRICE]...`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* Edits the supplier at the specified `INDEX`. The index refers to the index number shown in the displayed supplier list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* If the entered good-price pair is not in the existing supplier\u0027s list, the entered good price pair will be stored in the supplier\u0027s list as a new good price pair."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "You can add any number of good-price pairs to the existing suppliers at one time."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `edit-s 1 c/91234567 e/ColdStorageAtOrchard@example.com` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Edits the contact number and email address of the 1st supplier to be `91234567` and `ColdStorageAtOrchard@example.com` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `edit-s 2 gp/apple 5 gp/banana 10` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The existing second supplier only has `apple` priced at `1` dollar. Hence, this command will edit the price of `apple` to `5` dollar and add the good price pair of `banana` into the supplier\u0027s good list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Locating suppliers by name: `find-s` (By Liu Chao)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Finds suppliers whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Format: `find-s KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The search is case insensitive. e.g `ColdStorage` will match `coldstorage`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The order of the keywords does not matter. e.g. `NTUC Fairprice` will match `Fairprice NTUC`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Only full words will be matched e.g. `ColdStorage` will not match `ColdStorages`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Suppliers matching at least one keyword will be returned (i.e. `OR` search). e.g. `Fairprice NTUC` will return `Macpherson NTUC`, `Fairprice Value Store`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* You can find multiple suppliers by input multiple keywords."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* You could use keywords instead of full names."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `find-s NTUC ColdStorage` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Returns `NTUC Fairprice` and `ColdStorage Orchard`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Source supplier(s) for good(s): `source` (By Liu Chao)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Source suppliers who sell goods with good names containing any of the given keywords. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Format: `Source GOOD_NAME [MORE_GOOD_NAME]...`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "****"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The search is case insensitive. e.g `apple` will match `APPLE`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The keywords are referring to goods\u0027 names"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* At least one good name must be included"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The order of the keywords does not matter. e.g. `Fuji Apple` will match `Apple Fuji`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Only the good\u0027s name is searched."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Only full words will be matched e.g. `apple` will not match `appl`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* Suppliers who sell goods with goods\u0027 names matching at least one keyword will be returned (i.e. `OR` search). e.g. `mango pie` will return suppliers selling `mango yogurt` and suppliers selling `apple pie`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* You can find multiple suppliers by input multiple goods\u0027 names."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* You could use keywords instead of full goods\u0027 names."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* You could source for suppliers selling different goods by using different keywords at one time."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `source banana apple` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Returns `Cavendish banana` and `Fuji apple`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Deleting a supplier : `delete-s` (By Liu Chao)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Deletes the specified supplier from the address book. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Format: `delete-s INDEX`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The command will delete the supplier at the specified `INDEX`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* The index refers to the index number shown in the displayed supplier list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* `list-s` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "`delete-s 2` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Deletes the 2nd supplier in the inventory manager."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `find-s NTUC` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "`delete-s 1` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Deletes the 1st supplier with name containing `NTUC` in the inventory manager aftr filtering with the keyword `NTUC`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d\u003d Deleting an entry or entries of good-price pair(s) in the supplier\u0027s list: `delete-gp` (By Liu Chao)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Deletes the specified good price pair(s) from supplier\u0027s list of good price pairs. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Format: `delete-gp INDEX (must be a positive integer) g/GOOD_NAME [g/MORE_GOOD_NAME]...`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The command will delete the good price pair(s) of supplier\u0027s list of good price pairs at the specified `INDEX`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The index refers to the index number shown in the displayed supplier list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* You must enter the full names of the goods which are case sensitive"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* You could delete one or more price good pairs from the supplier’s list by input one or more good’s names"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* You must include at least one good name."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "****"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The command will display all good price pairs that could not be found or are successfully deleted at the end of command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* `delete-gp 1 g/apple g/orange (to delete two different goods)` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Deletes the good price pairs of apple and orange in the 1st supplier\u0027s list of good price pairs."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::buycommand[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Buying goods from supplier: `buy` (By Pang Jia Da)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Buys a batch of goods from a supplier in the contact list who stocks that product. The inventory manager cannot buy products in the following cases:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The supplier has not been entered in the supplier list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The supplier has not been registered to the good, as indicated by the \"offers\" section of each supplier"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Format: `buy SUPPLIER_DISPLAY_INDEX g/GOOD_NAME q/QUANTITY`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* `buy 1 g/Apple q/4` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Buys 4 apples from supplier at displayed index 1 in the supplier list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "If the good does not exist in the inventory, a new entry for that good will be created."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The maximum quantity of any good in the inventory is 999,999. Users are not allowed to buy quantities of goods that would cause that limit to be exceeded."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::buycommand[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::sellcommand[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Selling goods: `sell` (By Pang Jia Da)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Sells a particular goods from the inventory."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The inventory manager cannot sell products in the following cases:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The good being sold does not exist in the inventory"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ". The quantity being sold is larger than the amount existing in the inventory"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Format: `sell GOOD_DISPLAYED_INDEX q/QUANTITY p/PRICE`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* `sell 1 q/4 p/3.5` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Sells 4 units of good at displayed index 1 in the inventory at $3.50 each."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The selling price can be specified to the nearest cent, or 2 decimal places maximum."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "When the quantity in inventory reaches 0, the name of the good is not deleted for future reference or restocking."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "This entry can be deleted using the `delete-g` command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::sellcommand[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//tag::deletegood[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d Delete good entry in inventory: `delete-g` (By Pang Jia Da)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Deletes an entry for a good in the inventory."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The good to be deleted is at the displayed index shown in the middle inventory panel."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "All of the good\u0027s quantity will be removed in the process."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Format: `delete-g INDEX`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* `delete-g 3`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "The good entry at displayed index 3 will be removed, provided there is an entry at index 3."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "No transaction history will be recorded for `delete-g`. This command is"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "meant to recove goods with no quantity in the inventory when reference to them"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "is no longer required. If there are quantities being transacted, `buy` and `sell`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "should be used instead."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//end::deletegood[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// tag::setthreshold[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Setting minimum quantity for goods: `warn` (By Fang Shao Hua)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Sets the minimum quantity threshold for a certain good."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "When the quantity of the good is below the threshold, the quantity of the good will be mark with red color background"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "and rank higher up in the inventory list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "All goods under their threshold quantity will be shown before all goods above their threshold quantity."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Format: `warn INDEX q/MIN_QUANTITY`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `warn 5 q/100` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "This sets the minimum quantity threshold for good at index 5 with an quantity of 100."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `warn` command"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/warn.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "When a new good is added into the inventory, its minimum quantity threshold is set at 0."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// end::setthreshold[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// tag::findtransaction[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Locating transactions by search criteria: `find-t` (By Fang Shao Hua)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Display list of transactions that fulfills the given search criteria."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "3 types of search criteria:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ". transaction type"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ". supplier\u0027s name"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ". good\u0027s name"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Format: `find-t [TRANSACTION TYPE] [n/NAME] [g/GOOD NAME]`;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".GUI before demo"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/original.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Search by transaction type: +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`find-t buy` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "display all `buy` transactions."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "NOTE: Currently, there are only two types of transaction: `buy` and `sell`. Type of transaction is case sensitive."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `find-t` command that uses only [TRANSACTION TYPE] criteria"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/find-t buy.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Search by `Name` of `Supplier`: +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`find-t n/alex bernice` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "display all transactions that related to `Alex` or `Bernice`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "****"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* The search is case insensitive. e.g `bernice` will match `Bernice`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* The order of the keywords does not matter. e.g. `Bernice Yu` will match `Yu Bernice`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Only full words will be matched e.g. `bernice` will not match `bernices`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Supplier matching at least one keyword will be returned (i.e. `OR` search). e.g. `Alex Bernice` will return `Alex Yeoh`, `Bernice Yu`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "****"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `find-t` command that uses only [NAME] criteria"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/find-t name.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Search by `Good Name` of `Good`: +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`find-t g/apple noodle` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "display all transactions that related to `Apple` or `Noodle`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `find-t` command that uses only [GOOD NAME] criteria"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/find-t good name.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`Combination of criteria` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Criteria can be combined to give a more constraint search."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* Search by transaction type and `GoodName` of `Good: +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`find-t buy n/apple noodle` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "display all `buy` transactions that is related to `Apple` or `Noodle`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `find-t` command that uses [TRANSACTION TYPE] and [GOOD NAME] criteria."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/combination.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "NOTE: The transaction related to `Noodle` is no longer shown as compare to search only by"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "`Good Name`, as that transaction is a sell transaction and does not fulfill the transaction type."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// end::findtransaction[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// tag::listtransaction[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d\u003d Listing all transactions : `list-t` (By Fang Shao Hua)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Shows the list of transaction history in the inventory manager. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Format: `list-t`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ".Demo for `list-t` command"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "image::UG/list-t.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "// end::listtransaction[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//tag::undoredo[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Undoing a recently executed command: `undo` (By Nicholas Cristian Fernando)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Removes changes from a recently executed command. Commands that only affect display e.g. find and list, and undo commands, will be ignored and the next command in line will be undone. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Examples (assuming all other commands are valid):"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `clear-s` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "  `list-t` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "  `undo` (ignores `list-t` and reverses `clear-s`)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `clear-s` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `delete-g 1` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `undo` (reverses `delete-g 1`) +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `undo` (reverses `clear-s`)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Redoing a previously undone command: `redo`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Redoes changes undone by the most recent undo command. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "Examples (assuming all other commands are valid):"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `clear-s` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "  `list-t` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "  `undo` (ignores `list-t` and reverses `clear-s`) +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `redo` (repeats `clear-s`)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `clear-s` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `delete-g 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `undo` (reverses `delete-g 1`) +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `undo` (reverses `clear-s`) +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `redo` (repeats `clear-s`) +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `redo` (repeats `delete-g 1`) +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* `clear-s` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "  `undo` (reverses `clear-s`) +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `delete-g 1` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  `redo` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "  The `redo` fails as `delete-g 1` will remove the undone states."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//end::undoredo[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Inventory manager data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For security concerns, all data will be encrypted by default."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous InventoryManager folder."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(By Liu Chao)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Adding a supplier* `add-s n/NAME c/PHONE e/EMAIL a/ADDRESS [gp/GOOD PRICE]…` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "e.g. `add-s n/NTUC Fairprice Macpherson Mall c/63521728 e/MacphersonMall@NTUC Fairprice.com a/401, #02-22 MacPherson Rd, Macpherson Mall, 368125 gp/banana 5 gp/tissue paper 0.55`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Listing all suppliers* : `list-s`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Clearing all supplier entries* : `clear-s`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Deleting a supplier* : `delete-s INDEX (must be a positive integer)` +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "e.g. `delete-s 1`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Deleting an entry or entries of good-price pair(s) in the supplier’s list* : `delete-gp INDEX (must be a positive integer) g/GOOD_NAME [g/MORE_GOOD_NAME]...` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "e.g. `delete-gp 1 g/apple g/orange (to delete two different goods)`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Editing a supplier* : `edit-s INDEX (must be a positive integer) [n/NAME] [c/PHONE] [e/EMAIL] [a/ADDRESS] [gp/GOOD_PRICE_PAIR]…` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "e.g. `edit-s 1 c/63865586 gp/Watermelon 10`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Locating suppliers by name* : `find-s KEYWORD [MORE_KEYWORD]…` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "e.g. `find-s NTUC ColdStorage`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Source supplier(s) for good(s)*: `source GOOD_NAME [MORE_GOOD_NAME]...` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "e.g. `source banana apple`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(By Pang Jia Da)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Buy goods*: `buy SUPPLIER_DISPLAYED_INDEX g/GOOD_NAME q/QUANTITY` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "e.g. `buy 1 g/Apple q/4`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Sell goods*: `sell GOOD_DISPLAYED_INDEX q/QUANTITY p/PRICE` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "e.g. `sell 1 q/4 p/3`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(By Fang Shao Hua)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Set minimum threshold quantity for goods*: `warn INDEX q/MIN_QUANTITY`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *List transaction history*: `list-t`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Find transaction*: `find-t [TRANSACTION TYPE][n/NAME][g/GOOD NAME]`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//tag::undoredosummary[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(By Nicholas Cristian Fernando)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Undo*: `undo`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Redo*: `redo`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//end::undoredosummary[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 81,
      "FangShaoHua94": 154,
      "-": 115,
      "LiuChao93": 71,
      "PangJiaDa": 62
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://ci.appveyor.com/project/CS2103-W14-2/main[image:https://ci.appveyor.com/api/projects/status/rlr0xji2vhij1016?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 92
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 46
    }
  },
  {
    "path": "docs/UsingPlantUML.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "end box"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "***"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 204
    }
  },
  {
    "path": "docs/index.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "include::../README.adoc[]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 2
    }
  },
  {
    "path": "docs/team/fangshaohua94.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d Fang Shao Hua - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d PROJECT: InventoryManager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "InventoryManager is a desktop inventory manager application used for tracking quantity of goods, suppliers and transaction history. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Major enhancement*: find transaction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** What it does: Filter the transaction list to find specific transactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Justification: Enable user to quickly obtained information specific transactions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "without spending time to scroll through large amount of data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Highlights: Multiple filters can be used together to enhance search range and search constraint."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Major enhancement*: set warning threshold quantity for good"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** What it does: Enable user to set the threshold quantity for goods in the inventory."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "When a good is below its threshold quantity, it will be sorted with higher priority in the good\u0027s panel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Justification: This feature alert the user when a particular good is below its threshold quantity,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "and remind the user to top up the good in the inventory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Highlights: Automatic alert due to any change in good\u0027s quantity."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Minor enhancement*: establish models for good, inventory, transaction and transaction history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dfang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional and Test code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "*** Updated the GUI to display 3 panels: supplier list panel, inventory panel and transaction history panel.(Pull requests https://github.com/AY1920S2-CS2103-W14-2/main/pull/63[#63], https://github.com/AY1920S2-CS2103-W14-2/main/pull/83[#83])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W14-2/main/pull/102[#102], https://github.com/AY1920S2-CS2103-W14-2/main/pull/103[#103]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/AY1920S2-CS2103-W15-2/main/issues/159[1])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|_Given below are sections I contributed to the User Guide._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetthreshold]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindtransaction]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlisttransaction]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindtransaction]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsetthreshold]"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 63
    }
  },
  {
    "path": "docs/team/liuchao93.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d Liu Chao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d PROJECT: InventoryManager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "This desktop application titled “Inventory Manager” is aiming to assist store managers to manage their records of transactions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "of goods 1) between managers and suppliers, and 2) between managers and customers. Managers could use this application to record"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "suppliers’ information and source suppliers to buy goods from. Each transaction of buying goods from suppliers or selling goods"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "to customers is recorded with this application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Major enhancement 1*: Edit Supplier"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** What it does: The command allows users to edit the information of a supplier such as company name, company address, phone number, email address and good price pairs recorded in the supplier\u0027s goods list. Users could edit any field of these information and could edit multiple good price pairs at once. In addition, if the input good price pairs are not included in the original supplier\u0027s goods list, the input will be a new entry in the supplier\u0027s goods list. This provides an option for users to add new entries of price good pairs to the suppliers\u0027 goods list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Justification: users (store managers) need to consistently update information of suppliers in order to perform day to day tasks. In addition, users need an option to edit the information if there is error in the information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Highlights: AddressBook Level 3\u0027s edit function only allows users to edit the supplier\u0027s goods list by creating a fresh goods list in our project\u0027s context. For example, if a user wants to update an entry of good price pair such as for apple in a supplier\u0027s list, AddressBook Level 3\u0027s edit command will erase the whole supplier\u0027s goods list and include only the new entry of good price pair for apple. Hence, the user needs to retype all the already recorded good price pairs that are in the supplier\u0027s goods list in order to edit only the good price pair of apple."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "The command of this application does not require users to retype all the good price pairs and only requires the users to type the new information for only the good price pairs they want to edit, e.g. only type command for apple. In addition, the command allows users to add new entries of good price pairs to the suppliers\u0027 goods list, unlike the edit command in AddressBook Level 3."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Credits: The command builds on the edit command of https://github.com/nus-cs2103-AY1920S2/addressbook-level3[AddressBook Level 3] by SE Initiative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Major enhancement 2*: Delete GP from Supplier"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** What it does: The command allows users to delete entries of good price pairs from a supplier goods list. Users could input multiple good names to delete multiple entries of good price pairs in one command. The command will inform users all of the goods successfully deleted and all of the goods that could not be found at the end of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Justification: Users (store managers) need to update the goods that are sold by the suppliers if the suppliers cease to sell certain goods. The difference between this command and edit command is that edit command could not take away entries of good price pairs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Highlights: This command\u0027s implementation is rarely difficult as it requires researching on Java stream\u0027s methods to search in set and delete entries from set by using a specific keywords. In addition, the implementation needs to tie well with undo and redo features, e.g. managing model comit well. Furthermore, multiple types of test need to be designed to prevent bugs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Major enhancement 3*: Source supplier for a good"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** What it does: Users could use this command to find all existing suppliers who sell certain specific goods through the usage of keywords that are part of or all of good\u0027s name. For example, the command could find supplier selling fuji apple by just using keyword \u0027apple\u0027."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Users could find multiple suppliers selling different goods by using keywords relating to those goods at one command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Justification: This feature is the core of the application which allows stock manager to find suppliers to buy specific goods from."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Highlights: In order to provide the maximum convenience for the users, this command allows both using keywords instead of full names and having case insensitive keywords. This implementation is much more difficult than merely using specific full name of goods. In addition, multiple tests have to be designed to eliminate potential bugs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Credits: To https://github.com/nus-cs2103-AY1920S2/addressbook-level3[AddressBook Level 3] by SE Initiative for providing ways to find specific entries by keywords."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Add Supplier: Improvement on AddressBook Level 3\u0027s add command by implementing another class offer in the supplier object to record price and good\u0027s name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** List Supplier: Adjusting AddressBook Level 3\u0027s list command to this application\u0027s context."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Clear Supplier: Adjusting AddressBook Level 3\u0027s clear command to this application\u0027s context."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Find Supplier: Adjusting AddressBook Level 3\u0027s find command to this application\u0027s context."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Delete Supplier: Adjusting AddressBook Level 3\u0027s delete command to this application\u0027s context."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dliuchao93\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dLiuChao93\u0026tabRepo\u003dAY1920S2-CS2103-W14-2%2Fmain%5Bmaster%5D[Code]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Documentation (User Guide)*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "Added the user guide for the following commands:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Adding a supplier"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Listing all suppliers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Clearing all supplier entries"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Deleting a supplier"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Deleting an entry or entries of good-price pair(s) in the supplier’s list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Editing a supplier"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Locating suppliers by name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Source supplier(s) for good(s)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "* *Documentation (Developer Guide)*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** Added the developer guid for supplier feature with UMLs and design considerations in section 3.3 of the developer guide."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "** The UMLs that I have added:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Activity Diagram for Edit Supplier command (ActivityDiagramEditSupplier.jpg)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". class diagram of supplier (SupplierModelClassDiagram.jpg)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ". Sequence Diagram of Edit Supplier command (SequentialDiagramEditSupplier.png)"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 61
    }
  },
  {
    "path": "docs/team/nicholascf.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d Nicholas Cristian Fernando - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d PROJECT: InventoryManager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "InventoryManager is a desktop inventory manager application used for tracking quantity of goods, suppliers and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "transaction history. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Major enhancement*: added the ability to undo/redo commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** What it does: allows the user to undo a command, and redo the command after undoing it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Justification: With an inventory of fast-moving consumer goods, there will be large amount of traffic of goods and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "consequently, large number of commands that need to be inputted. This increases the probability of error in the user,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "which, if irreversible, may discourage them from using the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Highlights: This enhancement allows easy compatibility with future commands as the implementation is independent of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "the details of the execution of command. Memory is used instead of storage to hold the previous states to avoid unwanted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "cluttering by temporary files. Significant refactoring was done to avoid much of the code duplication due to the presence of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "multiple databases. Interfaces are also extracted for possible future alternative implementations of versioning."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Credits: To https://github.com/se-edu/addressbook-level4[AddressBook Level 4] by SE Initiative for describing the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "general implementation idea of undo and redo"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Minor enhancement*: added a basic class to represent goods-price pairs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Code contributed*: [https://tinyurl.com/nicholasCfCode[Code]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Enhancement to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Fixed minor visual defect when application window is made significantly large (https://github.com/AY1920S2-CS2103-W14-2/main/pull/155[#155])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Updated the application name and icon (https://github.com/AY1920S2-CS2103-W14-2/main/pull/150[#150])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Documentation (Developer Guide):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Updated the section on Model for the developer guide (https://github.com/AY1920S2-CS2103-W14-2/main/pull/168[#168],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/172[#172])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Rewrote the undo/redo feature section for the developer guide according to own implementation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "(https://github.com/AY1920S2-CS2103-W14-2/main/pull/89[#89], https://github.com/AY1920S2-CS2103-W14-2/main/pull/111[#111],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/180[#180])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Added the initial version of the developer guide (https://github.com/AY1920S2-CS2103-W14-2/main/pull/14[#14])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Documentation (User Guide):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Added the user guide for undo and redo features (https://github.com/AY1920S2-CS2103-W14-2/main/pull/116[#116],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/183[#183])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Added the initial version of the user guide (https://github.com/AY1920S2-CS2103-W14-2/main/pull/23[#23])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Managed releases v1.3 - v1.4 (2 releases) on GitHub"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Team:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Reviewed PRs:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/67[#67],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/83[#83],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/97[#97],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/106[#106]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Set up Travis and Appveyor for CI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Set up Coveralls to report coverage changes for every new PR."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "*** Set up branch protection rules for the master branch."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Contributions to User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredosummary]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "---"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredousecase]"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 91
    }
  },
  {
    "path": "docs/team/pangjiada.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d Pang Jia Da - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d PROJECT: Inventory Manager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "InventoryManager is for those who prefer to use a desktop app for managing their inventory. More importantly, InventoryManager is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, InventoryManager can get your inventory management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Major enhancement*: added *Buy and Sell commands*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** What it does: Allows users to `buy` and `sell` batches of goods. The commands orchestrate the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "interaction between the Inventory, Supplier List, and Transaction History to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "validate the input and update the model properly, or notify the user otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Justification: This is the main functionality of the Inventory Manager, which is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "to keep stock, and manage all changes to, all goods currently in inventory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`buy` and `sell` commands accomplish exactly that."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Highlights: This feature touched upon all aspects of the `Model`. It required"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "supplier information and inventory status to perform input validation to update"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "the inventory. Then it creates a new transaction history record."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Since the `buy` and `sell` commands are the main avenue that our program takes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "input from the user, the required parameters would form the basis of other"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "commands, especially profit analytics and historical analysis extensions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "As such, it was a challenge to ensure that it was as extensible as possible"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "because it was expected to change frequently with additional commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** A total of 3 extensions were needed to `buy` and `sell` commands and their related tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** As `buy` and `sell` commands needed to access all the models of persistent"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "storage, the development of this feature also shaped the storage design and API"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "of the underlying model to facilitate ease of access without violating"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "encapsulation principles."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Minor enhancement*: Added ability to delete a good entry from inventory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dpangjiada\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense report]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Documentation*: Excerpts from my documentations is reproduced below."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Updates About Us, Contact Us, ReadMe page ("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/45[#45]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Set up Appveyor CI"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Refactored `ModelStubs` used for easier model-related testing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Participated in PRs reviews:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/126[#126]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/96[#96]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/124[#124]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/108[#108]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/91[#91]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/AY1920S2-CS2103-W14-2/main/pull/98[#98]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "https://github.com/PangJiaDa/ped/issues[PE-D Issues Reported]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d User Guide: Buy Command section"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbuycommand]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d User Guide: Sell Command section"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsellcommand]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d User Guide: Delete Good Command section"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletegood]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d UML Diagrams"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Diagrams"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dArchitectureSequenceDiagram]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbuysequencediagram]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d\u003d\u003d Class Diagrams"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgoodclassenhancement]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Developer Guide: Buy and Sell Command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbuyandsellcommand]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d Developer Guide: Proposed Automatic Expiry Feature"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautoexpiry]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "---"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "PangJiaDa": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonTransactionHistoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.TransactionHistoryStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Inventory Manager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistoryStorage transactionHistoryStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonTransactionHistoryStorage(userPrefs.getTransactionHistoryFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, inventoryStorage, transactionHistoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code storage}\u0027s inventory and {@code storage}\u0027s transaction history and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The data from the sample inventory will be used instead if {@code storage}\u0027s inventory is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * or an empty inventory will be used instead if errors occur when reading {@code storage}\u0027s inventory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The data from the sample transaction history will be used instead if {@code storage}\u0027s  transaction history"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * is not found, or an empty  transaction history will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code storage}\u0027s transaction history."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e addressBookOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Optional\u003cReadOnlyList\u003cGood\u003e\u003e inventoryOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e transactionHistoryOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cSupplier\u003e initialAddressBookData;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cGood\u003e initialInventoryData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cTransaction\u003e initialTransactionHistoryData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                logger.info(\"Address book data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Address book data file not in the correct format. \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Problem while reading from the address book file.\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                logger.info(\"Inventory data file not found. Will be starting with a sample Inventory\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Inventory data file not in the correct format.\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty Inventory\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d new Inventory();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Problem while reading from the inventory file.\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty Inventory\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialInventoryData \u003d new Inventory();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionHistoryOptional \u003d storage.readTransactionHistory();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (!transactionHistoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                logger.info(\"TransactionHistory data file not found.\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        + \"Will be starting with a sample TransactionHistory\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialTransactionHistoryData \u003d transactionHistoryOptional"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleTransactionHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"TransactionHistory data file not in the correct format.\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty TransactionHistory\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialTransactionHistoryData \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.warning(\"Problem while reading from the inventory file.\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \" Will be starting with an empty TransactionHistory\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            initialTransactionHistoryData \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new ModelManager(initialAddressBookData, initialInventoryData, initialTransactionHistoryData, userPrefs);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        logger.info(\"Starting Inventory Manager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Inventory Manager ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 14,
      "FangShaoHua94": 59,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        sb.append(\"Current log level : \").append(logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX \u003d \"The supplier index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_SUPPLIERS_LISTED_OVERVIEW \u003d \"%1$d suppliers listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_INVALID_GOOD_DISPLAYED_INDEX \u003d \"The good index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_INITIAL_STATE \u003d \"Cannot undo from initial state!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_REDO_AT_LATEST_STATE \u003d \"Cannot redo from latest state!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "FangShaoHua94": 4,
      "-": 11,
      "LiuChao93": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "LiuChao93": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cSupplier\u003e getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cGood\u003e getInventory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of suppliers */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    ObservableList\u003cSupplier\u003e getFilteredSupplierList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the TransactionHistory."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see seedu.address.model.Model#getTransactionHistory()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cTransaction\u003e getTransactionHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of goods */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cGood\u003e getFilteredGoodList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 transaction history file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "FangShaoHua94": 28,
      "-": 46,
      "LiuChao93": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.parser.InventoryManagerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final InventoryManagerParser inventoryManagerParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventoryManagerParser \u003d new InventoryManagerParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Command command \u003d inventoryManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            storage.saveTransactionHistory(model.getTransactionHistory());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cGood\u003e getInventory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getFilteredGoodList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cTransaction\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getTransactionHistory();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return model.getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "FangShaoHua94": 46,
      "-": 69,
      "LiuChao93": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Adds a supplier to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class AddSupplierCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a supplier to the address book.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_CONTACT + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"[\" + PREFIX_OFFER + \"GOOD PRICE]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_NAME + \"NTUC Fairprice Macpherson Mall \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_CONTACT + \"63521728 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_EMAIL + \"MacphersonMall@NTUCFairprice.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_ADDRESS + \"401, #02-22 MacPherson Rd, Macpherson Mall, 368125 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + PREFIX_OFFER + \"banana 5 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + PREFIX_OFFER + \"tissue paper 0.55\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New supplier added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"This supplier already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final Supplier toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Creates an AddSupplierCommand to add the specified {@code Supplier}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public AddSupplierCommand(Supplier supplier) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        toAdd \u003d supplier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (model.hasSupplier(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.addSupplier(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof AddSupplierCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSupplierCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "-": 40,
      "PangJiaDa": 2,
      "LiuChao93": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BuyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Buys the stated quantity of the good stated from the given supplier on the provided transaction date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * This batch of goods will be set to expire on the given expiry date, after which they will expire and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * be removed from inventory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class BuyCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buy\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Buys goods from the supplier at the displayed index.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The buy command keyword is followed by the displayed index of the supplier to buy from.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The name of good to buy will be given as a parameter.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The supplier must have the good on offer, else purchase will be rejected.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The quantity to buy will be given as a parameter.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"GOOD_NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_GOOD_NAME + \"Apples \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"50 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bought %1$d units of %2$s at $%3$s each.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_DOES_NOT_SELL_GOOD \u003d \"Supplier does not sell that good.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_GOODQUANTITY_OVERFLOW \u003d \"Buying this batch of goods exceeds maximum allowed \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"inventory quantity.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + GoodQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final GoodName boughtGoodName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final GoodQuantity boughGoodQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final Index supplierIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public BuyCommand(GoodName boughtGoodName, GoodQuantity boughGoodQuantity, Index supplierIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireAllNonNull(boughtGoodName, boughGoodQuantity, supplierIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.boughtGoodName \u003d boughtGoodName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.boughGoodQuantity \u003d boughGoodQuantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.supplierIndex \u003d supplierIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * BuyCommand\u0027s execute will do the following things:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *         Update inventory with the new bought good. This creates a new inventory entry if the good name did"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *         not previously exist, or updates the good quantity if it does."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *         Create a new buy transaction in transaction history"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *         Commits the model to allow for undo and redo"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        List\u003cSupplier\u003e lastShownList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (supplierIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // verify that seller has good on offer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Supplier seller \u003d lastShownList.get(supplierIndex.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int numMatchingGoods \u003d (int) seller.getOffers().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .filter(offer -\u003e offer.getGoodName().equals(boughtGoodName))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (numMatchingGoods \u003c\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(MESSAGE_SUPPLIER_DOES_NOT_SELL_GOOD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // updated inventory to reflect purchase"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good queryGood \u003d Good.goodWithName(boughtGoodName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (model.hasGood(queryGood)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            increaseQuantity(model, boughtGoodName, boughGoodQuantity);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            Good boughtGood \u003d Good.newGoodEntry(boughtGoodName, boughGoodQuantity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            model.addGood(boughtGood);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // get fields to create new transaction history record"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        TransactionId transactionId \u003d new TransactionId(UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good boughtGood \u003d Good.newGoodEntry(boughtGoodName, boughGoodQuantity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // we have checked that seller has good on offer"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // offer is unique is the GoodName because a Set is used, so we take the first and only item"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Price price \u003d seller.getOffers().stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .filter(offer -\u003e offer.getGoodName().equals(boughtGoodName))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .get(0)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .getPrice();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyTransaction buyTransaction \u003d new BuyTransaction(transactionId, boughtGood, seller, price);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.addTransaction(buyTransaction);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                boughGoodQuantity.goodQuantity, boughtGoodName.fullGoodName, price.getValue()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Increases the quantity of an existing good in inventory with the same name as {@code boughtGoodName}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * by the quantity in {@code boughGoodQuantity}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param model underlying model to make modifications in"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param boughtGoodName name of newly bought good"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param boughGoodQuantity quantity of good to buy"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws CommandException if the amount of goods being bought overflows the inventory limit as"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * stated in {@link GoodQuantity}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private void increaseQuantity(Model model,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            GoodName boughtGoodName, GoodQuantity boughGoodQuantity) throws CommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good queryGood \u003d Good.goodWithName(boughtGoodName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int oldGoodIndex \u003d model.indexOfGood(queryGood);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good oldGoodEntry \u003d model.getFilteredGoodList().get(oldGoodIndex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int updatedQuantity \u003d oldGoodEntry.getGoodQuantity().goodQuantity + boughGoodQuantity.goodQuantity;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // this try catch prevents inventory quantity overflows"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity updatedGoodQuantity;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            updatedGoodQuantity \u003d new GoodQuantity(updatedQuantity);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(MESSAGE_GOODQUANTITY_OVERFLOW);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good updatedGood \u003d new Good(boughtGoodName, updatedGoodQuantity, oldGoodEntry.getThreshold());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.setGood(oldGoodEntry, updatedGood);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!(other instanceof BuyCommand)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand e \u003d (BuyCommand) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return boughtGoodName.equals(e.boughtGoodName)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 boughGoodQuantity.equals(e.boughGoodQuantity)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 supplierIndex.equals(e.supplierIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "PangJiaDa": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class ClearSupplierCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Supplier list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 20,
      "LiuChao93": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Deletes a good identified using its displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DeleteGoodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-g\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \": Deletes the good identified by the index number used in the displayed inventory list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_DELETE_GOOD_SUCCESS \u003d \"Deleted good: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public DeleteGoodCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        List\u003cGood\u003e lastShownList \u003d model.getFilteredGoodList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good goodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.deleteGood(goodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GOOD_SUCCESS, goodToDelete.getGoodName().fullGoodName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                || (other instanceof DeleteGoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteGoodCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGoodPricePairFromSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Delete entries of good price pair from supplier\u0027s good list given the good name which is identified by keywords."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteGoodPricePairFromSupplierCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-gp\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \": Deletes an entry / entries of good price pair(s) in the supplier\u0027s good list given a good\u0027s or goods\u0027 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"name(s) which is / are identified by keyword(s) (case-sensitive)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"g/GOOD_NAME [g/MORE_GOOD_NAME]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" g/apple\" + \" g/orange\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DELETE_GOOD \u003d \"Successfuly deleted goods from supplier\u0027s list: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_COULD_NOT_FIND_GOOD \u003d \"Could not find goods: \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_MUST_INCLUDE_GOODNAME \u003d \"Must include at least one good name\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static String errorMessage \u003d MESSAGE_COULD_NOT_FIND_GOOD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static String successMessage \u003d MESSAGE_SUCCESS_DELETE_GOOD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final DeleteSupplierGoodName deleteSupplierGoodName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteGoodPricePairFromSupplierCommand(Index index, DeleteSupplierGoodName deleteSupplierGoodName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.deleteSupplierGoodName \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName(deleteSupplierGoodName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteGoodPricePairFromSupplierCommand(Index indexFirstSupplier) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.index \u003d indexFirstSupplier;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        deleteSupplierGoodName \u003d new DeleteSupplierGoodName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e lastShownList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierWhoHasGoodToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d createEditedSupplier(supplierWhoHasGoodToDelete, deleteSupplierGoodName.goodNames);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.setSupplier(supplierWhoHasGoodToDelete, editedSupplier);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String returnMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (errorMessage.equals(MESSAGE_COULD_NOT_FIND_GOOD)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            returnMessage \u003d successMessage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            returnMessage \u003d successMessage.equals(MESSAGE_SUCCESS_DELETE_GOOD) ? errorMessage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    : successMessage.concat(\"\\n\").concat(errorMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //reset message for next round of deletion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        errorMessage \u003d MESSAGE_COULD_NOT_FIND_GOOD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        successMessage \u003d MESSAGE_SUCCESS_DELETE_GOOD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new CommandResult(String.format(returnMessage, supplierWhoHasGoodToDelete));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Creates and returns a {@code Supplier} with the details of {@code supplierWhoHasGoodToDelete}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * edited with {@code goodName}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static Supplier createEditedSupplier(Supplier supplierWhoHasGoodToDelete, Set\u003cGoodName\u003e goodNames) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assert supplierWhoHasGoodToDelete !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Name updatedName \u003d supplierWhoHasGoodToDelete.getName();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Phone updatedPhone \u003d supplierWhoHasGoodToDelete.getPhone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Email updatedEmail \u003d supplierWhoHasGoodToDelete.getEmail();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Address updatedAddress \u003d supplierWhoHasGoodToDelete.getAddress();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cOffer\u003e duplicate \u003d new HashSet\u003c\u003e(supplierWhoHasGoodToDelete.getOffers());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.stream().forEach(goodName -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (duplicate.removeIf(tempOffer -\u003e tempOffer.getGoodName().equals(goodName))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                successMessage \u003d successMessage.concat(goodName.toString()).concat(\", \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                errorMessage \u003d errorMessage.concat(goodName.toString()).concat(\", \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new Supplier(updatedName, updatedPhone, updatedEmail, updatedAddress, duplicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof DeleteGoodPricePairFromSupplierCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteGoodPricePairFromSupplierCommand) other).index)); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Stores the details to edit the supplier with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * corresponding field value of the supplier."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static class DeleteSupplierGoodName {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        private Set\u003cGoodName\u003e goodNames;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public DeleteSupplierGoodName() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * A defensive copy of {@code goods} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public DeleteSupplierGoodName(DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            setGoodNames(toCopy.goodNames);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return CollectionUtil.isAnyNonNull(goodNames);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * Sets {@code goods} to this object\u0027s {@code goods}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * A defensive copy of {@code goods} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void setGoodNames(Set\u003cGoodName\u003e goodNames) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            this.goodNames \u003d (goodNames !\u003d null) ? new HashSet\u003c\u003e(goodNames) : null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * Returns an unmodifiable good set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code goods} is null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public Optional\u003cSet\u003cGoodName\u003e\u003e getGoodNames() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return (goodNames !\u003d null) ? Optional.of(Collections.unmodifiableSet(goodNames)) : Optional.empty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (!(other instanceof DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName e \u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    (DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return getGoodNames().equals(e.getGoodNames());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Deletes a supplier identified using its displayed index from the address book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteSupplierCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \": Deletes the supplier identified by the index number used in the displayed supplier list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_DELETE_SUPPLIER_SUCCESS \u003d \"Deleted Supplier: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierCommand(Index indexFirstSupplier) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.index \u003d indexFirstSupplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e lastShownList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof DeleteSupplierCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteSupplierCommand) other).index)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 31,
      "LiuChao93": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Edits the details of an existing supplier in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the supplier identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"by the index number used in the displayed supplier list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"[\" + PREFIX_CONTACT + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"[\" + PREFIX_OFFER + \"GOOD_PRICE_PAIR]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_CONTACT + \"63865586 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + PREFIX_OFFER + \"Watermelon 10\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_EDIT_SUPPLIER_SUCCESS \u003d \"Edited Supplier: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"This supplier already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final EditSupplierDescriptor editSupplierDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    //public static Set\u003cOffer\u003e supplierToEditOffer;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * @param index of the supplier in the filtered supplier list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * @param editSupplierDescriptor details to edit the supplier with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierCommand(Index index, EditSupplierDescriptor editSupplierDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(editSupplierDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.editSupplierDescriptor \u003d new EditSupplierDescriptor(editSupplierDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e lastShownList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d createEditedSupplier(supplierToEdit, editSupplierDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!supplierToEdit.isSameSupplier(editedSupplier) \u0026\u0026 model.hasSupplier(editedSupplier)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.setSupplier(supplierToEdit, editedSupplier);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Combines the two sets of offers given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * @return the combined set"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static Set\u003cOffer\u003e mergeOfferSets(Set\u003cOffer\u003e supplierToEditOffer,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                                                     Set\u003cOffer\u003e editSupplierDescriptorOffer) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return Stream.concat(editSupplierDescriptorOffer.stream(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                supplierToEditOffer.stream()).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Creates and returns a {@code Supplier} with the details of {@code supplierToEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * edited with {@code editSupplierDescriptor}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static Supplier createEditedSupplier(Supplier supplierToEdit,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            EditSupplierDescriptor editSupplierDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assert supplierToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Name updatedName \u003d editSupplierDescriptor.getName().orElse(supplierToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Phone updatedPhone \u003d editSupplierDescriptor.getPhone().orElse(supplierToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Email updatedEmail \u003d editSupplierDescriptor.getEmail().orElse(supplierToEdit.getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Address updatedAddress \u003d editSupplierDescriptor.getAddress().orElse(supplierToEdit.getAddress());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cOffer\u003e supplierToEditOffer \u003d supplierToEdit.getOffers();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (editSupplierDescriptor.offers !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            Set\u003cOffer\u003e updatedOffers \u003d mergeOfferSets(supplierToEditOffer, editSupplierDescriptor.getOffers().get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new Supplier(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedOffers);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new Supplier(updatedName, updatedPhone, updatedEmail, updatedAddress, supplierToEditOffer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!(other instanceof EditSupplierCommand)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand e \u003d (EditSupplierCommand) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 editSupplierDescriptor.equals(e.editSupplierDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Stores the details to edit the supplier with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * corresponding field value of the supplier."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static class EditSupplierDescriptor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        private Set\u003cOffer\u003e offers;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public EditSupplierDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * A defensive copy of {@code offers} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public EditSupplierDescriptor(EditSupplierDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            setOffers(toCopy.offers);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Sets {@code offers} to this object\u0027s {@code offers}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * A defensive copy of {@code offers} is used internally."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void setOffers(Set\u003cOffer\u003e offers) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            this.offers \u003d (offers !\u003d null) ? new HashSet\u003c\u003e(offers) : null;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Returns an unmodifiable offer set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code offers} is null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public Optional\u003cSet\u003cOffer\u003e\u003e getOffers() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return (offers !\u003d null) ? Optional.of(Collections.unmodifiableSet(offers)) : Optional.empty();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (!(other instanceof EditSupplierDescriptor)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            EditSupplierDescriptor e \u003d (EditSupplierDescriptor) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    \u0026\u0026 getOffers().equals(e.getOffers());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 18,
      "-": 156,
      "PangJiaDa": 2,
      "LiuChao93": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Inventory Manager as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindGoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodSupplierPairContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Finds and lists all suppliers in Inventory Management who sell specific goods identified by keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindGoodCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"source\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all suppliers who sell specific good(s) \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"identified with a good\u0027s or goods\u0027 name(s) which is/are identified with keyword(s) (case-insensitive)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Parameters: g/GOOD_NAME [g/MORE_GOOD_NAME]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" banana apple\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final GoodSupplierPairContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public FindGoodCommand(GoodSupplierPairContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                String.format(Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW, model.getFilteredSupplierList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof FindGoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindGoodCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Finds and lists all suppliers in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindSupplierCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all suppliers whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" NTUC ColdStorage\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final SupplierNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public FindSupplierCommand(SupplierNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                String.format(Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW, model.getFilteredSupplierList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof FindSupplierCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindSupplierCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "PangJiaDa": 3,
      "LiuChao93": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Finds and lists all transactions in transaction history whose conditions are met."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class FindTransactionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \": filters the transaction list by type of transaction, supplier\u0027s name and good\u0027s name\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [buy] \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"[\" + PREFIX_GOOD_NAME + \"] \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String EMPTY_VALUE_WITH_PREFIX \u003d \"n/ or g/ is given, but the value is empty.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String INVALID_TRANSACTION_TYPE \u003d \"Transaction type can only be \u0027buy\u0027 or \u0027sell\u0027.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_NO_FIELD_PROVIDED \u003d \"At least one conditional field must be provided.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionContainKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public FindTransactionCommand(TransactionContainKeywordsPredicate transactionContainKeywordsPredicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.predicate \u003d transactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof FindTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTransactionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListSupplierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Lists all suppliers in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class ListSupplierCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all suppliers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "LiuChao93": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Lists all transactions in the transaction history to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class ListTransactionCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-t\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Returns to a version of the application before the last execution of an UndoCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Managed to redo undone action!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            model.redo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (StateNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_REDO_AT_LATEST_STATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SellCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Sells the stated quantity of the good from the given supplier on the provided transaction date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * User will not be allowed to sell more than their current stock in inventory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SellCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sell\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sells goods from inventory at the displayed index.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The sell command keyword is followed by the displayed index of the good to sell.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The quantity to sell will be given as a parameter.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"The price to sell each unit will be given as a parameter.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Users are unable to sell a larger quantity than is present in the inventory for \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"the good at the displayed index.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_PRICE + \"PRICE\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            + PREFIX_PRICE + \"6.90\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sold %1$d units of %2$s at %3$s each\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_QUANTITY \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \"Unable to sell a higher quantity than amount in inventory\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private GoodQuantity sellingQuantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Price sellingPrice;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Index inventoryIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public SellCommand(GoodQuantity sellingQuantity, Price sellingPrice, Index inventoryIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireAllNonNull(sellingQuantity, sellingPrice, inventoryIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.sellingQuantity \u003d sellingQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.sellingPrice \u003d sellingPrice;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.inventoryIndex \u003d inventoryIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    // TODO: follow buy command comment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        List\u003cGood\u003e lastShownList \u003d model.getFilteredGoodList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (inventoryIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        //user cannot sell more of a good than is present in inventory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good soldGoodEntry \u003d lastShownList.get(inventoryIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!hasSufficientQuantity(soldGoodEntry, sellingQuantity)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new CommandException(MESSAGE_INSUFFICIENT_QUANTITY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // since there is sufficient quantity, selling is valid"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        decreaseQuantity(model, soldGoodEntry, sellingQuantity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // create sell transaction command in transaction history"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName soldGoodName \u003d soldGoodEntry.getGoodName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good soldGood \u003d Good.newGoodEntry(soldGoodName, sellingQuantity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        TransactionId transactionId \u003d new TransactionId(UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellTransaction sellTransaction \u003d new SellTransaction(transactionId, soldGood, sellingPrice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.addTransaction(sellTransaction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sellingQuantity.goodQuantity,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                soldGoodEntry.getGoodName().fullGoodName, sellingPrice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Checks whether the inventory has at least the quantity of good trying to be sold."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param soldGoodEntry The good in the inventory to be sold"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param sellingQuantity The quantity of the good in inventory to sell"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return true if there is at least the quantity of good to be sold in the inventory."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private boolean hasSufficientQuantity(Good soldGoodEntry, GoodQuantity sellingQuantity) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity inventoryQuantity \u003d soldGoodEntry.getGoodQuantity();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return inventoryQuantity.goodQuantity \u003e\u003d sellingQuantity.goodQuantity;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Decreases the quantity of an existing good in inventory with the same name as {@code newGood}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * by the quantity in {@code newGood}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *  @param model underlying model to make modifications in"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param soldGoodEntry contains the good name and quantity to increase by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param sellingQuantity quantity to decrease the existing inventory amount by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private void decreaseQuantity(Model model, Good soldGoodEntry, GoodQuantity sellingQuantity) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int updatedQuantity \u003d soldGoodEntry.getGoodQuantity().goodQuantity"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                - sellingQuantity.goodQuantity;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good updatedGood \u003d new Good(soldGoodEntry.getGoodName(), new GoodQuantity(updatedQuantity),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                soldGoodEntry.getThreshold());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.setGood(soldGoodEntry, updatedGood);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!(other instanceof SellCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand e \u003d (SellCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return sellingQuantity.equals(e.sellingQuantity)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 sellingPrice.equals(e.sellingPrice)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 inventoryIndex.equals(e.inventoryIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "PangJiaDa": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetThresholdCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOODS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Sets the warning threshold quantity of an existing good in the inventory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SetThresholdCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"warn\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set a warning threshold quantity for the good \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"identified by the index number used in the displayed inventory.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"Existing threshold value will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            + PREFIX_QUANTITY + \"10 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Set warning threshold quantity %1$d for %2$ss\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodQuantity threshold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SetThresholdCommand(Index targetIndex, GoodQuantity threshold) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e lastShownList \u003d model.getFilteredGoodList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good goodToSetThreshold \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good updatedGood \u003d new Good(goodToSetThreshold.getGoodName(), goodToSetThreshold.getGoodQuantity(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                threshold);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.setGood(goodToSetThreshold, updatedGood);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.updateFilteredGoodList(PREDICATE_SHOW_ALL_GOODS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                threshold.goodQuantity, updatedGood.getGoodName().fullGoodName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof SetThresholdCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand e \u003d (SetThresholdCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 threshold.equals(e.threshold);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Returns to a version of the application before the last execution of a data-modifying Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Managed to undo previous action!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            model.undo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (StateNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNDO_AT_INITIAL_STATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSupplierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new AddSupplierCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class AddSupplierCommandParser implements Parser\u003cAddSupplierCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSupplierCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns an AddSupplierCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public AddSupplierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                PREFIX_CONTACT, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_OFFER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CONTACT, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSupplierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_CONTACT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e offerList \u003d ParserUtil.parseOffers(argMultimap.getAllValues(PREFIX_OFFER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplier \u003d new Supplier(name, phone, email, address, offerList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new AddSupplierCommand(supplier);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 38,
      "PangJiaDa": 5,
      "LiuChao93": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BuyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Parses input arguments and creates a new BuyCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class BuyCommandParser implements Parser\u003cBuyCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public BuyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    BuyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY, PREFIX_GOOD_NAME)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName goodName \u003d ParserUtil.parseGoodName(argMultimap.getValue(PREFIX_GOOD_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity goodQuantity \u003d ParserUtil.parseGoodQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new BuyCommand(goodName, goodQuantity, index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_GOOD_NAME \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY_DATE \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final Prefix PREFIX_OFFER \u003d new Prefix(\"gp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 13,
      "PangJiaDa": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGoodCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Parses input arguments and creates a new DeleteSupplierCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DeleteGoodCommandParser implements Parser\u003cDeleteGoodCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGoodCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * and returns a DeleteGoodCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public DeleteGoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new DeleteGoodCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGoodCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "PangJiaDa": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGoodPricePairFromSupplierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodPricePairFromSupplierCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new DeleteGoodPricePairFromSupplierCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteGoodPricePairFromSupplierCommandParser implements Parser\u003cDeleteGoodPricePairFromSupplierCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGoodPricePairFromSupplierCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns a DeleteGoodPricePairFromSupplierCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteGoodPricePairFromSupplierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    DeleteGoodPricePairFromSupplierCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //Throw exception if the user did not include any goodname."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_GOOD_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(DeleteGoodPricePairFromSupplierCommand.MESSAGE_MUST_INCLUDE_GOODNAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName deleteSupplierGoodName \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        parseGoodNamesForDelete(argMultimap.getAllValues(PREFIX_GOOD_NAME))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .ifPresent(deleteSupplierGoodName::setGoodNames);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new DeleteGoodPricePairFromSupplierCommand(index, deleteSupplierGoodName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goodNames} into a {@code Set\u003cGoodName\u003e} if {@code goodNames} is non-empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Optional \u003cSet\u003cGoodName\u003e\u003e parseGoodNamesForDelete(Collection\u003cString\u003e goodNames) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assert goodNames !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //This is to initialize a list of good name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //if there is no good names, it will initialise as empty collection"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Collection\u003cString\u003e goodNameList \u003d goodNames.size() \u003d\u003d 1 \u0026\u0026 goodNames.contains(\"\") ? Collections.emptyList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                : goodNames;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return Optional.of(ParserUtil.parseGoodNames(goodNameList));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteSupplierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteSupplierCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new DeleteSupplierCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DeleteSupplierCommandParser implements Parser\u003cDeleteSupplierCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSupplierCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns a DeleteSupplierCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    DeleteSupplierCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new DeleteSupplierCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "LiuChao93": 15,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditSupplierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new EditSupplierCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierCommandParser implements Parser\u003cEditSupplierCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSupplierCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns an EditSupplierCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                PREFIX_CONTACT, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_OFFER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    EditSupplierCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor editSupplierDescriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            editSupplierDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            editSupplierDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_CONTACT).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            editSupplierDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            editSupplierDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        parseOffersForEdit(argMultimap.getAllValues(PREFIX_OFFER)).ifPresent(editSupplierDescriptor::setOffers);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!editSupplierDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new ParseException(EditSupplierCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new EditSupplierCommand(index, editSupplierDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e offers} into a {@code Set\u003cOffer\u003e} if {@code offers} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * If {@code offers} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * {@code Set\u003cOffer\u003e} containing zero offers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Optional\u003cSet\u003cOffer\u003e\u003e parseOffersForEdit(Collection\u003cString\u003e offers) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert offers !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (offers.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Collection\u003cString\u003e offerList \u003d offers.size() \u003d\u003d 1 \u0026\u0026 offers.contains(\"\") ? Collections.emptyList() : offers;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Optional.of(ParserUtil.parseOffers(offerList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 11,
      "-": 50,
      "PangJiaDa": 5,
      "LiuChao93": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindGoodCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindGoodCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodSupplierPairContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new FindGoodCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindGoodCommandParser implements Parser\u003cFindGoodCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindGoodCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns a FindGoodCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public FindGoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new FindGoodCommand(new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "LiuChao93": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindSupplierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindSupplierCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Parses input arguments and creates a new FindSupplierCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindSupplierCommandParser implements Parser\u003cFindSupplierCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindSupplierCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * and returns a FindSupplierCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public FindSupplierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindSupplierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new FindSupplierCommand(new SupplierNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "LiuChao93": 7,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindTransactionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.FindTransactionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Parses input arguments and creates a new FindTransactionCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class FindTransactionCommandParser implements Parser\u003cFindTransactionCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * defines the type of transaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public enum TransactionType {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BUY_TRANSACTION, SELL_TRANSACTION, EMPTY"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTransactionCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * and returns a FindTransactionCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public FindTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // find transaction by type of transaction, name of supplier, name of good."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // or any combination of the above"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // more factor -\u003e more constrain"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // if there are multiple input for name, good name, all inputs will be taken."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // preamble stores the type of transaction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionType typeOfTransaction \u003d parseTypeOfTransaction(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // name stores the name of supplier"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String[] supplierNameKeywords \u003d setKeywords(argMultimap, PREFIX_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // good name stores the name of the good"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String[] goodNameKeywords \u003d setKeywords(argMultimap, PREFIX_GOOD_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // at least one field must be provided"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (typeOfTransaction.equals(TransactionType.EMPTY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 supplierNameKeywords.length \u003d\u003d 0 \u0026\u0026 goodNameKeywords.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    FindTransactionCommand.MESSAGE_NO_FIELD_PROVIDED));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new FindTransactionCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(typeOfTransaction,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Arrays.asList(supplierNameKeywords), Arrays.asList(goodNameKeywords)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * parses values in the prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param argMultimap stores the input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param prefix can be supplier name or good name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return arrays of the individual words in the input for particular prefix, if the input is empty (which means"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * this prefix is unspecified, return an empty array"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws ParseException if the prefix is given, but the value is empty"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private String[] setKeywords(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Optional\u003cString\u003e words \u003d argMultimap.getValue(prefix);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // prefix is absent, return empty array"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!words.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new String[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // prefix is present, but the value is empty"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (words.get().equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTransactionCommand.EMPTY_VALUE_WITH_PREFIX));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // prefix is present and the value is valid"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return words.get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * parses type of transaction."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param argMultimap stores the input"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return type of transaction: buy, sell or empty(which means the type of transaction is unspecified)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws ParseException if the type of transaction is invalid"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionType parseTypeOfTransaction(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        switch (argMultimap.getPreamble().trim()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return TransactionType.EMPTY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case BuyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return TransactionType.BUY_TRANSACTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case SellCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return TransactionType.SELL_TRANSACTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    FindTransactionCommand.INVALID_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventoryManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.ClearSupplierCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodPricePairFromSupplierCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteSupplierCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindGoodCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindSupplierCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.FindTransactionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.ListSupplierCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.ListTransactionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.SetThresholdCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class InventoryManagerParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case AddSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new AddSupplierCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case EditSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new EditSupplierCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case DeleteSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new DeleteSupplierCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case DeleteGoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new DeleteGoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case DeleteGoodPricePairFromSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new DeleteGoodPricePairFromSupplierCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case FindSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new FindSupplierCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case FindGoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new FindGoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case BuyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new BuyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case SellCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return new SellCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case ClearSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new ClearSupplierCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        case ListSupplierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return new ListSupplierCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case ListTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new ListTransactionCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case SetThresholdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new SetThresholdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        case FindTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new FindTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 8,
      "FangShaoHua94": 13,
      "-": 56,
      "LiuChao93": 25,
      "PangJiaDa": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses a {@code String goodName} into a {@code goodName}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws ParseException if the given {@code goodName} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static GoodName parseGoodName(String goodName) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(goodName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String trimmedName \u003d goodName.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodName.isValidGoodName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new GoodName(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goodNames} into a {@code Set\u003cGoodName\u003e}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static Set\u003cGoodName\u003e parseGoodNames(Collection\u003cString\u003e goodNames) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireAllNonNull(goodNames);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final Set\u003cGoodName\u003e goodNameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        for (String goodName : goodNames) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            goodNameSet.add(parseGoodName(goodName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return goodNameSet;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses a {@code String offer} into a {@code Offer}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws ParseException if the given {@code offer} or its constituent is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Offer parseOffer(String offer) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(offer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String trimmedOffer \u003d offer.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!trimmedOffer.contains(\" \")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new ParseException(Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] goodPricePair \u003d splitOnLastWhitespace(trimmedOffer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String goodString \u003d goodPricePair[0];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String priceString \u003d goodPricePair[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodName good \u003d parseGoodName(goodString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Price price \u003d parsePrice(priceString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Offer(good, price);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e offers} into a {@code Set\u003cOffer\u003e}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Set\u003cOffer\u003e parseOffers(Collection\u003cString\u003e offers) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(offers);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Set\u003cOffer\u003e offerSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        for (String offer : offers) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            offerSet.add(parseOffer(offer));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return offerSet;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns a {@code String} array as if {@code String.split()} is called only on its last whitespace."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Assumes: the {@code String} is already stripped of trailing and leading whitespaces,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * and contains at least one whitespace."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param string the {@code String} to be split"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return the {@code String} array containing the split result"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static String[] splitOnLastWhitespace(String string) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] words \u003d string.split(\" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String[] result \u003d new String[2];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[0] \u003d String.join(\" \", Arrays.copyOfRange(words, 0, words.length - 1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[1] \u003d words[words.length - 1];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an Object array containing a Good and a Price in indices 0 and 1 respectively."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * It is still subject to the same validation as the class constructors, but assumes that all input is valid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * The {@code Good} and {@code Price} corresponds to the one specified in the string."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param goodAndPrice the string representation of the good and price pair"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return an {@code Object} array containing the {@code Good} and {@code Price}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Object[] getGoodPricePair(String[] goodAndPrice) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireAllNonNull((Object[]) goodAndPrice);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Object[] result \u003d new Object[2];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[0] \u003d new GoodName(goodAndPrice[0]);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        result[1] \u003d new Price(goodAndPrice[1]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses a {@code String goodQuantity} into a {@code goodQuantity}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws ParseException if the given {@code goodQuantity} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static GoodQuantity parseGoodQuantity(String goodQuantity) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(goodQuantity);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String trimmedQuantity \u003d goodQuantity.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodQuantity.isValidGoodQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new GoodQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 74,
      "-": 110,
      "PangJiaDa": 29,
      "LiuChao93": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SellCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Parses input arguments and creates a new SellCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SellCommandParser implements Parser\u003cSellCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public SellCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_PRICE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY, PREFIX_PRICE)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    SellCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        GoodQuantity goodQuantity \u003d ParserUtil.parseGoodQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new SellCommand(goodQuantity, price, index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetThresholdCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.SetThresholdCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Parses input arguments and set the warning threshold quantity for good."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SetThresholdCommandParser implements Parser\u003cSetThresholdCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SetThresholdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetThresholdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    SetThresholdCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity threshold \u003d ParserUtil.parseGoodQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new SetThresholdCommand(index, threshold);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.UniqueSupplierList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.util.Copyable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Duplicates are not allowed (by .isSameSupplier comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class AddressBook implements ReadOnlyList\u003cSupplier\u003e, Copyable\u003cAddressBook\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final UniqueSupplierList suppliers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        suppliers \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Creates an AddressBook using the Suppliers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public AddressBook(ReadOnlyList\u003cSupplier\u003e toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Replaces the contents of the supplier list with {@code suppliers}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * {@code suppliers} must not contain duplicate suppliers."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.suppliers.setSuppliers(suppliers);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cSupplier\u003e newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        setSuppliers(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Supplier-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if a supplier with the same identity as {@code supplier} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return suppliers.contains(supplier);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Adds a supplier to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void addSupplier(Supplier p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        suppliers.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Replaces the given supplier {@code target} in the list with {@code editedSupplier}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * existing supplier in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(editedSupplier);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        suppliers.setSupplier(target, editedSupplier);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void removeSupplier(Supplier key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        suppliers.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    protected UniqueSupplierList getSuppliers() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return suppliers;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public AddressBook copy() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new AddressBook(this);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return suppliers.asUnmodifiableObservableList().size() + \" suppliers\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return suppliers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                \u0026\u0026 getSuppliers().equals(((AddressBook) other).getSuppliers()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return suppliers.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 19,
      "-": 84,
      "LiuChao93": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.UniqueGoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.util.Copyable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Duplicates are not allowed (by .isSameGood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Inventory implements ReadOnlyList\u003cGood\u003e, Copyable\u003cInventory\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueGoodList goods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Creates an Inventory using the Goods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Inventory(ReadOnlyList\u003cGood\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of the good list with {@code goods}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code goods} must not contain duplicate goods."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goods.setGoods(goods);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int index(Good toFind) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return goods.indexOf(toFind);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Resets the existing data of this {@code Inventory} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cGood\u003e newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        setGoods(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Good-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a good with the same identity as {@code good} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(good);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.contains(good);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a good to the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addGood(Good p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.add(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the given good {@code target} in the list with {@code editedGood}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(editedGood);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.setGood(target, editedGood);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes {@code key} from this {@code Inventory}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void removeGood(Good key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goods.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    protected UniqueGoodList getGoods() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Inventory copy() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Inventory(this);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.asUnmodifiableObservableList().size() + \" goods\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ObservableList\u003cGood\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                \u0026\u0026 getGoods().equals(((Inventory) other).getGoods()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goods.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 15,
      "FangShaoHua94": 117,
      "PangJiaDa": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Versionable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public interface Model extends Versionable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    Predicate\u003cSupplier\u003e PREDICATE_SHOW_ALL_SUPPLIERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Predicate\u003cGood\u003e PREDICATE_SHOW_ALL_GOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Address Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void setAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cSupplier\u003e getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if a supplier with the same identity as {@code supplier} exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    boolean hasSupplier(Supplier supplier);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Deletes the given supplier."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    void deleteSupplier(Supplier target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Adds the given supplier."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * {@code supplier} must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    void addSupplier(Supplier supplier);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Replaces the given supplier {@code target} with {@code editedSupplier}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another existing supplier"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    void setSupplier(Supplier target, Supplier editedSupplier);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered supplier list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    ObservableList\u003cSupplier\u003e getFilteredSupplierList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Updates the filter of the filtered supplier list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void setInventory(ReadOnlyList\u003cGood\u003e inventory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cGood\u003e getInventory();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a good with the same identity as {@code good} exists in the inventory."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    boolean hasGood(Good good);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Deletes the given good."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must exist in the inventory."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void deleteGood(Good target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds the given good."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code good} must not already exist in the inventory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void addGood(Good good);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the zero-based index of the first occurrence of good if found, -1 otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param good to be found"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return zero based index of good to be found"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    int indexOfGood(Good good);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the given good {@code target} with {@code editedGood}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the inventory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setGood(Good target, Good editedGood);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered good list */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cGood\u003e getFilteredGoodList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Updates the filter of the filtered good list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void updateFilteredGoodList(Predicate\u003cGood\u003e predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the user prefs\u0027 transaction history file path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the user prefs\u0027 transaction history file path."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void setTransactionHistoryFilePath(Path transactionHistoryFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces transaction history data with the data in {@code transactionHistory}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void setTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns the transaction history */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ReadOnlyList\u003cTransaction\u003e getTransactionHistory();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a person with the same identity as {@code transaction} exists in the transaction history."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The transaction must exist in the transaction history."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds the given transaction."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code transaction} must not already exist in the transaction history."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 8,
      "FangShaoHua94": 102,
      "-": 73,
      "LiuChao93": 18,
      "PangJiaDa": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final VersionedAddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final VersionedInventory inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final VersionedTransactionHistory transactionHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final FilteredList\u003cSupplier\u003e filteredSuppliers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final FilteredList\u003cGood\u003e filteredGoods;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, inventory, transaction history and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ModelManager(ReadOnlyList\u003cSupplier\u003e addressBook, ReadOnlyList\u003cGood\u003e inventory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        ReadOnlyList\u003cTransaction\u003e transactionHistory, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(addressBook, inventory, transactionHistory, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                + \", inventory: \" + inventory"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                + \", transaction history: \" + transactionHistory"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.addressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.inventory \u003d new VersionedInventory(inventory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.transactionHistory \u003d new VersionedTransactionHistory(transactionHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        filteredSuppliers \u003d new FilteredList\u003c\u003e(this.addressBook.getReadOnlyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        filteredGoods \u003d new FilteredList\u003c\u003e(this.inventory.getReadOnlyList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.transactionHistory.getReadOnlyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this(new AddressBook(), new Inventory(), new TransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return userPrefs.getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactionHistoryFilePath(Path transactionHistoryFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transactionHistoryFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setTransactionHistoryFilePath(transactionHistoryFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void setAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return addressBook.hasSupplier(supplier);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.removeSupplier(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.addSupplier(supplier);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireAllNonNull(target, editedSupplier);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.setSupplier(target, editedSupplier);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void setInventory(ReadOnlyList\u003cGood\u003e inventory) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventory.resetData(inventory);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cGood\u003e getInventory() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(good);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory.hasGood(good);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void deleteGood(Good target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.removeGood(target);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addGood(Good good) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(good);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return inventory.index(good);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(target, editedGood);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.setGood(target, editedGood);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void setTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionHistory.resetData(transactionHistory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ReadOnlyList\u003cTransaction\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistory;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistory.hasTransaction(transaction);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.removeTransaction(target);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.addTransaction(transaction);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Supplier List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Supplier} backed by the internal list of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return filteredSuppliers;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        filteredSuppliers.setPredicate(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Good List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Good} backed by the internal list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filteredGoods;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void updateFilteredGoodList(Predicate\u003cGood\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        filteredGoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Transaction} backed by the internal list of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code versionedTransactionHistory}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioning Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        addressBook.commit();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        inventory.commit();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        transactionHistory.commit();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        addressBook.undo();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        inventory.undo();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        transactionHistory.undo();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        addressBook.redo();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        inventory.redo();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        transactionHistory.redo();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 inventory.equals(other.inventory)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 transactionHistory.equals(other.transactionHistory)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 filteredSuppliers.equals(other.filteredSuppliers)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 filteredGoods.equals(other.filteredGoods)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 46,
      "FangShaoHua94": 115,
      "-": 131,
      "LiuChao93": 20,
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Unmodifiable view of a list of objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public interface ReadOnlyList\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an unmodifiable view of the object list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * This list will not contain any duplicate object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    ObservableList\u003cT\u003e getReadOnlyList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TransactionHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.util.Copyable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Duplicates are not allowed (by .isSameTransaction comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class TransactionHistory implements ReadOnlyList\u003cTransaction\u003e, Copyable\u003cTransactionHistory\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Creates an TransactionHistory using the Transactions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public TransactionHistory(ReadOnlyList\u003cTransaction\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code transactions} must not contain duplicate transactions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Resets the existing data of this {@code TransactionHistory} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cTransaction\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        setTransactions(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the transaction history."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactions.contains(transaction);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a transaction to the transaction history."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The transaction must not already exist in the transaction history."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void addTransaction(Transaction p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactions.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes {@code key} from this {@code TransactionHistory}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code key} must exist in the transaction history."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    protected UniqueTransactionList getTransactions() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public TransactionHistory copy() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new TransactionHistory(this);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactions.asUnmodifiableObservableList().size() + \" transactions\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            || (other instanceof TransactionHistory // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            \u0026\u0026 getTransactions().equals(((TransactionHistory) other).getTransactions()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactions.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 15,
      "FangShaoHua94": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\", \"inventory.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path transactionHistoryPath \u003d Paths.get(\"data\", \"transactionHistory.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        setTransactionHistoryFilePath(newUserPrefs.getTransactionHistoryFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistoryPath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactionHistoryFilePath(Path transactionHistoryPath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transactionHistoryPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionHistoryPath \u003d transactionHistoryPath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 transactionHistoryPath.equals(o.transactionHistoryPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, inventoryFilePath, transactionHistoryPath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sb.append(\"\\nLocal address book data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sb.append(\"\\nLocal inventory data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sb.append(\"\\nLocal transaction history data file location : \" + transactionHistoryPath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 29,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.LinearHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Version;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Versionable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * An {@code AddressBook} that keeps track of its history. Snapshots of its state are done based on external commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedAddressBook extends AddressBook implements Versionable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Version\u003cAddressBook\u003e version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedAddressBook with an empty initial state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedAddressBook() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedAddressBook with an initial state containing the list of {@code Supplier} in the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * {@code toBeCopied}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedAddressBook(ReadOnlyList\u003cSupplier\u003e toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new AddressBook(toBeCopied));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cSupplier\u003e newData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().resetData(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Supplier-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return version.getCurrentState().hasSupplier(supplier);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void addSupplier(Supplier p) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().addSupplier(p);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().setSupplier(target, editedSupplier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void removeSupplier(Supplier key) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().removeSupplier(key);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioning Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.commit();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.undo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.redo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedSuppliers();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Updates the list of suppliers to be shown in the UI."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void updateDisplayedSuppliers() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super.resetData(version.getCurrentState());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.LinearHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Version;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Versionable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * An {@code Inventory} that keeps track of its history. Snapshots of its state are done based on external commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedInventory extends Inventory implements Versionable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Version\u003cInventory\u003e version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedInventory with an empty initial state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedInventory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new Inventory());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedInventory with an initial state containing the list of {@code Good} in the {@code toBeCopied}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedInventory(ReadOnlyList\u003cGood\u003e toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new Inventory(toBeCopied));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cGood\u003e newData) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Good-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return version.getCurrentState().hasGood(good);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public int index(Good toFind) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return version.getCurrentState().index(toFind);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void addGood(Good p) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().addGood(p);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().setGood(target, editedGood);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void removeGood(Good key) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().removeGood(key);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioning Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.commit();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.undo();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.redo();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedGoods();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Updates the list of suppliers to be shown in the UI."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void updateDisplayedGoods() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super.resetData(version.getCurrentState());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTransactionHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.LinearHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Version;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.Versionable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * A {@code TransactionHistory} that keeps track of its history. Snapshots of its state are done based on external"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedTransactionHistory extends TransactionHistory implements Versionable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Version\u003cTransactionHistory\u003e version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedTransactionHistory with an empty initial state."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedTransactionHistory() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new TransactionHistory());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a VersionedTransactionHistory with an initial state containing the list of {@code Transaction}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * in the {@code toBeCopied}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public VersionedTransactionHistory(ReadOnlyList\u003cTransaction\u003e toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version \u003d new LinearHistory\u003c\u003e(new TransactionHistory(toBeCopied));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData(ReadOnlyList\u003cTransaction\u003e newData) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().resetData(newData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction-Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return version.getCurrentState().hasTransaction(transaction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void addTransaction(Transaction p) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().addTransaction(p);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.getCurrentState().removeTransaction(key);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioning Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.commit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.undo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        version.redo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        updateDisplayedTransactions();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Updates the list of suppliers to be shown in the UI."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void updateDisplayedTransactions() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super.resetData(version.getCurrentState());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/Good.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.good.GoodQuantity.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good in the inventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Method summary:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Currently, the good class works as empty object for the inventory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * More methods may be added to enhance the functionality."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Good {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Good should contain valid good name and valid good quantity.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final GoodName goodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final GoodQuantity goodQuantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final GoodQuantity threshold;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructor for creating a complete Good class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodName name of good"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodQuantity quantity of good"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param threshold threshold quantity before warning"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Good(GoodName goodName, GoodQuantity goodQuantity, GoodQuantity threshold) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireAllNonNull(goodName, goodQuantity, threshold);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d goodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d goodQuantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructor for creating a new good entry. It will have the given goodName and goodQuantity,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * but start with the default threshold value of o"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodName name of good"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodQuantity quantity of good"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return Good created with the given good name and quantity, but with a threshold of 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static Good newGoodEntry(GoodName goodName, GoodQuantity goodQuantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireAllNonNull(goodName, goodQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new Good(goodName, goodQuantity, new GoodQuantity(DEFAULT_QUANTITY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns a Good that has the given goodName. This is mainly for querying the existence of"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * a good in the inventory, where only the goodName is checked, and other fields are redundant."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodName name of good"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return Good created with the given good name, but a default good quantity and threshold value of 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static Good goodWithName(GoodName goodName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(goodName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new Good(goodName, new GoodQuantity(DEFAULT_QUANTITY), new GoodQuantity(DEFAULT_QUANTITY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodName getGoodName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodQuantity getGoodQuantity() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodQuantity;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given good is a valid good."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidGood(Good test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return GoodName.isValidGoodName(test.getGoodName().toString())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 GoodQuantity.isValidGoodQuantity(test.getGoodQuantity().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodQuantity getThreshold() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Checks whether the quantity of the good is lower or equal to the threshold."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return true if lower than or equals to the threshold."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isNoMoreThanThresholdQuantity() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return getGoodQuantity().goodQuantity \u003c\u003d getThreshold().goodQuantity;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if both goods have the same name."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isSameGood(Good otherGood) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (otherGood \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherGood !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherGood.getGoodName().equals(getGoodName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof Good)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good otherGood \u003d (Good) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherGood.getGoodName().equals(getGoodName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherGood.getGoodQuantity().equals(getGoodQuantity())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherGood.getThreshold().equals(getThreshold());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(goodName, goodQuantity, threshold);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        builder.append(getGoodName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .append(\" Quantity: \" + goodQuantity)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .append(\" Threshold: \" + threshold);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 28,
      "FangShaoHua94": 71,
      "PangJiaDa": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good\u0027s name in the inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGoodName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Good\u0027s name should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \"and it should not be blank or fully number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The first character of the good name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final String fullGoodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code GoodName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param name A valid good name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        checkArgument(isValidGoodName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        fullGoodName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given string is a valid good name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidGoodName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Float.parseFloat(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (NumberFormatException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return fullGoodName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodName // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 fullGoodName.equals(((GoodName) other).fullGoodName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return fullGoodName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Tests that a {@code Good}\u0027s {@code GoodName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameContainsKeywordsPredicate implements Predicate\u003cGood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean test(Good good) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(good.getGoodName().fullGoodName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 keywords.equals(((GoodNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Good\u0027s quantity in the inventory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGoodQuantity(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodQuantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \"Good\u0027s quantity should only contain numeric characters that is greater than or equals to zero and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    + \"less than 1 million. It should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Only accept non-negative integers"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    // digits can only be 1 to 9 characters long, for a value of 0 - 999,999"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,6}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final int goodQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructs a {@code GoodQuantity} from an int."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public GoodQuantity(int quantity) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        checkArgument(isValidGoodQuantity(String.valueOf(quantity)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructs a {@code GoodQuantity} from a string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param quantity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public GoodQuantity(String quantity) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        checkArgument(isValidGoodQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        goodQuantity \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns true if a given string is a valid good quantity."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static boolean isValidGoodQuantity(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Integer.toString(goodQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof GoodQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 goodQuantity \u003d\u003d (((GoodQuantity) other).goodQuantity)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Integer.toString(goodQuantity).hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 46,
      "PangJiaDa": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/GoodSupplierPairContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Tests that a {@code Supplier}\u0027s good\u0027s {@code goodName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class GoodSupplierPairContainsKeywordsPredicate implements Predicate\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public GoodSupplierPairContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean test(Supplier supplier) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(supplier.getOffers().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof GoodSupplierPairContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 keywords.equals(((GoodSupplierPairContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/UniqueGoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.GoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A list of goods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A good is considered unique by comparing using {@code Good#isSameGood(Good)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * suppliers uses Good#isSameGood(Good) for equality so as to ensure that the good being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * unique in terms of identity in the UniqueGoodList. However, the removal of a good uses Good#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * as to ensure that the good with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * @see Good#isSameGood(Good)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueGoodList implements Iterable\u003cGood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cGood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cGood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if the list contains an equivalent good as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean contains(Good toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return internalList.stream().anyMatch(good -\u003e good.isSameGood(toCheck));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a good to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add(Good toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the good {@code target} in the list with {@code editedGood}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good identity of {@code editedGood} must not be the same as another existing good in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(target, editedGood);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new GoodNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!target.isSameGood(editedGood) \u0026\u0026 contains(editedGood)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.set(index, editedGood);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes the equivalent good from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The good must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove(Good toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new GoodNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(UniqueGoodList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of this list with {@code goods}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code goods} must not contain duplicate goods."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(goods);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!goodsAreUnique(goods)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateGoodException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(goods);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sorts the good based on whether the good has quantity lower than its threshold. If the good has a quantity that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * is lower than threshold, then it will be at a lower index. So there will be two sets of goods: \"lower than"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * or equals to threshold\" or \"more than threshold\". Within \"lower or equals to threshold\" set, the order is based"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * on when the threshold was set. Within \"more than threshold\" set, the order is based on when is the good added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * into the inventory."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.sort((a, b) -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                a.isNoMoreThanThresholdQuantity() ? -1 : b.isNoMoreThanThresholdQuantity() ? 1 : -1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cGood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Iterator\u003cGood\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof UniqueGoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGoodList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if {@code suppliers} contains only unique suppliers."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean goodsAreUnique(List\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (int i \u003d 0; i \u003c goods.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            for (int j \u003d i + 1; j \u003c goods.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                if (goods.get(i).isSameGood(goods.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns the index of the first occurrence of the specified element in this list,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * or -1 if this list does not contain the element, Used to find the index of an existing good"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * so it\u0027s quantity can be retreived."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param toFind good to be found"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return index of good to be found in the internal list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int indexOf(Good toFind) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); ++i) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            if (internalList.get(i).isSameGood(toFind)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 148,
      "LiuChao93": 2,
      "PangJiaDa": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/exceptions/DuplicateGoodException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation will result in duplicate Goods (Goods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class DuplicateGoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public DuplicateGoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation would result in duplicate goods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/good/exceptions/GoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation is unable to find the specified good."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation can not find the specific good.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/offer/Offer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents an offer given by a supplier for supplying a certain good at a certain price."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Offer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Offer must consist of a valid good name and a valid price, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"separated by a whitespace\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private final GoodName goodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs an {@code Offer}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param goodName the good to be offered"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param price the price of the good in the offer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Offer(GoodName goodName, Price price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        requireAllNonNull(goodName, price);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.goodName \u003d goodName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public GoodName getGoodName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return goodName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given offer is a valid offer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidOffer(Offer offer) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return GoodName.isValidGoodName(offer.getGoodName().toString())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 Price.isValidPrice(offer.getPrice().getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"Good: \" + goodName + \" | Price: \" + price;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d (Offer) o;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return getGoodName().equals(offer.getGoodName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return Objects.hash(getGoodName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 34,
      "FangShaoHua94": 7,
      "-": 18,
      "PangJiaDa": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/offer/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents a price for a {@code Good} in buying or selling of goods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price should only be\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"1. a positive number with\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"2. at most 2 digits after the decimal point and\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"3. at most 10 digits before the decimal point and\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            + \"4. no special characters, including the dollar sign.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,10}(\\\\.(\\\\d{0,2})?)?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"1.0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    final long centValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs a {@code Price}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param dollars the string representation of the price in dollars"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Price(String dollars) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(dollars);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        checkArgument(isValidPrice(dollars), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        centValue \u003d parseCents(dollars);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns the value in cents of the given value in dollars."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param dollars the string representation of the value in dollars"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return the value in cents"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private long parseCents(String dollars) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // rounding is necessary due to floating point approximation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        double dollarValue \u003d Double.parseDouble(dollars);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Math.round(dollarValue * 100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns the value of the price in cents for accurate calculations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public long getCentValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return centValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return String.format(\"%d.%02d\", centValue / 100, centValue % 100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns if a given string is a valid price."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Price price \u003d (Price) o;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return getValue().equals(price.getValue());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return String.format(\"$%d.%02d\", centValue / 100, centValue % 100);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 66,
      "FangShaoHua94": 14,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Represents a Supplier\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "LiuChao93": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Represents a Supplier\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "LiuChao93": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Represents a Supplier\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Supplier\u0027s name should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    + \"and it should not be blank or fully number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Default Name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Float.parseFloat(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (NumberFormatException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 6,
      "-": 57,
      "LiuChao93": 2,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Represents a Supplier\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "LiuChao93": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/Supplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Represents a Supplier in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class Supplier {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Person should consist of valid name, phone, email, address and tags.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Set\u003cOffer\u003e offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public Supplier(Name name, Phone phone, Email email, Address address, Set\u003cOffer\u003e offers) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireAllNonNull(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.offers.addAll(offers);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an immutable offer set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Set\u003cOffer\u003e getOffers() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Collections.unmodifiableSet(offers);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given person is a valid person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidSupplier(Supplier test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Name.isValidName(test.getName().toString())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 Phone.isValidPhone(test.getPhone().toString())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 Email.isValidEmail(test.getEmail().toString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 Address.isValidAddress(test.getAddress().toString())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 test.getOffers().stream().allMatch(offer -\u003e Offer.isValidOffer(offer));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if both suppliers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * This defines a weaker notion of equality between two suppliers."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean isSameSupplier(Supplier otherSupplier) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (otherSupplier \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return otherSupplier !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 otherSupplier.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 (otherSupplier.getPhone().equals(getPhone()) || otherSupplier.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if both suppliers have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * This defines a stronger notion of equality between two suppliers."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!(other instanceof Supplier)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier otherSupplier \u003d (Supplier) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return otherSupplier.getName().equals(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 otherSupplier.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 otherSupplier.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 otherSupplier.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 otherSupplier.getOffers().equals(getOffers());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return Objects.hash(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .append(\" Offers: \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        getOffers().forEach(builder::append);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 12,
      "FangShaoHua94": 15,
      "-": 88,
      "LiuChao93": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/SupplierNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Tests that a {@code Supplier}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SupplierNameContainsKeywordsPredicate implements Predicate\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public SupplierNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean test(Supplier supplier) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(supplier.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                || (other instanceof SupplierNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \u0026\u0026 keywords.equals(((SupplierNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "LiuChao93": 4,
      "PangJiaDa": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/UniqueSupplierList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.exceptions.SupplierNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A list of suppliers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A supplier is considered unique by comparing using {@code Supplier#isSameSupplier(Supplier)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * and updating of suppliers uses Supplier#isSameSupplier(Supplier) for equality so as to ensure that the supplier"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueSupplierList. However, the removal of a supplier"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * uses Supplier#equals(Object) so as to ensure that the supplier with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * @see Supplier#isSameSupplier(Supplier)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class UniqueSupplierList implements Iterable\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final ObservableList\u003cSupplier\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final ObservableList\u003cSupplier\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if the list contains an equivalent supplier as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean contains(Supplier toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSupplier);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Adds a supplier to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void add(Supplier toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Replaces the supplier {@code target} in the list with {@code editedSupplier}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another existing supplier in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireAllNonNull(target, editedSupplier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new SupplierNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!target.isSameSupplier(editedSupplier) \u0026\u0026 contains(editedSupplier)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        internalList.set(index, editedSupplier);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Removes the equivalent supplier from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * The supplier must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void remove(Supplier toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new SupplierNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers(UniqueSupplierList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Replaces the contents of this list with {@code suppliers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * {@code suppliers} must not contain duplicate suppliers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        requireAllNonNull(suppliers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!suppliersAreUnique(suppliers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        internalList.setAll(suppliers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public ObservableList\u003cSupplier\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public Iterator\u003cSupplier\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                || (other instanceof UniqueSupplierList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueSupplierList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns true if {@code suppliers} contains only unique suppliers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private boolean suppliersAreUnique(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        for (int i \u003d 0; i \u003c suppliers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            for (int j \u003d i + 1; j \u003c suppliers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                if (suppliers.get(i).isSameSupplier(suppliers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/exceptions/DuplicateSupplierException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Signals that the operation will result in duplicate Suppliers (Suppliers are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DuplicateSupplierException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DuplicateSupplierException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        super(\"Operation would result in duplicate suppliers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/supplier/exceptions/SupplierNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Signals that the operation is unable to find the specified supplier."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        super(\"supplier could not be found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/BuyTransaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a BuyTransaction in the transaction history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class BuyTransaction extends Transaction {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Supplier supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Price buyPrice;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransaction(TransactionId transactionId, Good good, Supplier supplier, Price buyPrice) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(transactionId, good);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(supplier, buyPrice);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.buyPrice \u003d buyPrice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Supplier getSupplier() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return supplier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Price getBuyPrice() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return buyPrice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if both buy transactions have id ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * This defines a weaker notion of equality between two buy transactions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isSameBuyTransaction(BuyTransaction otherBuyTransaction) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (otherBuyTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherBuyTransaction !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherBuyTransaction.getId().equals(getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof BuyTransaction)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction otherBuyTransaction \u003d (BuyTransaction) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherBuyTransaction.getId().equals(getId())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherBuyTransaction.getGood().equals(getGood())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherBuyTransaction.getSupplier().equals(getSupplier())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherBuyTransaction.getBuyPrice().equals(getBuyPrice());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(getId(), getGood(), getSupplier(), getBuyPrice());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        builder.append(getId())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(getGood())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(getSupplier())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(getBuyPrice());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/SellTransaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a SellTransaction in the transaction history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SellTransaction extends Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Price sellPrice;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransaction(TransactionId transactionId, Good good, Price sellPrice) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(transactionId, good);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(sellPrice);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.sellPrice \u003d sellPrice;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Price getSellPrice() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return sellPrice;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if both sell transactions have id ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * This defines a weaker notion of equality between two sell transactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isSameSellTransaction(SellTransaction otherSellTransaction) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (otherSellTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherSellTransaction !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherSellTransaction.getId().equals(getId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof SellTransaction)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SellTransaction otherSellTransaction \u003d (SellTransaction) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherSellTransaction.getId().equals(getId())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherSellTransaction.getGood().equals(getGood())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherSellTransaction.getSellPrice().equals(getSellPrice());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return Objects.hash(getId(), getGood(), getSellPrice());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        builder.append(getId())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(getGood())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .append(getSellPrice());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Transaction in the transaction history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final TransactionId transactionId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Good good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Transaction(TransactionId transactionId, Good good) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(transactionId, good);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionId \u003d transactionId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionId getId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good getGood() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return good;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if both transaction have the same id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean isSameTransaction(Transaction otherTransaction) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (otherTransaction \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return otherTransaction !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 otherTransaction.getId().equals(getId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionContainKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.parser.FindTransactionCommandParser.TransactionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Tests that a {@code Transaction} matches any of the conditions given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionContainKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private List\u003cString\u003e supplierNameKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private List\u003cString\u003e goodNameKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionContainKeywordsPredicate(TransactionType transactionType,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                                               List\u003cString\u003e supplierNameKeywords, List\u003cString\u003e goodNameKeywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(transactionType, supplierNameKeywords, goodNameKeywords);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.supplierNameKeywords \u003d supplierNameKeywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodNameKeywords \u003d goodNameKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // fulfill all 3 tests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return testTransactionType(transaction)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 testSupplierName(transaction)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 testGoodName(transaction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * filters valid transaction by transaction type."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param transaction to be filtered."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return true if the transactionType is unspecified or the type of transaction matches the transactionType."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean testTransactionType(Transaction transaction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // transactionType unspecified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (transactionType.equals(TransactionType.EMPTY)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // type of transaction matches the transactionType"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return (transactionType.equals(TransactionType.BUY_TRANSACTION) \u0026\u0026 transaction instanceof BuyTransaction)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (transactionType.equals(TransactionType.SELL_TRANSACTION) \u0026\u0026 transaction instanceof SellTransaction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * filters valid transaction by supplier name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param transaction must be buy transaction to have a supplier."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return true if the supplier name is unspecified or the buy transaction contains supplier that have name that"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * partial matches the keyword in supplierName."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean testSupplierName(Transaction transaction) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // supplier name is unspecified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (supplierNameKeywords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // transaction type is invalid, since sellTransaction does not have a supplier"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (transaction instanceof SellTransaction) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid transaction type with partial matching supplier name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction buyTransaction \u003d (BuyTransaction) transaction;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return supplierNameKeywords.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                                buyTransaction.getSupplier().getName().fullName, keyword));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * filters valid transaction by good name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param transaction to be filtered."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @return true if the good name is unspecified or the transaction contains good that have good name that"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * partial matches the keyword in goodName."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean testGoodName(Transaction transaction) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // goodName is unspecified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (goodNameKeywords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // goodName partial matches"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodNameKeywords.stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        transaction.getGood().getGoodName().fullGoodName, keyword));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof TransactionContainKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 transactionType.equals(((TransactionContainKeywordsPredicate) other).transactionType))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 supplierNameKeywords.equals(((TransactionContainKeywordsPredicate) other).supplierNameKeywords)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 goodNameKeywords.equals(((TransactionContainKeywordsPredicate) other).goodNameKeywords);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a Transaction\u0027s id in the transaction history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTransactionId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"Transaction id should only contain numbers and dashes, and it can not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // [a-fA-F0-9] \u003d\u003d (a-f or A-F or 0-9)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // 8 of [a-fA-F0-9] follow by 1 dash, then 4 of [a-fA-F0-9] follow by a dash..."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private String transactionId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code transactionId}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param transactionId A valid id number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionId(String transactionId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transactionId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        checkArgument(isValidTransactionId(transactionId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionId \u003d transactionId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String getTransactionId() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if a given string is a valid transaction id."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static boolean isValidTransactionId(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                || (other instanceof TransactionId // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 transactionId.equals(((TransactionId) other).transactionId)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionId.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueTransactionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A list of transactions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A transaction is considered unique by comparing using {@code Transaction#isSameTransaction(Transaction)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * As such, adding  of transactions uses Transaction#isSameTransaction(Transaction) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * so as to ensure that the transaction being added is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * UniqueTransactionList. However, the removal of a transaction uses Transaction#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * as to ensure that the transaction with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * @see Transaction#isSameTransaction(Transaction)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueTransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTransaction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a transaction to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The transaction must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions(UniqueTransactionList replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code transactions} must not contain duplicate transactions."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!transactionsAreUnique(transactions)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            || (other instanceof UniqueTransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTransactionList) other).internalList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns true if {@code transactions} contains only unique transactions."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private boolean transactionsAreUnique(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size() - 1; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            for (int j \u003d i + 1; j \u003c transactions.size(); j++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                if (transactions.get(i).isSameTransaction(transactions.get(j))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateTransactionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation will result in duplicate Transactions (Transactions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class DuplicateTransactionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public DuplicateTransactionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation would result in duplicate transactions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(\"Operation can not find the specific good.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Copyable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents an object that can produce its independent copy."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public interface Copyable\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public T copy();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Contains utility methods for populating {@code AddressBook}, {@code Inventory}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * and {@code TransactionHistory} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Supplier \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier ALEX \u003d new Supplier(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"banana 4.5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier BERNICE \u003d new Supplier(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"toilet paper 2\", \"tissue 70.50\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier CHARLOTTE \u003d new Supplier(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"hand sanitiser 3.25\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier DAVID \u003d new Supplier(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"instant noodle 0.45\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier IRFAN \u003d new Supplier(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"facial mask 5.75\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier ROY \u003d new Supplier(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getOfferSet(\"apple 50.3\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Good \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good APPLE \u003d Good.newGoodEntry(new GoodName(\"Fuji apple\"), new GoodQuantity(15));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good BANANA \u003d Good.newGoodEntry(new GoodName(\"Cavendish banana\"), new GoodQuantity(150));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good TOILET_PAPER \u003d Good.newGoodEntry(new GoodName(\"Toilet paper\"), new GoodQuantity(2000));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good TISSUE \u003d Good.newGoodEntry(new GoodName(\"Tissue\"), new GoodQuantity(20000));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good HAND_SANITISER \u003d Good.newGoodEntry(new GoodName(\"Hand sanitiser\"), new GoodQuantity(2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good INSTANT_NOODLE \u003d Good.newGoodEntry(new GoodName(\"Instant noodle\"), new GoodQuantity(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good FACIAL_MASK \u003d Good.newGoodEntry(new GoodName(\"Facial mask\"), new GoodQuantity(100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final BuyTransaction BUY_APPLE \u003d new BuyTransaction(new TransactionId(UUID.randomUUID().toString()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            APPLE, ROY, new Price(\"50.3\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final BuyTransaction BUY_TOILET_PAPER \u003d new BuyTransaction("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionId(UUID.randomUUID().toString()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            TOILET_PAPER, BERNICE, new Price(\"70.50\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final BuyTransaction BUY_BANANA \u003d new BuyTransaction(new TransactionId(UUID.randomUUID().toString()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            BANANA, ALEX, new Price(\"4.50\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final BuyTransaction BUY_TISSUE \u003d new BuyTransaction(new TransactionId(UUID.randomUUID().toString()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            TISSUE, BERNICE, new Price(\"2\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final SellTransaction SELL_INSTANT_NOODLE \u003d new SellTransaction("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionId(UUID.randomUUID().toString()), INSTANT_NOODLE, new Price(\"6\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final SellTransaction SELL_FACIAL_MASK \u003d new SellTransaction("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionId(UUID.randomUUID().toString()), FACIAL_MASK, new Price(\"60.50\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final SellTransaction SELL_HAND_SANITISER \u003d new SellTransaction("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionId(UUID.randomUUID().toString()), HAND_SANITISER, new Price(\"6.50\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static Supplier[] getSampleSuppliers() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new Supplier[]{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            ALEX, BERNICE, CHARLOTTE, DAVID, IRFAN, ROY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static Good[] getSampleGoods() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good[]{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            APPLE, BANANA, TOILET_PAPER, TISSUE, HAND_SANITISER, INSTANT_NOODLE, FACIAL_MASK"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static Transaction[] getSampleTransactions() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Transaction[]{"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            BUY_APPLE, SELL_INSTANT_NOODLE, SELL_HAND_SANITISER, BUY_TOILET_PAPER, SELL_FACIAL_MASK,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            BUY_BANANA, BUY_TISSUE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static ReadOnlyList\u003cSupplier\u003e getSampleAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        for (Supplier sampleSupplier : getSampleSuppliers()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            sampleAb.addSupplier(sampleSupplier);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static ReadOnlyList\u003cGood\u003e getSampleInventory() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory sampleInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (Good sampleGood : getSampleGoods()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            sampleInventory.addGood(sampleGood);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return sampleInventory;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static ReadOnlyList\u003cTransaction\u003e getSampleTransactionHistory() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory sampleTransactionHistory \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (Transaction sampleTransaction : getSampleTransactions()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            sampleTransactionHistory.addTransaction(sampleTransaction);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return sampleTransactionHistory;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns an offer set containing the set of strings given."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static Set\u003cOffer\u003e getOfferSet(String... strings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::splitOnLastWhitespace)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(ParserUtil::getGoodPricePair)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(x -\u003e new Offer((GoodName) x[0], (Price) x[1]))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 13,
      "FangShaoHua94": 100,
      "-": 25,
      "LiuChao93": 9,
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/version/LinearHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.version;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.util.Copyable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * An implementation of Version with a linear list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * @param \u003cT\u003e a class that can produce independent copies"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class LinearHistory\u003cT extends Copyable\u003cT\u003e\u003e implements Version\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private T currentState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private List\u003cT\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private int statePointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Creates a {@code LinearHistory} with a starting state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @param object the initial state"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public LinearHistory(T object) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        history.add(object);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        currentState \u003d object.copy();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        statePointer \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert currentState !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        history \u003d history.subList(0, statePointer + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        history.add(getCurrentState().copy());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        statePointer++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert history.contains(currentState);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            T previousState \u003d history.get(statePointer - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            statePointer--;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            assert previousState !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            currentState \u003d previousState.copy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new StateNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert currentState !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            T nextState \u003d history.get(statePointer + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            statePointer++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            assert nextState !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            currentState \u003d nextState.copy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new StateNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert currentState !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public T getCurrentState() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assert currentState !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return currentState;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/version/StateNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.version;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Signals that the operation is trying to go to a state that does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class StateNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public StateNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        super(\"Attempting to go to a state that does not exist\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/version/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.version;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents a collection of the states of an object at different points in time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public interface Version\u003cT\u003e extends Versionable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public T getCurrentState();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void undo() throws StateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void redo() throws StateNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/version/Versionable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.version;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Represents an object that is able to save its current state and return to the previous state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public interface Versionable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Saves the current state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns to the previous saved state."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws StateNotFoundException if currently at the first saved state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo() throws StateNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns to the previously undone state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws StateNotFoundException if currently at the latest state."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo() throws StateNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyList}\u0026lt;Person\u0026gt;."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Saves the given {@link ReadOnlyList}\u0026lt;Person\u0026gt; to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 9,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyList}\u0026lt;Good\u0026gt;."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Saves the given {@link ReadOnlyList}\u0026lt;Good\u0026gt; to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveInventory(ReadOnlyList\u003cGood\u003e inventory) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @see #saveInventory(ReadOnlyList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveInventory(ReadOnlyList\u003cGood\u003e inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 9,
      "FangShaoHua94": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Jackson-friendly version of {@link Good}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "class JsonAdaptedGood {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Good\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final String goodName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final int goodQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final int threshold;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code JsonAdaptedGood} with the given good details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedGood(@JsonProperty(\"goodName\") String goodName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           @JsonProperty(\"goodQuantity\") int goodQuantity,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           @JsonProperty(\"threshold\") int threshold) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d goodName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d goodQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts a given {@code Good} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedGood(Good source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d source.getGoodName().fullGoodName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d source.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        threshold \u003d source.getThreshold().goodQuantity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this Jackson-friendly adapted good object into the model\u0027s {@code Good} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted good."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (goodName \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    GoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!GoodName.isValidGoodName(goodName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final GoodName modelGoodName \u003d new GoodName(goodName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (!GoodQuantity.isValidGoodQuantity(String.valueOf(goodQuantity))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final GoodQuantity modelGoodQuantity \u003d new GoodQuantity(goodQuantity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!GoodQuantity.isValidGoodQuantity(String.valueOf(threshold))) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final GoodQuantity modelThreshold \u003d new GoodQuantity(threshold);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good(modelGoodName, modelGoodQuantity, modelThreshold);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 71,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOffer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Jackson-friendly version of {@link Offer}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "class JsonAdaptedOffer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Offer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final String good;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Constructs a {@code JsonAdaptedOffer} with the given {@code good} and {@price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonAdaptedOffer(@JsonProperty(\"good\") String good, @JsonProperty(\"price\") String price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts a given {@code Offer} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonAdaptedOffer(Offer source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        good \u003d source.getGoodName().fullGoodName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        price \u003d source.getPrice().getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts this Jackson-friendly adapted offer object into the model\u0027s {@code Offer} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted offer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Offer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (good \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    GoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!GoodName.isValidGoodName(good)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final GoodName modelGood \u003d new GoodName(good);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return new Offer(modelGood, modelPrice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 37,
      "-": 26,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSupplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Jackson-friendly version of {@link Supplier}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "class JsonAdaptedSupplier {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Supplier\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private final Set\u003cJsonAdaptedOffer\u003e offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Constructs a {@code JsonAdaptedSupplier} with the given supplier details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public JsonAdaptedSupplier(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                               @JsonProperty(\"offers\") Set\u003cJsonAdaptedOffer\u003e offers) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (offers !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            this.offers.addAll(offers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Converts a given {@code Supplier} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public JsonAdaptedSupplier(Supplier source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offers.addAll(source.getOffers().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .map(JsonAdaptedOffer::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Converts this Jackson-friendly adapted supplier object into the model\u0027s {@code Supplier} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted supplier."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public Supplier toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final Set\u003cOffer\u003e supplierOffers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        for (JsonAdaptedOffer offer : offers) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            supplierOffers.add(offer.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final Set\u003cOffer\u003e modelOffers \u003d new HashSet\u003c\u003e(supplierOffers);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new Supplier(modelName, modelPhone, modelEmail, modelAddress, modelOffers);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 9,
      "-": 79,
      "LiuChao93": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTransaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final JsonAdaptedGood good;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final JsonAdaptedSupplier supplier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"type\") String type, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                                  @JsonProperty(\"good\") JsonAdaptedGood good, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                                  @JsonProperty(\"supplier\") JsonAdaptedSupplier supplier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        good \u003d new JsonAdaptedGood(source.getGood());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (source instanceof BuyTransaction) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            type \u003d BuyTransaction.class.getSimpleName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            BuyTransaction buyTransaction \u003d (BuyTransaction) source;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            supplier \u003d new JsonAdaptedSupplier(buyTransaction.getSupplier());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            price \u003d buyTransaction.getBuyPrice().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            type \u003d SellTransaction.class.getSimpleName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            SellTransaction sellTransaction \u003d (SellTransaction) source;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            price \u003d sellTransaction.getSellPrice().getValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            supplier \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into the model\u0027s {@code Transaction} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    TransactionId.class.getSimpleName())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!TransactionId.isValidTransactionId(id)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(TransactionId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final TransactionId modelId \u003d new TransactionId(id);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (good \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Good.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!Good.isValidGood(good.toModelType())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(Good.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (type.equals(SellTransaction.class.getSimpleName())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return new SellTransaction(new TransactionId(id), good.toModelType(), modelPrice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (supplier \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    Supplier.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!Supplier.isValidSupplier(supplier.toModelType())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new IllegalValueException(Supplier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new BuyTransaction(modelId, good.toModelType(), supplier.toModelType(), modelPrice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveInventory(ReadOnlyList\u003cGood\u003e inventory) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveInventory(ReadOnlyList\u003cGood\u003e inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "FangShaoHua94": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"Suppliers list contains duplicate supplier(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final List\u003cJsonAdaptedSupplier\u003e suppliers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given suppliers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"suppliers\") List\u003cJsonAdaptedSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.suppliers.addAll(suppliers);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts a given {@code ReadOnlyList\u003cPerson\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyList\u003cSupplier\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        suppliers.addAll(source.getReadOnlyList().stream().map(JsonAdaptedSupplier::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        for (JsonAdaptedSupplier jsonAdaptedSupplier : suppliers) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            Supplier supplier \u003d jsonAdaptedSupplier.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (addressBook.hasSupplier(supplier)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            addressBook.addSupplier(supplier);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "-": 45,
      "LiuChao93": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "@JsonRootName(value \u003d \"inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GOOD \u003d \"Goods list contains duplicate good(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final List\u003cJsonAdaptedGood\u003e goods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given goods."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"goods\") List\u003cJsonAdaptedGood\u003e goods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goods.addAll(goods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Converts a given {@code ReadOnlyList\u003cGood\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyList\u003cGood\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        goods.addAll(source.getReadOnlyList().stream().map(JsonAdaptedGood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (JsonAdaptedGood jsonAdaptedGood : goods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Good good \u003d jsonAdaptedGood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (inventory.hasGood(good)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            inventory.addGood(good);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "FangShaoHua94": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTransactionHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An Immutable TransactionHistory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "@JsonRootName(value \u003d \"transactionHistory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "class JsonSerializableTransactionHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"Transactions list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Constructs a {@code JsonSerializableTransactionHistory} with the given transactions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonSerializableTransactionHistory(@JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts a given {@code ReadOnlyTransactionHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTransactionHistory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public JsonSerializableTransactionHistory(ReadOnlyList\u003cTransaction\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        transactions.addAll(source.getReadOnlyList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .stream().map(JsonAdaptedTransaction::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Converts this transaction history into the model\u0027s {@code TransactionHistory} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory transactionHistory \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (transactionHistory.hasTransaction(transaction)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionHistory.addTransaction(transaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistory;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "FangShaoHua94": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTransactionHistoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A class to access TransactionHistory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonTransactionHistoryStorage implements TransactionHistoryStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTransactionHistoryStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public JsonTransactionHistoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readTransactionHistory(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Similar to {@link #readTransactionHistory()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Optional\u003cJsonSerializableTransactionHistory\u003e jsonTransactionHistory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                filePath, JsonSerializableTransactionHistory.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!jsonTransactionHistory.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return Optional.of(jsonTransactionHistory.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveTransactionHistory(transactionHistory, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Similar to {@link #saveTransactionHistory(seedu.address.model.ReadOnlyList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                                       Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(transactionHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTransactionHistory(transactionHistory), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "FangShaoHua94": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface Storage extends AddressBookStorage, InventoryStorage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistoryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveInventory(ReadOnlyList\u003cGood\u003e inventory) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10,
      "FangShaoHua94": 15,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionHistoryStorage transactionHistoryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, InventoryStorage inventoryStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                          TransactionHistoryStorage transactionHistoryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionHistoryStorage \u003d transactionHistoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveInventory(ReadOnlyList\u003cGood\u003e inventory) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveInventory(ReadOnlyList\u003cGood\u003e inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction History methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistoryStorage.getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return readTransactionHistory(transactionHistoryStorage.getTransactionHistoryFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory(Path filePath)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistoryStorage.readTransactionHistory(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        saveTransactionHistory(transactionHistory, transactionHistoryStorage.getTransactionHistoryFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory, Path filePath)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistoryStorage.saveTransactionHistory(transactionHistory, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 16,
      "FangShaoHua94": 58,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TransactionHistoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TransactionHistory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public interface TransactionHistoryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    Path getTransactionHistoryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Returns TransactionHistory data as a {@link ReadOnlyList}\u0026lt;Transaction\u0026gt;."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @see #getTransactionHistoryFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyList}\u0026lt;Transaction\u0026gt; to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param transactionHistory cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * @see #saveTransactionHistory(ReadOnlyList)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 9,
      "FangShaoHua94": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GoodInformation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An UI component that displays information of a {@code Good}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodInformation extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"GoodInformation.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final Good good;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private HBox goodPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label goodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label goodQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodInformation(Good good, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName.setText(good.getGoodName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity.setText(good.getGoodQuantity().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        warningLowQuantity(good);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets an alert background for good with quantity lower or equals to threshold."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * @param good refer to the good that need to be check for its quantity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private void warningLowQuantity(Good good) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (good.isNoMoreThanThresholdQuantity()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            goodQuantity.setStyle(\"-fx-background-color: red\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            goodQuantity.setStyle(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof GoodInformation)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodInformation information \u003d (GoodInformation) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return id.getText().equals(information.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 good.equals(information.good);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Panel containing the list of goods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"GoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private ListView\u003cGood\u003e goodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodListPanel(ObservableList\u003cGood\u003e goodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListView.setItems(goodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListView.setCellFactory(listView -\u003e new GoodListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Good} using a {@code GoodInformation}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    class GoodListViewCell extends ListCell\u003cGood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        protected void updateItem(Good good, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super.updateItem(good, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (empty || good \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(new GoodInformation(good, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-w14-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private SupplierListPanel supplierListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodListPanel goodListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private StackPane supplierListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private StackPane goodListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplierListPanel \u003d new SupplierListPanel(logic.getFilteredSupplierList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplierListPanelPlaceholder.getChildren().add(supplierListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListPanel \u003d new GoodListPanel(logic.getFilteredGoodList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodListPanelPlaceholder.getChildren().add(goodListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierListPanel getSupplierListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return supplierListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodListPanel getGoodListPanel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return goodListPanel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 14,
      "-": 191,
      "LiuChao93": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OfferCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * A box containing the details of an offer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class OfferCard extends VBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String FXML \u003d \"/view/OfferCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public final Offer offer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Label good;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public OfferCard(Offer offer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        this.offer \u003d offer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        good.setText(\"Good: \" + offer.getGoodName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        price.setText(\"Price: \" + offer.getPrice().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 38,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SupplierCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * An UI component that displays information of a {@code Supplier}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final String FXML \u003d \"SupplierListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public final Supplier supplier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private VBox offers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierCard(Supplier supplier, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        name.setText(supplier.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        phone.setText(supplier.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        address.setText(supplier.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        email.setText(supplier.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplier.getOffers().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .sorted(Comparator.comparing(offer -\u003e offer.getGoodName().toString()))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .forEach(offer -\u003e offers.getChildren().add(new OfferCard(offer)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        if (!(other instanceof SupplierCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        SupplierCard card \u003d (SupplierCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                \u0026\u0026 supplier.equals(card.supplier);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 3,
      "-": 55,
      "LiuChao93": 15,
      "PangJiaDa": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SupplierListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Panel containing the list of suppliers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final String FXML \u003d \"SupplierListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SupplierListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private ListView\u003cSupplier\u003e supplierListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierListPanel(ObservableList\u003cSupplier\u003e supplierList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplierListView.setItems(supplierList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplierListView.setCellFactory(listView -\u003e new SupplierListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Supplier} using a {@code SupplierCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    class SupplierListViewCell extends ListCell\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        protected void updateItem(Supplier supplier, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            super.updateItem(supplier, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            if (empty || supplier \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                setGraphic(new SupplierCard(supplier, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"TransactionCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private HBox transactionPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label transactionType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label transactionQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label transactionGood;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Label transactionPersonName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (transaction instanceof BuyTransaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionType.setText(\"Buy from: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionPersonName.setText(((BuyTransaction) transaction).getSupplier().getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionType.setText(\"Sell\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            transactionPersonName.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionGood.setText(transaction.getGood().getGoodName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionQuantity.setText(transaction.getGood().getGoodQuantity().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionCard information \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return id.getText().equals(information.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u0026\u0026 transaction.equals(information.transaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * a {@code TransactionCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/inventory_manager_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/GoodInformation.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"goodName\" styleClass\u003d\"cell_big_label\" text\u003d\"goodName\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cLabel fx:id\u003d\"goodQuantity\" styleClass\u003d\"cell_big_label\" text\u003d\"goodQuantity\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 38
    }
  },
  {
    "path": "src/main/resources/view/GoodListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cListView fx:id\u003d\"goodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"750.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Inventory Manager\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003cImage url\u003d\"@/images/inventory_manager_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cHBox fx:id\u003d\"triplePanel\" alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            \u003cVBox fx:id\u003d\"supplierList\" minWidth\u003d\"250.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "              \u003cStackPane fx:id\u003d\"supplierListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            \u003cVBox fx:id\u003d\"supplierList1\" minWidth\u003d\"250.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u003cStackPane fx:id\u003d\"goodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cVBox fx:id\u003d\"transactionsList\" minWidth\u003d\"250.0\" prefWidth\u003d\"250.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "FangShaoHua94": 24,
      "-": 46,
      "LiuChao93": 3
    }
  },
  {
    "path": "src/main/resources/view/OfferCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_LEFT\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cLabel fx:id\u003d\"good\" text\u003d\"$good\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        \u003cLabel fx:id\u003d\"price\" text\u003d\"$price\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 18
    }
  },
  {
    "path": "src/main/resources/view/SupplierListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "      \u003cLabel fx:id\u003d\"offer_label\" styleClass\u003d\"cell_small_label\" text\u003d\"Offers:\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "      \u003cVBox fx:id\u003d\"offers\" spacing\u003d\"10\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/SupplierListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "  \u003cListView fx:id\u003d\"supplierListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/main/resources/view/TransactionCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"0.0\" prefWidth\u003d\"150.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cLabel fx:id\u003d\"transactionType\" styleClass\u003d\"cell_big_label\" text\u003d\"transactionType\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cLabel fx:id\u003d\"transactionPersonName\" styleClass\u003d\"cell_small_label\" text\u003d\"transactionPersonName\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cLabel fx:id\u003d\"transactionGood\" styleClass\u003d\"cell_big_label\" text\u003d\"transactionGood\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cLabel fx:id\u003d\"transactionQuantity\" styleClass\u003d\"cell_big_label\" text\u003d\"transactionQuantity\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 60
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "      \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/inventory_manager_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.ListSupplierCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.storage.JsonTransactionHistoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"inventory.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonTransactionHistoryStorage transactionHistoryStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonTransactionHistoryStorage(temporaryFolder.resolve(\"transactionHistory.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, inventoryStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String deleteCommand \u003d \"delete-s 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String listCommand \u003d ListSupplierCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(listCommand, ListSupplierCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInventory.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonTransactionHistoryStorage transactionHistoryStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonTransactionHistoryStorage(temporaryFolder.resolve(\"ioExceptionTransactionHistory.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, inventoryStorage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String addCommand \u003d AddSupplierCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder(AMY).withOffers().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.addSupplier(expectedSupplier);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void getFilteredSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredSupplierList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getFilteredGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredGoodList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model.getTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void saveInventory(ReadOnlyList\u003cGood\u003e inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static class JsonTransactionHistoryIoExceptionThrowingStub extends JsonTransactionHistoryStorage {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private JsonTransactionHistoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory, Path filePath)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 6,
      "FangShaoHua94": 52,
      "-": 144,
      "LiuChao93": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddSupplierCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddSupplierCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class AddSupplierCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_newSupplier_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model.getTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.addSupplier(validSupplier);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(new AddSupplierCommand(validSupplier), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                String.format(AddSupplierCommand.MESSAGE_SUCCESS, validSupplier), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_duplicateSupplier_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Supplier supplierInList \u003d model.getAddressBook().getReadOnlyList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(new AddSupplierCommand(supplierInList), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                AddSupplierCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "FangShaoHua94": 6,
      "-": 30,
      "LiuChao93": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class AddSupplierCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void constructor_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSupplierCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_supplierAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ModelStubAcceptingSupplierAdded modelStub \u003d new ModelStubAcceptingSupplierAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        CommandResult commandResult \u003d new AddSupplierCommand(validSupplier).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(String.format(AddSupplierCommand.MESSAGE_SUCCESS, validSupplier),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(Arrays.asList(validSupplier), modelStub.suppliersAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_validPerson_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        new AddSupplierCommand(ALICE).execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddSupplierCommand addSupplierCommand \u003d new AddSupplierCommand(validSupplier);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSupplier(validSupplier);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(CommandException.class, AddSupplierCommand.MESSAGE_DUPLICATE_SUPPLIER, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                addSupplierCommand.execute(modelStub));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier alice \u003d new SupplierBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier bob \u003d new SupplierBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddSupplierCommand addAliceCommand \u003d new AddSupplierCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddSupplierCommand addBobCommand \u003d new AddSupplierCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddSupplierCommand addAliceCommandCopy \u003d new AddSupplierCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void setAddressBook(ReadOnlyList\u003cSupplier\u003e newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void setInventory(ReadOnlyList\u003cGood\u003e inventory) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ReadOnlyList\u003cGood\u003e getInventory() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void deleteGood(Good target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void addGood(Good good) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void updateFilteredGoodList(Predicate\u003cGood\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void setTransactionHistoryFilePath(Path transactionHistoryFilePath) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void setTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ReadOnlyList\u003cTransaction\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void commit() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * A Model stub that contains a single supplier."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private class ModelStubWithSupplier extends ModelStub {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        private final Supplier supplier;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ModelStubWithSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return this.supplier.isSameSupplier(supplier);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * A Model stub that always accept the supplier being added."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private class ModelStubAcceptingSupplierAdded extends ModelStub {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final ArrayList\u003cSupplier\u003e suppliersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return suppliersAdded.stream().anyMatch(supplier::isSameSupplier);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            suppliersAdded.add(supplier);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 35,
      "FangShaoHua94": 97,
      "-": 141,
      "LiuChao93": 48,
      "PangJiaDa": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BuyCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class BuyCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_STRING \u003d \"Test good name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_DIFF_GOOD_NAME_STRING \u003d \"Different Test good name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_STRING \u003d \"10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_DIFF_GOOD_QUANTITY_STRING \u003d \"20\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_SUPPLIER_NAME_STRING \u003d \"Test supplier\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_PRICE_STRING \u003d \"6.90\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String WILL_OVERFLOW_QUANTITY_STRING \u003d \"999999\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodName VALID_GOOD_NAME \u003d new GoodName(VALID_GOOD_NAME_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodName VALID_DIFF_GOOD_NAME \u003d new GoodName(VALID_DIFF_GOOD_NAME_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_GOOD_QUANTITY \u003d new GoodQuantity(VALID_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_DIFF_GOOD_QUANTITY \u003d new GoodQuantity(VALID_DIFF_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity WILL_OVERFLOW_QUANTITY \u003d new GoodQuantity(WILL_OVERFLOW_QUANTITY_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good boughtGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good existingGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good buyExistingGoodResultGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_DIFF_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static Supplier supplierSellingBoughtGood \u003d new SupplierBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            .withName(VALID_SUPPLIER_NAME_STRING)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            .withOffers(VALID_GOOD_NAME_STRING + \" \" + VALID_GOOD_PRICE_STRING)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void constructor_nullParameters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new BuyCommand(null, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new BuyCommand(VALID_GOOD_NAME, null, INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommand \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommandDiffName \u003d new BuyCommand(VALID_DIFF_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommandDiffQty \u003d new BuyCommand(VALID_GOOD_NAME, VALID_DIFF_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommandDiffIndex \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_SECOND_SUPPLIER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(buyCommand.equals(buyCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommandCopy \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(buyCommand.equals(buyCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(\"string\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different GoodQuantity -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(buyCommandDiffQty));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different GoodName -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(buyCommandDiffName));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different Index -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(buyCommand.equals(buyCommandDiffIndex));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_buyExistingGood_buySuccessful() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubWithExistingGood modelStub \u003d new ModelStubWithExistingGood();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        CommandResult commandResult \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedFeedback \u003d String.format(BuyCommand.MESSAGE_SUCCESS, boughtGood.getGoodQuantity().goodQuantity,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                boughtGood.getGoodName().fullGoodName, VALID_GOOD_PRICE_STRING);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(expectedFeedback, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(Arrays.asList(buyExistingGoodResultGood), modelStub.inventory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_buyNewGood_buySuccessful() throws CommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubEmptyInventory modelStub \u003d new ModelStubEmptyInventory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        CommandResult commandResult \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedFeedback \u003d String.format(BuyCommand.MESSAGE_SUCCESS, boughtGood.getGoodQuantity().goodQuantity,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                boughtGood.getGoodName().fullGoodName, VALID_GOOD_PRICE_STRING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(expectedFeedback, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(Arrays.asList(boughtGood), modelStub.inventory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_buyOverflowInventory_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubWithExistingGood modelStub \u003d new ModelStubWithExistingGood();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand buyCommand \u003d new BuyCommand(VALID_GOOD_NAME, WILL_OVERFLOW_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e buyCommand.execute(modelStub));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_validTransaction_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubWithExistingGood modelStub \u003d new ModelStubWithExistingGood();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER).execute(modelStub);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private class ModelStubWithExistingGood extends ModelStub {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private ArrayList\u003cGood\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private boolean isCommitted \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ModelStubWithExistingGood() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(existingGood);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return inventory.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ObservableList\u003cGood\u003e goodsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            goodsList.add(existingGood);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return goodsList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // test calling this method should modify the only good in inventory"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(editedGood);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ObservableList\u003cSupplier\u003e supplierList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            supplierList.add(supplierSellingBoughtGood);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return supplierList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void commit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            this.isCommitted \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean isCommitted() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return this.isCommitted;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // dummy method"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private class ModelStubEmptyInventory extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private ArrayList\u003cGood\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return inventory.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addGood(Good good) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(good);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ObservableList\u003cSupplier\u003e supplierList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            supplierList.add(supplierSellingBoughtGood);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return supplierList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // dummy method"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 225
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class ClearSupplierCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(new ClearSupplierCommand(), model, ClearSupplierCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(new ClearSupplierCommand(), model, ClearSupplierCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new ClearSupplierCommand().execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10,
      "FangShaoHua94": 6,
      "-": 26,
      "LiuChao93": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.BUY_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_GOOD_APPLE \u003d \"apple\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_GOOD_BANANA \u003d \"banana\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_PRICE_CHEAP \u003d \"0.50\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_PRICE_EXPENSIVE \u003d \"5.00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_OFFER_APPLE \u003d VALID_GOOD_APPLE + \" \" + VALID_PRICE_CHEAP;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String VALID_OFFER_BANANA \u003d VALID_GOOD_BANANA + \" \" + VALID_PRICE_EXPENSIVE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALID_GOOD_NAME_AVOCADO \u003d \"Mexican avocado\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String VALID_GOOD_NAME_BLUEBERRY \u003d \"USA blueberry\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int VALID_GOOD_QUANTITY_ZERO \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int VALID_GOOD_QUANTITY_ONE \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_CONTACT + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_CONTACT + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String OFFER_DESC_APPLE \u003d \" \" + PREFIX_OFFER + VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String OFFER_DESC_BANANA \u003d \" \" + PREFIX_OFFER + VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_CONTACT + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // no space separator"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid3.45\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid 404\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name and price"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_AND_PRICE_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid -404\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    //invalid good name and format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_GOOD_AND_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"inv@lid404\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // invalid price"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_PRICE_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid -1.0\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    // invalid price and format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public static final String INVALID_PRICE_AND_FORMAT_OFFER_DESC \u003d \" \" + PREFIX_OFFER + \"invalid-1.0\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final EditSupplierCommand.EditSupplierDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final EditSupplierCommand.EditSupplierDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DESC_AMY \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DESC_BOB \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * - the address book, filtered supplier list and selected supplier in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        List\u003cSupplier\u003e expectedFilteredSupplierList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredSupplierList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(actualModel.getInventory());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        List\u003cGood\u003e expectedFilteredGoodList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredGoodList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistory \u003d new TransactionHistory(actualModel.getTransactionHistory());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        List\u003cTransaction\u003e expectedFilteredTransactionList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedFilteredSupplierList, actualModel.getFilteredSupplierList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedInventory, actualModel.getInventory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedFilteredGoodList, actualModel.getFilteredGoodList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedTransactionHistory, actualModel.getTransactionHistory());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedFilteredTransactionList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the supplier at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static void showSupplierAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplier \u003d model.getFilteredSupplierList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final String[] splitName \u003d supplier.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.updateFilteredSupplierList(new SupplierNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(1, model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the good at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code model}\u0027s inventory."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static void showGoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGoodList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good good \u003d model.getFilteredGoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final String[] splitName \u003d good.getGoodName().fullGoodName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.updateFilteredGoodList(new GoodNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(1, model.getFilteredGoodList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * {@code model}\u0027s transaction history."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final String[] splitName \u003d transaction.getGood().getGoodName().fullGoodName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model.updateFilteredTransactionList(new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Arrays.asList(new String[0]), Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 39,
      "FangShaoHua94": 33,
      "-": 102,
      "PangJiaDa": 8,
      "LiuChao93": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGoodCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGoodAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class DeleteGoodCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good goodToDelete \u003d model.getFilteredGoodList().get(INDEX_FIRST_GOOD.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteGoodCommand \u003d new DeleteGoodCommand(INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGoodCommand.MESSAGE_DELETE_GOOD_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                goodToDelete.getGoodName().fullGoodName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        expectedModel.deleteGood(goodToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertCommandSuccess(deleteGoodCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoodList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteGoodCommand \u003d new DeleteGoodCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertCommandFailure(deleteGoodCommand, model, Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        showGoodAtIndex(model, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Good goodToDelete \u003d model.getFilteredGoodList().get(INDEX_FIRST_GOOD.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteGoodCommand \u003d new DeleteGoodCommand(INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGoodCommand.MESSAGE_DELETE_GOOD_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                goodToDelete.getGoodName().fullGoodName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        expectedModel.deleteGood(goodToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        showNoInventory(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertCommandSuccess(deleteGoodCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_validIndex_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        modelStub.addGood(APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        new DeleteGoodCommand(INDEX_FIRST_GOOD).execute(modelStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteFirstCommand \u003d new DeleteGoodCommand(INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteSecondCommand \u003d new DeleteGoodCommand(INDEX_SECOND_GOOD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        DeleteGoodCommand deleteFirstCommandCopy \u003d new DeleteGoodCommand(INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no goods."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private void showNoInventory(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        model.updateFilteredGoodList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(model.getFilteredGoodList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGoodPricePairFromSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.DeleteSupplierGoodNameBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Contains integration tests (interaction with the Model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * UndoCommand and RedoCommand) and unit tests for DeleteGoodPricePairFromSupplierCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteGoodPricePairFromSupplierCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.add(ALICE.getOffers().iterator().next().getGoodName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d DeleteGoodPricePairFromSupplierCommand.MESSAGE_SUCCESS_DELETE_GOOD"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(ALICE.getOffers().iterator().next().getGoodName().toString())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(\", \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder().withName(ALICE.getName().toString())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withAddress(ALICE.getAddress().toString())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withEmail(ALICE.getEmail().toString())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withPhone(ALICE.getPhone().toString()).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteGoodPricePairFromSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.add(ALICE.getOffers().iterator().next().getGoodName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierInFilteredList \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d DeleteGoodPricePairFromSupplierCommand.MESSAGE_SUCCESS_DELETE_GOOD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(ALICE.getOffers().iterator().next().getGoodName().toString())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(\", \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder(supplierInFilteredList).withName(ALICE.getName().toString())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withAddress(ALICE.getAddress().toString())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withEmail(ALICE.getEmail().toString())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withPhone(ALICE.getPhone().toString()).withOffers().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteGoodPricePairFromSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_couldNotFindGood_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.add(new GoodBuilder().withGoodName(\"There is no such good\").build().getGoodName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d DeleteGoodPricePairFromSupplierCommand.MESSAGE_COULD_NOT_FIND_GOOD"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(\"There is no such good\").concat(\", \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteGoodPricePairFromSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_mixSuccessfulDeleteGoodAndCouldNotFindGood_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ALICE.getOffers().forEach(offer -\u003e goodNames.add(offer.getGoodName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.add(new GoodBuilder().withGoodName(\"There is no such good\").build().getGoodName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d DeleteGoodPricePairFromSupplierCommand.MESSAGE_SUCCESS_DELETE_GOOD"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(ALICE.getOffers().iterator().next().getGoodName().toString())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(\", \\n\").concat(DeleteGoodPricePairFromSupplierCommand.MESSAGE_COULD_NOT_FIND_GOOD)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .concat(\"There is no such good, \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder(ALICE).withOffers().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteGoodPricePairFromSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_invalidSupplierIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSupplierList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(deleteGoodPricePairFromSupplierCommand, model,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_invalidSupplierIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getReadOnlyList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName descriptor \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand deleteGoodPricePairFromSupplierCommand \u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(deleteGoodPricePairFromSupplierCommand, model,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_valid_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        modelStub.addSupplier(CARL);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        CARL.getOffers().forEach(offer -\u003e goodNames.add(offer.getGoodName()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                        .build()).execute(modelStub);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AMY.getOffers().forEach(offer -\u003e goodNames.add(offer.getGoodName()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final DeleteGoodPricePairFromSupplierCommand standardCommand \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                        new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearSupplierCommand()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        //different index -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteGoodPricePairFromSupplierCommand(INDEX_SECOND_SUPPLIER,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build())));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 222
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * {@code DeleteSupplierCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteSupplierCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierToDelete \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteSupplierCommand \u003d new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSupplierCommand.MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSupplierList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteSupplierCommand \u003d new DeleteSupplierCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(deleteSupplierCommand, model, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierToDelete \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteSupplierCommand \u003d new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSupplierCommand.MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showNoSupplier(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(deleteSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getReadOnlyList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteSupplierCommand \u003d new DeleteSupplierCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(deleteSupplierCommand, model, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_validIndex_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelStub.addSupplier(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER).execute(modelStub);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteFirstCommand \u003d new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteSecondCommand \u003d new DeleteSupplierCommand(INDEX_SECOND_SUPPLIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand deleteFirstCommandCopy \u003d new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private void showNoSupplier(Model model) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        model.updateFilteredSupplierList(p -\u003e false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(model.getFilteredSupplierList().isEmpty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 12,
      "FangShaoHua94": 8,
      "-": 72,
      "LiuChao93": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Contains integration tests (interaction with the Model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * UndoCommand and RedoCommand) and unit tests for EditSupplierCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d ALICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder(editedSupplier).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(EditSupplierCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(editSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index indexLastSupplier \u003d Index.fromOneBased(model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier lastSupplier \u003d model.getFilteredSupplierList().get(indexLastSupplier.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        SupplierBuilder supplierInList \u003d new SupplierBuilder(lastSupplier);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d supplierInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(indexLastSupplier, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(EditSupplierCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(lastSupplier, editedSupplier);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(editSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new EditSupplierDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(EditSupplierCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(editSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplierInFilteredList \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder(supplierInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(EditSupplierCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalInventory(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(editSupplierCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_duplicateSupplierUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier firstSupplier \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder(firstSupplier).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(INDEX_SECOND_SUPPLIER, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(editSupplierCommand, model, EditSupplierCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_duplicateSupplierFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // edit supplier in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Supplier supplierInList \u003d model.getAddressBook().getReadOnlyList().get(INDEX_SECOND_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new EditSupplierDescriptorBuilder(supplierInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(editSupplierCommand, model, EditSupplierCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_invalidSupplierIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSupplierList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(editSupplierCommand, model, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_invalidSupplierIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getReadOnlyList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand editSupplierCommand \u003d new EditSupplierCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandFailure(editSupplierCommand, model, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_valid_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelStub.addSupplier(CARL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new EditSupplierCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                INDEX_FIRST_SUPPLIER, new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ).execute(modelStub);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        final EditSupplierCommand standardCommand \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER, DESC_AMY);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor copyDescriptor \u003d new EditSupplierDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand commandWithSameValues \u003d new EditSupplierCommand(INDEX_FIRST_SUPPLIER, copyDescriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearSupplierCommand()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSupplierCommand(INDEX_SECOND_SUPPLIER, DESC_AMY)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSupplierCommand(INDEX_FIRST_SUPPLIER, DESC_BOB)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 19,
      "FangShaoHua94": 16,
      "-": 86,
      "LiuChao93": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditSupplierDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptorWithSameValues \u003d new EditSupplierDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(DESC_AMY, descriptorWithSameValues);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(DESC_AMY, DESC_AMY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(null, DESC_AMY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(5, DESC_AMY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, DESC_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, editedAmy);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, editedAmy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, editedAmy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, editedAmy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // different offers -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertNotEquals(DESC_AMY, editedAmy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 1,
      "-": 30,
      "LiuChao93": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindGoodCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodSupplierPairContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindGoodCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindGoodCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand findFirstCommand \u003d new FindGoodCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand findSecondCommand \u003d new FindGoodCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand findFirstCommandCopy \u003d new FindGoodCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_zeroKeywords_noGoodFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand command \u003d new FindGoodCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredSupplierList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_multipleKeywords_multipleSuppliersFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate predicate \u003d preparePredicate("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                ALICE.getOffers().iterator().next().getGoodName().toString() + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + BENSON.getOffers().iterator().next().getGoodName().toString() + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + DANIEL.getOffers().iterator().next().getGoodName().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand command \u003d new FindGoodCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredSupplierList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_doesNotCallModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        new FindGoodCommand(preparePredicate(\"commit\")).execute(modelStub);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private GoodSupplierPairContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindSupplierCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindSupplierCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand findFirstCommand \u003d new FindSupplierCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand findSecondCommand \u003d new FindSupplierCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand findFirstCommandCopy \u003d new FindSupplierCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_zeroKeywords_noSupplierFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand command \u003d new FindSupplierCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredSupplierList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void execute_multipleKeywords_multipleSuppliersFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand command \u003d new FindSupplierCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedModel.updateFilteredSupplierList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredSupplierList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_doesNotCallModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new FindSupplierCommand(preparePredicate(\"commit\")).execute(modelStub);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private SupplierNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new SupplierNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 9,
      "FangShaoHua94": 6,
      "-": 51,
      "LiuChao93": 21,
      "PangJiaDa": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.BUY_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.SELL_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_BANANA_TRANSACTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_CITRUS_TRANSACTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindTransactionCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class FindTransactionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Collections.singletonList(\"Alice\"), Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(SELL_TRANSACTION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Collections.singletonList(\"Alice\"), Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Arrays.asList(\"Alice\", \"Bob\"), Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate fourthPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Collections.singletonList(\"Alice\"), Arrays.asList(\"Apple\", \"Banana\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand findFirstCommand \u003d new FindTransactionCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand findSecondCommand \u003d new FindTransactionCommand(secondPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand findThirdCommand \u003d new FindTransactionCommand(thirdPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand findFourthCommand \u003d new FindTransactionCommand(fourthPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand findFirstCommandCopy \u003d new FindTransactionCommand(firstPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type of transaction -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different supplier name list -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(findFirstCommand, findThirdCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good name list -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(findFirstCommand, findFourthCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // user input of \" \" will not be taken as a keyword."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate predicate \u003d prepareSupplierPredicate(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedModel.getFilteredTransactionList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_multipleSupplierKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate predicate \u003d prepareSupplierPredicate(\"Alice Benson Carl\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(Arrays.asList(BUY_APPLE_TRANSACTION, BUY_BANANA_TRANSACTION, BUY_CITRUS_TRANSACTION),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_multipleGoodKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate predicate \u003d prepareGoodPredicate(\"Apple Banana Citrus\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand command \u003d new FindTransactionCommand(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(Arrays.asList(BUY_APPLE_TRANSACTION, BUY_BANANA_TRANSACTION, BUY_CITRUS_TRANSACTION),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_doesNotCallModelCommit() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        new FindTransactionCommand(prepareSupplierPredicate(\"commit\")).execute(modelStub);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Parses supplier {@code userInput} into a {@code TransactionContainKeywordsPredicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionContainKeywordsPredicate prepareSupplierPredicate(String userInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Arrays.asList(userInput.split(\"\\\\s+\")), Collections.emptyList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Parses good {@code userInput} into a {@code TransactionContainKeywordsPredicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionContainKeywordsPredicate prepareGoodPredicate(String userInput) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Collections.emptyList(), Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_doesNotCallModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new HelpCommand().execute(modelStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListSupplierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListSupplierCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class ListSupplierCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(new ListSupplierCommand(), model, ListSupplierCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertCommandSuccess(new ListSupplierCommand(), model, ListSupplierCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_doesNotCallModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        new ListSupplierCommand().execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10,
      "FangShaoHua94": 6,
      "-": 29,
      "LiuChao93": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListTransactionCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class ListTransactionCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model.getTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                model, ListTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                ListTransactionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_doesNotCallModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        new ListTransactionCommand().execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelStub.isCommitted());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubCommit.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " * Class to stub the commit method of Model, and adds a certain person to the model when commit is called."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class ModelStubCommit extends ModelManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private boolean isCommitted \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public boolean isCommitted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        return isCommitted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        isCommitted \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RedoCommand().execute(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_changesCommitted_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                model.getTransactionHistory(), model.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addGood(APPLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addSupplier(ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.addGood(APPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.addSupplier(ALICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_noChangesUndone_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, Messages.MESSAGE_REDO_AT_LATEST_STATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // fails also after committing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, Messages.MESSAGE_REDO_AT_LATEST_STATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SellCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SellCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_STRING \u003d \"Test good name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_DIFF_GOOD_NAME_STRING \u003d \"Different Test good name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_STRING \u003d \"10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_DIFF_GOOD_QUANTITY_STRING \u003d \"20\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_INSUFFICIENT_QUANTITY_STRING \u003d \"5\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_ZERO_QUANTITY_STRING \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_PRICE_STRING \u003d \"5.00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_DIFF_PRICE_STRING \u003d \"6.69\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodName VALID_GOOD_NAME \u003d new GoodName(VALID_GOOD_NAME_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_GOOD_QUANTITY \u003d new GoodQuantity(VALID_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_DIFF_GOOD_QUANTITY \u003d new GoodQuantity(VALID_DIFF_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_INSUFFICIENT_QUANTITY \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            new GoodQuantity(VALID_INSUFFICIENT_QUANTITY_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_ZERO_QUANTITY \u003d new GoodQuantity(VALID_ZERO_QUANTITY_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good soldGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good existingGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good sellExistingGoodResultGood \u003d Good.newGoodEntry(VALID_GOOD_NAME, VALID_ZERO_QUANTITY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Good insufficientQuantityGood \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            Good.newGoodEntry(VALID_GOOD_NAME, VALID_INSUFFICIENT_QUANTITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Price VALID_PRICE \u003d new Price(VALID_PRICE_STRING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Price VALID_DIFF_PRICE \u003d new Price(VALID_DIFF_PRICE_STRING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void constructor_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing quantity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SellCommand(null, VALID_PRICE, INDEX_FIRST_GOOD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing price"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SellCommand(VALID_GOOD_QUANTITY, null, INDEX_FIRST_GOOD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommand \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommandDiffQty \u003d new SellCommand(VALID_DIFF_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommandDiffPrice \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_DIFF_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommandDiffIndex \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_SECOND_GOOD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(sellCommand.equals(sellCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommandCopy \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(sellCommand.equals(sellCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(\"string\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different GoodQuantity -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(sellCommandDiffQty));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(sellCommandDiffPrice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(sellCommand.equals(sellCommandDiffIndex));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_sellExistingGood_sellSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubWithExistingGood modelStub \u003d new ModelStubWithExistingGood();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        CommandResult commandResult \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedFeedback \u003d String.format(SellCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                soldGood.getGoodQuantity().goodQuantity, soldGood.getGoodName().fullGoodName,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                VALID_PRICE.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(expectedFeedback, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(Arrays.asList(sellExistingGoodResultGood), modelStub.inventory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_sellMoreThanInventoryQuantity_throwCommandException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubInsufficientInventory modelStub \u003d new ModelStubInsufficientInventory();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand sellCommand \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                SellCommand.MESSAGE_INSUFFICIENT_QUANTITY, () -\u003e sellCommand.execute(modelStub));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute_validTransaction_callsModelCommit() throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ModelStubCommit modelStub \u003d new ModelStubCommit();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        modelStub.addGood(soldGood);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        new SellCommand(VALID_GOOD_QUANTITY, VALID_PRICE, INDEX_FIRST_GOOD).execute(modelStub);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(modelStub.isCommitted());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private class ModelStubInsufficientInventory extends ModelStub {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private ArrayList\u003cGood\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ModelStubInsufficientInventory() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(insufficientQuantityGood);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return inventory.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ObservableList\u003cGood\u003e goodsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            goodsList.add(insufficientQuantityGood);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return goodsList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            //dummy method"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private class ModelStubWithExistingGood extends ModelStub {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private ArrayList\u003cGood\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ModelStubWithExistingGood() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(existingGood);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return inventory.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ObservableList\u003cGood\u003e goodsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            goodsList.add(existingGood);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return goodsList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // test calling this method should modify the only good in inventory"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(editedGood);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            //dummy method"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private class ModelStubEmptyInventory extends ModelStub {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        private ArrayList\u003cGood\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            requireNonNull(good);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            return inventory.stream().anyMatch(good::isSameGood);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        public void addGood(Good good) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.add(good);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetThresholdCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGoodAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SetThresholdCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final GoodQuantity VALID_THRESHOLD \u003d new GoodQuantity(\"100\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good good \u003d model.getFilteredGoodList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedGood \u003d new Good(good.getGoodName(), good.getGoodQuantity(), VALID_THRESHOLD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand setThresholdCommand \u003d new SetThresholdCommand(index, VALID_THRESHOLD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(SetThresholdCommand.MESSAGE_SUCCESS, VALID_THRESHOLD.goodQuantity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                good.getGoodName().fullGoodName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Inventory(model.getInventory()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel.setGood(good, editedGood);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(setThresholdCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        showGoodAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good goodInFilteredList \u003d model.getFilteredGoodList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedGood \u003d new GoodBuilder(goodInFilteredList).withThreshold(100).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand setThresholdCommand \u003d new SetThresholdCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                editedGood.getThreshold());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(SetThresholdCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                100, editedGood.getGoodName().fullGoodName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Inventory(model.getInventory()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                getTypicalTransactionHistory(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedModel.setGood(model.getFilteredGoodList().get(0), editedGood);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandSuccess(setThresholdCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_invalidGoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoodList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand setThresholdCommand \u003d new SetThresholdCommand(outOfBoundIndex, VALID_THRESHOLD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandFailure(setThresholdCommand, model, Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void execute_invalidGoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        showGoodAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventory().getReadOnlyList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand setThresholdCommand \u003d new SetThresholdCommand(outOfBoundIndex, VALID_THRESHOLD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertCommandFailure(setThresholdCommand, model, Messages.MESSAGE_INVALID_GOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        final SetThresholdCommand standardCommand \u003d new SetThresholdCommand(INDEX_FIRST_SUPPLIER, VALID_THRESHOLD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SetThresholdCommand commandWithSameValues \u003d new SetThresholdCommand(INDEX_FIRST_SUPPLIER, VALID_THRESHOLD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearSupplierCommand()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(standardCommand.equals(new SetThresholdCommand(INDEX_SECOND_SUPPLIER, VALID_THRESHOLD)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity diffThreshold \u003d new GoodQuantity(\"200\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(standardCommand.equals(new SetThresholdCommand(INDEX_FIRST_SUPPLIER, diffThreshold)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UndoCommand().execute(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_changesCommitted_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getInventory(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                model.getTransactionHistory(), model.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.addGood(APPLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.addSupplier(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void execute_noChangesCommitted_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, Messages.MESSAGE_UNDO_AT_INITIAL_STATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddSupplierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_AND_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_AND_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_OFFER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_AND_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class AddSupplierCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private AddSupplierCommandParser parser \u003d new AddSupplierCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder(BOB).withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_APPLE, new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // multiple offers - all accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier expectedSupplierMultipleOffers \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new SupplierBuilder(BOB).withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + OFFER_DESC_APPLE + OFFER_DESC_BANANA, new AddSupplierCommand(expectedSupplierMultipleOffers));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // zero offers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder(AMY).withOffers().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new AddSupplierCommand(expectedSupplier));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSupplierCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_BANANA + OFFER_DESC_APPLE, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid good name in offer"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_OFFER_DESC + OFFER_DESC_APPLE, GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid price in offer"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_OFFER_DESC + OFFER_DESC_APPLE, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format in offer"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid good name precedes invalid price in offer"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_AND_PRICE_OFFER_DESC + OFFER_DESC_APPLE, GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format precedes invalid good name in offer"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_GOOD_AND_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // invalid format precedes invalid price in offer"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_AND_FORMAT_OFFER_DESC + OFFER_DESC_APPLE, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // two invalid offers, only first invalid offer reported"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + INVALID_PRICE_OFFER_DESC + INVALID_FORMAT_OFFER_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + ADDRESS_DESC_BOB + OFFER_DESC_BANANA + OFFER_DESC_APPLE,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSupplierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 44,
      "-": 104,
      "LiuChao93": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.ClearSupplierCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteSupplierCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindSupplierCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.ListSupplierCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final InventoryManagerParser parser \u003d new InventoryManagerParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddSupplierCommand command \u003d (AddSupplierCommand) parser.parseCommand(SupplierUtil.getAddCommand(supplier));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(new AddSupplierCommand(supplier), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(parser.parseCommand(ClearSupplierCommand.COMMAND_WORD) instanceof ClearSupplierCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(parser.parseCommand(ClearSupplierCommand.COMMAND_WORD + \" 3\") instanceof ClearSupplierCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierCommand command \u003d (DeleteSupplierCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                DeleteSupplierCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SUPPLIER.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder(supplier).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand command \u003d (EditSupplierCommand) parser.parseCommand(EditSupplierCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                + INDEX_FIRST_SUPPLIER.getOneBased() + \" \" + SupplierUtil.getEditSupplierDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(new EditSupplierCommand(INDEX_FIRST_SUPPLIER, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand command \u003d (FindSupplierCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                FindSupplierCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(new FindSupplierCommand(new SupplierNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(parser.parseCommand(ListSupplierCommand.COMMAND_WORD) instanceof ListSupplierCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(parser.parseCommand(ListSupplierCommand.COMMAND_WORD + \" 3\") instanceof ListSupplierCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 12,
      "FangShaoHua94": 1,
      "-": 71,
      "LiuChao93": 29,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BuyCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class BuyCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_STRING \u003d \"Durian\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA_STRING \u003d \"Durian123\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME_STRING \u003d \"Dur@_an\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_STRING \u003d \"10\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_STRING \u003d \"11\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_STRING \u003d \"-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_STRING \u003d \"9999999999999\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_SUPPLIER_INDEX_PREAMBLE \u003d \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodName VALID_GOOD_NAME \u003d new GoodName(VALID_GOOD_NAME_STRING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_GOOD_QUANTITY \u003d new GoodQuantity(VALID_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME_STRING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_NAME_EXTRA_DESC \u003d \" \" + PREFIX_GOOD_NAME + VALID_GOOD_NAME_EXTRA_STRING;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_NAME_DESC \u003d \" \" + PREFIX_GOOD_NAME + INVALID_GOOD_NAME_STRING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_DESC \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_EXTRA_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_DESC \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_NEGATIVE_STRING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_DESC \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_OVERFLOW_STRING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private BuyCommandParser parser \u003d new BuyCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Good validGood \u003d Good.newGoodEntry(new GoodName(VALID_GOOD_NAME_STRING),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            new GoodQuantity(VALID_GOOD_QUANTITY_STRING));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        BuyCommand expectedCommand \u003d new BuyCommand(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // Happy case"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC, expectedCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_SUPPLIER_INDEX_PREAMBLE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple goodNames, only last one accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_EXTRA_DESC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC, expectedCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple quantities, only last one accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_EXTRA_DESC + VALID_GOOD_QUANTITY_DESC, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good quantity"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing supplier display index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_QUANTITY_DESC + VALID_GOOD_NAME_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_SUPPLIER_INDEX_PREAMBLE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + INVALID_GOOD_NAME_DESC + VALID_GOOD_QUANTITY_DESC, GoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good quantities"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + INVALID_GOOD_QUANTITY_NEGATIVE_DESC, GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_SUPPLIER_INDEX_PREAMBLE + VALID_GOOD_NAME_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + INVALID_GOOD_QUANTITY_OVERFLOW_DESC, GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGoodCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * outside of the DeleteGoodCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * same path through the DeleteGoodCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DeleteGoodCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private DeleteGoodCommandParser parser \u003d new DeleteGoodCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteGoodCommand(INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                DeleteGoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "PangJiaDa": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGoodPricePairFromSupplierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOOD_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodPricePairFromSupplierCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.DeleteSupplierGoodNameBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteGoodPricePairFromSupplierCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            DeleteGoodPricePairFromSupplierCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private DeleteGoodPricePairFromSupplierCommandParser parser \u003d new DeleteGoodPricePairFromSupplierCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"1\", DeleteGoodPricePairFromSupplierCommand.MESSAGE_MUST_INCLUDE_GOODNAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_GOOD_NAME + VALID_GOOD_APPLE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cGoodName\u003e goodNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        goodNames.add(new GoodBuilder().withGoodName(VALID_GOOD_APPLE).build().getGoodName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteSupplierGoodName descriptor \u003d new DeleteSupplierGoodNameBuilder().withGoodNames(goodNames).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        DeleteGoodPricePairFromSupplierCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new DeleteGoodPricePairFromSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteSupplierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteSupplierCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * outside of the DeleteSupplierCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * same path through the DeleteSupplierCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteSupplierCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private DeleteSupplierCommandParser parser \u003d new DeleteSupplierCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteSupplierCommand(INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                DeleteSupplierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "PangJiaDa": 3,
      "LiuChao93": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditSupplierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FORMAT_OFFER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOOD_OFFER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_OFFER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUPPLIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String OFFER_EMPTY \u003d \" \" + PREFIX_OFFER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSupplierCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private EditSupplierCommandParser parser \u003d new EditSupplierCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"1\", EditSupplierCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GOOD_OFFER_DESC, GoodName.MESSAGE_CONSTRAINTS); // invalid good name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_OFFER_DESC, Price.MESSAGE_CONSTRAINTS); // invalid offer price"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FORMAT_OFFER_DESC, Offer.MESSAGE_CONSTRAINTS); // invalid offer price"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // while parsing {@code PREFIX_OFFER} alone will reset the offers of the {@code Supplier} being edited,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // parsing it together with a valid offer results in error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_DESC_APPLE + OFFER_DESC_BANANA + OFFER_EMPTY, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_DESC_APPLE + OFFER_EMPTY + OFFER_DESC_BANANA, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertParseFailure(parser, \"1\" + OFFER_EMPTY + OFFER_DESC_APPLE + OFFER_DESC_BANANA, Offer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + OFFER_DESC_BANANA"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA, VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SUPPLIER;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // offers"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OFFER_DESC_APPLE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptorBuilder().withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + OFFER_DESC_APPLE + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + OFFER_DESC_APPLE"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + OFFER_DESC_BANANA;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_APPLE, VALID_OFFER_APPLE, VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parse_resetOffers_success() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SUPPLIER;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OFFER_EMPTY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder().withOffers().build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        EditSupplierCommand expectedCommand \u003d new EditSupplierCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 30,
      "-": 145,
      "LiuChao93": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindGoodCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindGoodCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodSupplierPairContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindGoodCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private FindGoodCommandParser parser \u003d new FindGoodCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                FindGoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindGoodCommand expectedFindGoodCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new FindGoodCommand(new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(\"apple\", \"banana\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseSuccess(parser, \"apple banana\", expectedFindGoodCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseSuccess(parser, \" \\n apple \\n \\t banana  \\t\", expectedFindGoodCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindSupplierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.FindSupplierCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class FindSupplierCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private FindSupplierCommandParser parser \u003d new FindSupplierCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                FindSupplierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        FindSupplierCommand expectedFindSupplierCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new FindSupplierCommand(new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindSupplierCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindSupplierCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "LiuChao93": 8,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindTransactionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.BUY_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.FindTransactionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionContainKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class FindTransactionCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private FindTransactionCommandParser parser \u003d new FindTransactionCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                FindTransactionCommand.MESSAGE_NO_FIELD_PROVIDED));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand expectedFindTransactionCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new FindTransactionCommand(new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Arrays.asList(\"Alice\", \"Bob\"), Arrays.asList(\"Apple\", \"Banana\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, \"buy n/Alice Bob g/Apple Banana\", expectedFindTransactionCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, \"buy n/\" + PREAMBLE_WHITESPACE + PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        + \"Alice\" + PREAMBLE_WHITESPACE + PREAMBLE_WHITESPACE + PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        + \"Bob g/Apple Banana\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                expectedFindTransactionCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_withOnlyOneCondition_returnsFindCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // only type of transaction given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        FindTransactionCommand expectedFindTransactionCommand \u003d new FindTransactionCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Collections.emptyList(), Collections.emptyList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // extra space behind of \"buy\" is to account for space between preamble and prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, \"buy\" + PREAMBLE_WHITESPACE, expectedFindTransactionCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // only supplier name is given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedFindTransactionCommand \u003d new FindTransactionCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Arrays.asList(\"Alice\", \"Bob\"), Collections.emptyList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // extra space in front of \"n/Alice bob\" is to account for space between preamble and prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindTransactionCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // only good name is given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedFindTransactionCommand \u003d new FindTransactionCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        Collections.emptyList(), Arrays.asList(\"Apple\", \"Banana\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // extra space in front of \"g/Apple Banana\" is to account for space between preamble and prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, \" g/Apple Banana\", expectedFindTransactionCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_OFFER \u003d \"nospace420\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_1 \u003d \"potato\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_2 \u003d \"chicken\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_1 \u003d \"6.0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_2 \u003d \"4\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_OFFER_1 \u003d VALID_GOOD_1 + \" \" + VALID_PRICE_1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_OFFER_2 \u003d VALID_GOOD_2 + \" \" + VALID_PRICE_2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(INDEX_FIRST_SUPPLIER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(INDEX_FIRST_SUPPLIER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOffer(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOffer(INVALID_OFFER));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_validValueWithoutWhitespace_returnsOffer() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer expectedOffer \u003d new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedOffer, ParserUtil.parseOffer(VALID_OFFER_1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffer_validValueWithWhitespace_returnsTrimmedOffer() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String offerWithWhitespace \u003d WHITESPACE + VALID_OFFER_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer expectedOffer \u003d new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(expectedOffer, ParserUtil.parseOffer(offerWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOffers(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_collectionWithInvalidOffers_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOffers(Arrays.asList(VALID_OFFER_1, INVALID_OFFER)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(ParserUtil.parseOffers(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseOffers_collectionWithValidOffers_returnsOfferSet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e actualOfferSet \u003d ParserUtil.parseOffers(Arrays.asList(VALID_OFFER_1, VALID_OFFER_2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cOffer\u003e expectedOfferSet \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new Offer(new GoodName(VALID_GOOD_1), new Price(VALID_PRICE_1)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new Offer(new GoodName(VALID_GOOD_2), new Price(VALID_PRICE_2))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(actualOfferSet, expectedOfferSet);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 34,
      "-": 164,
      "LiuChao93": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SellCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class SellCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_STRING \u003d \"10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_STRING \u003d \"11\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_STRING \u003d \"-1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_STRING \u003d \"9999999999999\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_SELLING_PRICE_STRING \u003d \"6.9\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_SELLING_PRICE_STRING \u003d \"-6.9\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_INDEX_PREAMBLE \u003d \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final GoodQuantity VALID_GOOD_QUANTITY \u003d new GoodQuantity(VALID_GOOD_QUANTITY_STRING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final Price VALID_SELLING_PRICE \u003d new Price(VALID_SELLING_PRICE_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_STRING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_EXTRA_DESC \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY_EXTRA_STRING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String VALID_SELLING_PRICE_DESC \u003d \" \" + PREFIX_PRICE + VALID_SELLING_PRICE_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_SELLING_PRICE_DESC \u003d \" \" + PREFIX_PRICE + INVALID_SELLING_PRICE_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE_DESC \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_NEGATIVE_STRING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_OVERFLOW_DESC \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            \" \" + PREFIX_QUANTITY + INVALID_GOOD_QUANTITY_OVERFLOW_STRING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private SellCommandParser parser \u003d new SellCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SellCommand expectedCommand \u003d new SellCommand(VALID_GOOD_QUANTITY, VALID_SELLING_PRICE, INDEX_FIRST_GOOD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // Happy case"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_DESC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_SELLING_PRICE_DESC, expectedCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_GOOD_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_DESC"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_SELLING_PRICE_DESC, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // multiple quantities, only last one accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseSuccess(parser, VALID_GOOD_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_EXTRA_DESC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_GOOD_QUANTITY_DESC + VALID_SELLING_PRICE_DESC, expectedCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good display index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_QUANTITY_DESC + VALID_SELLING_PRICE_DESC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing good quantity"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_INDEX_PREAMBLE + VALID_SELLING_PRICE_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // missing selling price"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_INDEX_PREAMBLE + VALID_GOOD_QUANTITY_DESC + INVALID_SELLING_PRICE_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // invalid good quantities"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_INDEX_PREAMBLE + INVALID_GOOD_QUANTITY_NEGATIVE_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_SELLING_PRICE_DESC, GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_INDEX_PREAMBLE + INVALID_GOOD_QUANTITY_OVERFLOW_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + VALID_SELLING_PRICE_DESC, GoodQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetThresholdCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.logic.commands.SetThresholdCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SetThresholdCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_GOOD_QUANTITY_NEGATIVE \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_INDEX_DESC \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_GOOD_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + VALID_GOOD_QUANTITY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Index VALID_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final GoodQuantity VALID_THRESHOLD \u003d new GoodQuantity(VALID_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetThresholdCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private SetThresholdCommandParser parser \u003d new SetThresholdCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Happy case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SetThresholdCommand(VALID_INDEX, VALID_THRESHOLD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // multiple threshold, only last one accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_DESC + VALID_GOOD_QUANTITY_DESC + VALID_GOOD_QUANTITY_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SetThresholdCommand(VALID_INDEX, VALID_THRESHOLD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, VALID_GOOD_QUANTITY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // missing threshold"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        //  no index and missing threshold"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_GOOD_QUANTITY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_GOOD_QUANTITY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid threshold"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_DESC + INVALID_GOOD_QUANTITY_NEGATIVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getReadOnlyList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData_withValidReadOnlyPersonList_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void resetData_withDuplicateSuppliers_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Two suppliers with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e newSuppliers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newSuppliers);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasSupplier(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_supplierNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(addressBook.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_supplierInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(addressBook.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_supplierWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(addressBook.hasSupplier(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void getSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getReadOnlyList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * A stub ReadOnlyList\u0026lt;Supplier\u0026gt; whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyList\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        private final ObservableList\u003cSupplier\u003e suppliers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddressBookStub(Collection\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            this.suppliers.setAll(suppliers);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            return suppliers;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "-": 68,
      "LiuChao93": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getReadOnlyList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void resetData_withValidReadOnlyGoodList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory newData \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_withDuplicateGoods_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Two goods with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedAlice \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e newGoods \u003d Arrays.asList(APPLE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStub newData \u003d new InventoryStub(newGoods);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e inventory.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.hasGood(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(inventory.hasGood(APPLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(APPLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(inventory.hasGood(APPLE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodWithSameIdentityFieldsInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(APPLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedAlice \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(inventory.hasGood(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventory.getReadOnlyList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "     * A stub ReadOnlyList\u0026lt;Good\u0026gt; whose goods list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static class InventoryStub implements ReadOnlyList\u003cGood\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private final ObservableList\u003cGood\u003e goods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        InventoryStub(Collection\u003cGood\u003e goods) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            this.goods.setAll(goods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ObservableList\u003cGood\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return goods;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 6,
      "FangShaoHua94": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_BANANA_TRANSACTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.SELL_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.SupplierNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.TransactionHistoryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/book/file/path\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSupplier(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGood(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_supplierNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.hasGood(APPLE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void hasSupplier_supplierInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasGood_goodInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(modelManager.hasGood(APPLE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void getFilteredSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredSupplierList().remove(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getFilteredGoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGoodList().remove(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_noCommits_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e modelManager.undo());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_noUndo_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e modelManager.redo());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_affectsAllDatabases() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModel \u003d new ModelManager(modelManager.getAddressBook(), modelManager.getInventory(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                modelManager.getTransactionHistory(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addTransaction(SELL_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit_savesAllDatabases() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModelAfterFirstUndo \u003d new ModelManager(modelManager.getAddressBook(), modelManager.getInventory(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                modelManager.getTransactionHistory(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModelAfterFirstUndo.addGood(APPLE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModelAfterFirstUndo.addSupplier(ALICE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModelAfterSecondUndo \u003d new ModelManager(modelManager.getAddressBook(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                modelManager.getInventory(), modelManager.getTransactionHistory(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModelAfterSecondUndo.addGood(APPLE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // check that commit saves both databases, so one undo will only remove one item here"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(modelManager, expectedModelAfterFirstUndo);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(modelManager, expectedModelAfterSecondUndo);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_affectsAllDatabases() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModel \u003d new ModelManager(modelManager.getAddressBook(), modelManager.getInventory(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                modelManager.getTransactionHistory(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addGood(APPLE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addSupplier(ALICE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addTransaction(SELL_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addTransaction(SELL_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.redo();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit_afterUndo_overwritesHistory() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Model expectedModel \u003d new ModelManager(modelManager.getAddressBook(), modelManager.getInventory(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                modelManager.getTransactionHistory(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addGood(APPLE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedModel.addSupplier(BENSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addGood(APPLE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.addSupplier(BENSON);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // Alice should be absent"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withSupplier(ALICE).withSupplier(BENSON).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new InventoryBuilder().withGood(APPLE).withGood(BANANA).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory differentInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory transactionHistory \u003d new TransactionHistoryBuilder()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withTransaction(BUY_BANANA_TRANSACTION).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory differentTransactionHistory \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, inventory, transactionHistory, userPrefs);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, inventory, transactionHistory, userPrefs);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, inventory,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistory, userPrefs)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different inventory -\u003e returns false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentInventory,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistory, userPrefs)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different transaction history -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                differentTransactionHistory, userPrefs)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        modelManager.updateFilteredSupplierList(new SupplierNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistory, userPrefs)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        modelManager.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        keywords \u003d APPLE.getGoodName().fullGoodName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.updateFilteredGoodList(new GoodNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistory, userPrefs)));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        modelManager.updateFilteredGoodList(PREDICATE_SHOW_ALL_GOODS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, inventory,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistory, differentUserPrefs)));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 87,
      "FangShaoHua94": 64,
      "-": 122,
      "LiuChao93": 14,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TransactionHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.BuyTransactionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionHistoryTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final TransactionHistory transactionHistory \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(Collections.emptyList(), transactionHistory.getReadOnlyList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionHistory.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_withValidReadOnlyTransactionHistory_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory newData \u003d getTypicalTransactionHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(newData, transactionHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void resetData_withDuplicateTransactions_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Two transactions with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Transaction editedTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withGood(BANANA).withSupplier(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cTransaction\u003e newTransactions \u003d Arrays.asList(BUY_APPLE_TRANSACTION, editedTransaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistoryStub newData \u003d new TransactionHistoryStub(newTransactions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e transactionHistory.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasTransaction_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionHistory.hasTransaction(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasTransaction_transactionNotInTransactionHistory_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(transactionHistory.hasTransaction(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasTransaction_transactionInTransactionHistory_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(transactionHistory.hasTransaction(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void hasTransaction_transactionWithSameIdentityFieldsInTransactionHistory_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Transaction editedAlice \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withGood(BANANA).withSupplier(BENSON).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(transactionHistory.hasTransaction(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e transactionHistory.getReadOnlyList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * A stub ReadOnlyTransactionHistory whose transactions list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static class TransactionHistoryStub implements ReadOnlyList\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistoryStub(Collection\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            this.transactions.setAll(transactions);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 4,
      "FangShaoHua94": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_withoutCommits_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterOneCommit_removeChanges() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterMultipleCommits_returnsToMostRecentCommit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookFirstCommit \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookSecondCommit \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(CARL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // first undo goes to second commit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookSecondCommit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // second undo goes to first commit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookFirstCommit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterUnsavedChanges_removesUnsavedAndPreviousChanges() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Supplier p \u003d new SupplierBuilder().withName(\"Erased Ignored\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(p);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_withoutUndo_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedAddressBook.redo());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterOneUndo_redoChanges() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterMultipleUndo_returnsToMostRecentUndo() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(BENSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookSecondCommit \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(CARL);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookThirdCommit \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookSecondCommit);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookThirdCommit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterUnsavedChanges_removesUnsavedChangesAndRedoPreviousChanges() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Supplier p \u003d new SupplierBuilder().withName(\"Erased Ignored\").build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(p);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit_afterUndo_removesFutureHistory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookAfterRewrite \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBookAfterRewrite.addSupplier(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBookAfterRewrite.addSupplier(BENSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBookAfterRewrite.addSupplier(DANIEL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        AddressBook expectedAddressBookAfterUndoFromRewrite \u003d new AddressBook(versionedAddressBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBookAfterUndoFromRewrite.addSupplier(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedAddressBookAfterUndoFromRewrite.addSupplier(BENSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(BENSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(CARL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures the current state points to the most recent commit"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.addSupplier(DANIEL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookAfterRewrite);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that current state is not added on top of deleted history"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookAfterUndoFromRewrite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that deleted history is inaccessible after undo from rewrite"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedAddressBook, expectedAddressBookAfterRewrite);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.CITRUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.DURIAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private VersionedInventory versionedInventory \u003d new VersionedInventory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_withoutCommits_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedInventory.undo());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterOneCommit_removeChanges() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterMultipleCommits_returnsToMostRecentCommit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventoryFirstCommit \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(BANANA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventorySecondCommit \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(CITRUS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // first undo goes to second commit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventorySecondCommit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // second undo goes to first commit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventoryFirstCommit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterUnsavedChanges_removesUnsavedAndPreviousChanges() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Good g \u003d new GoodBuilder().withGoodName(\"Erased Ignored\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(g);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_withoutUndo_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedInventory.redo());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterOneUndo_redoChanges() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterMultipleUndo_returnsToMostRecentUndo() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(BANANA);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventorySecondCommit \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(CITRUS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventoryThirdCommit \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventorySecondCommit);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventoryThirdCommit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterUnsavedChanges_removesUnsavedChangesAndRedoPreviousChanges() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Good g \u003d new GoodBuilder().withGoodName(\"Erased Ignored\").build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(g);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit_afterUndo_removesFutureHistory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventoryAfterRewrite \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventoryAfterRewrite.addGood(APPLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventoryAfterRewrite.addGood(BANANA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventoryAfterRewrite.addGood(DURIAN);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Inventory expectedInventoryAfterUndoFromRewrite \u003d new Inventory(versionedInventory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventoryAfterUndoFromRewrite.addGood(APPLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedInventoryAfterUndoFromRewrite.addGood(BANANA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(APPLE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(BANANA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(CITRUS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures the current state points to the most recent commit"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.addGood(DURIAN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventoryAfterRewrite);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that current state is not added on top of deleted history"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventoryAfterUndoFromRewrite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that deleted history is inaccessible after undo from rewrite"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedInventory, expectedInventoryAfterRewrite);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTransactionHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_DURIAN_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.SELL_BANANA_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.SELL_CITRUS_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.testutil.BuyTransactionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class VersionedTransactionHistoryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private VersionedTransactionHistory versionedTransactionHistory \u003d new VersionedTransactionHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_withoutCommits_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedTransactionHistory.undo());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterOneCommit_removeChanges() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistory \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterMultipleCommits_returnsToMostRecentCommit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistoryFirstCommit \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistorySecondCommit \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_CITRUS_TRANSACTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // first undo goes to second commit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistorySecondCommit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // second undo goes to first commit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistoryFirstCommit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void undo_afterUnsavedChanges_removesUnsavedAndPreviousChanges() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistory \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Transaction t \u003d new BuyTransactionBuilder().withGood("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new GoodBuilder().withGoodName(\"Erased Ignored\").build()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_withoutUndo_throwsStateNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(StateNotFoundException.class, () -\u003e versionedTransactionHistory.redo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterOneUndo_redoChanges() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistory \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.redo();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterMultipleUndo_returnsToMostRecentUndo() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistorySecondCommit \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_CITRUS_TRANSACTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistoryThirdCommit \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.redo();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistorySecondCommit);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.redo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistoryThirdCommit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void redo_afterUnsavedChanges_removesUnsavedChangesAndRedoPreviousChanges() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistory \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Transaction t \u003d new BuyTransactionBuilder().withGood("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new GoodBuilder().withGoodName(\"Erased Ignored\").build()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(t);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.redo();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void commit_afterUndo_removesFutureHistory() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistoryAfterRewrite \u003d new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistoryAfterRewrite.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistoryAfterRewrite.addTransaction(SELL_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistoryAfterRewrite.addTransaction(BUY_DURIAN_TRANSACTION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        TransactionHistory expectedTransactionHistoryAfterUndoFromRewrite \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                new TransactionHistory(versionedTransactionHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistoryAfterUndoFromRewrite.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedTransactionHistoryAfterUndoFromRewrite.addTransaction(SELL_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(SELL_CITRUS_TRANSACTION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures the current state points to the most recent commit"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.addTransaction(BUY_DURIAN_TRANSACTION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.commit();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistoryAfterRewrite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that current state is not added on top of deleted history"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.undo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistoryAfterUndoFromRewrite);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // ensures that deleted history is inaccessible after undo from rewrite"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        versionedTransactionHistory.redo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(versionedTransactionHistory, expectedTransactionHistoryAfterRewrite);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different goods -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_goodNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new GoodNameContainsKeywordsPredicate(Collections.singletonList(\"Fuji\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji apple\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Fuji\", \"Apple\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji Apple\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Fuji\", \"Apple\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"China Apple\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"fUJi\", \"aPPlE\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new GoodBuilder().withGoodName(\"Fuji Apple\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_goodNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodNameContainsKeywordsPredicate predicate \u003d new GoodNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new GoodBuilder().withGoodName(\"Apple\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new GoodNameContainsKeywordsPredicate(Arrays.asList(\"Cranberry\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new GoodBuilder().withGoodName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_BLUEBERRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodNameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GoodName(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GoodName(invalidName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isValidGoodName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e GoodName.isValidGoodName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"apple*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(GoodName.isValidGoodName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"fuji apple\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"2nd Gen fuji apple\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"Fuji apple\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(GoodName.isValidGoodName(\"fuji apple with very very very long name\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodName sampleGoodName \u003d new GoodName(VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sampleGoodName.equals(new GoodName(VALID_GOOD_NAME_BLUEBERRY)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sampleGoodName.equals(new GoodName(VALID_GOOD_NAME_AVOCADO)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodName sampleGoodName \u003d new GoodName(VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sampleGoodName.toString(), VALID_GOOD_NAME_AVOCADO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sampleGoodName.toString(), VALID_GOOD_NAME_BLUEBERRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ZERO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodQuantityTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        int invalidGoodQuantity \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GoodQuantity(invalidGoodQuantity));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isValidGoodQuantity() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertFalse(GoodQuantity.isValidGoodQuantity(String.valueOf(-1))); // negative value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(0)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(+1))); // positive value with plus sign"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertTrue(GoodQuantity.isValidGoodQuantity(String.valueOf(100)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity sampleGoodQuantity \u003d new GoodQuantity(VALID_GOOD_QUANTITY_ONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sampleGoodQuantity.equals(new GoodQuantity(VALID_GOOD_QUANTITY_ZERO)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sampleGoodQuantity.equals(new GoodQuantity(VALID_GOOD_QUANTITY_ONE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        GoodQuantity sampleGoodQuantity \u003d new GoodQuantity(VALID_GOOD_QUANTITY_ONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sampleGoodQuantity.toString(), String.valueOf(VALID_GOOD_QUANTITY_ONE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sampleGoodQuantity.toString(), String.valueOf(VALID_GOOD_QUANTITY_ZERO));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 43,
      "PangJiaDa": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodSupplierPairContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class GoodSupplierPairContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final String VALID_OFFER_APPLE \u003d \"fugi apple 0.05\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(Collections.singletonList(\"apple\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        predicate \u003d new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(\"apple\", \"fugi\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        predicate \u003d new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(\"fugi\", \"potato\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        predicate \u003d new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(\"FuGi\", \"aPPle\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        GoodSupplierPairContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new GoodSupplierPairContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        predicate \u003d new GoodSupplierPairContainsKeywordsPredicate(Arrays.asList(\"banana\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withOffers(VALID_OFFER_APPLE).build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/GoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_QUANTITY_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null good name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new Good(null, new GoodQuantity(VALID_GOOD_QUANTITY_ONE),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                        new GoodQuantity(VALID_GOOD_QUANTITY_ONE)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null good quantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Good(new GoodName(VALID_GOOD_NAME_AVOCADO),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                null, new GoodQuantity(VALID_GOOD_QUANTITY_ONE)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // null threshold"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Good(new GoodName(VALID_GOOD_NAME_AVOCADO),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new GoodQuantity(VALID_GOOD_QUANTITY_ONE), null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isSameGoodTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.isSameGood(APPLE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.isSameGood(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same good quantity, different good name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.isSameGood(editedApple));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same good name, different quantity -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withGoodQuantity(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.isSameGood(editedApple));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same good name, different threshold -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withThreshold(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.isSameGood(editedApple));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good appleCopy \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good quantity -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withGoodQuantity(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different threshold -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedApple \u003d new GoodBuilder(APPLE).withThreshold(VALID_GOOD_QUANTITY_ONE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good testGood \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(testGood.toString().equals(VALID_GOOD_NAME_AVOCADO));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 79,
      "PangJiaDa": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/good/UniqueGoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.good;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.DuplicateGoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.exceptions.GoodNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueGoodListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueGoodList uniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(uniqueGoodList.contains(APPLE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueGoodList.contains(APPLE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_goodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueGoodList.contains(editedApple));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_duplicateGood_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.add(APPLE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_nullTargetGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGood(null, APPLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_nullEditedGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGood(APPLE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_targetGoodNotInList_throwsGoodNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(GoodNotFoundException.class, () -\u003e uniqueGoodList.setGood(APPLE, APPLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodIsSameGood_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Good editedApple \u003d new GoodBuilder(APPLE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, editedApple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(editedApple);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGood(APPLE, BANANA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGood_editedGoodHasNonUniqueIdentity_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.setGood(APPLE, BANANA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_nullGood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_goodDoesNotExist_throwsGoodNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(GoodNotFoundException.class, () -\u003e uniqueGoodList.remove(APPLE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_existingGood_removesGood() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.remove(APPLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_nullUniqueGoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGoods((UniqueGoodList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_uniqueGoodList_replacesOwnListWithProvidedUniqueGoodList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGoods(expectedUniqueGoodList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueGoodList.setGoods((List\u003cGood\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.add(APPLE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e goodList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueGoodList.setGoods(goodList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueGoodList expectedUniqueGoodList \u003d new UniqueGoodList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueGoodList.add(BANANA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueGoodList, uniqueGoodList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setGoods_listWithDuplicateGoods_throwsDuplicateGoodException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cGood\u003e listWithDuplicateGoods \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateGoodException.class, () -\u003e uniqueGoodList.setGoods(listWithDuplicateGoods));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            -\u003e uniqueGoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/offer/OfferTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class OfferTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_BLUEBERRY \u003d \"blueberry\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_APPLE \u003d \"apple\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_CHEAP \u003d \"0.05\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_EXPENSIVE \u003d \"50\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_anyNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(new GoodName(VALID_GOOD_BLUEBERRY), null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Offer(null, new Price(VALID_PRICE_CHEAP)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_self_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, offer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_sameGoodSamePrice_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer same \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, same);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_sameGoodDifferentPrice_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer differentPrice \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_CHEAP));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(offer, differentPrice);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_differentGoodSamePrice_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer differentGood \u003d new Offer(new GoodName(VALID_GOOD_BLUEBERRY), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertNotEquals(offer, differentGood);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void equals_differentGoodDifferentPrice_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer \u003d new Offer(new GoodName(VALID_GOOD_APPLE), new Price(VALID_PRICE_EXPENSIVE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Offer offer2 \u003d new Offer(new GoodName(VALID_GOOD_BLUEBERRY), new Price(VALID_PRICE_CHEAP));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertNotEquals(offer, offer2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 48,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/offer/PriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.model.offer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_NEGATIVE \u003d \"-1234.56\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_PLUS_SIGN \u003d \"+1234.56\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_ELEVEN_INTEGRAL_DIGITS \u003d \"12345678912.53\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_THREE_DECIMAL_PLACES \u003d \"12.123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_TEXT \u003d \"one hundred\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE_SPECIAL_CHARACTERS \u003d \"@!)#\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_NO_DECIMAL_POINT \u003d \"2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_DECIMAL_POINT_ONLY \u003d \"5.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_ONE_DECIMAL_PLACE \u003d \"3.5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_TWO_DECIMAL_PLACES \u003d \"6.58\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE_TEN_INTEGRAL_DIGITS \u003d \"1234567891.12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final int VALID_CENTS \u003d 123;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_CENTS_IN_DOLLARS \u003d \"1.23\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_null_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_emptyString_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_negativeNumber_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_NEGATIVE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_positiveSign_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_PLUS_SIGN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_elevenDigitsIntegralPart_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_ELEVEN_INTEGRAL_DIGITS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_moreThanTwoDecimalPlaces_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_THREE_DECIMAL_PLACES));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_alphabeticalText_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_TEXT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_specialCharacters_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertFalse(Price.isValidPrice(INVALID_PRICE_SPECIAL_CHARACTERS)); // special characters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void isValidPrice_validPrices_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_NO_DECIMAL_POINT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_DECIMAL_POINT_ONLY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_ONE_DECIMAL_PLACE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_TWO_DECIMAL_PLACES));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertTrue(Price.isValidPrice(VALID_PRICE_TEN_INTEGRAL_DIGITS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void parseCents_validPrices_shouldConvertToCents() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_CENTS_IN_DOLLARS).getCentValue(), VALID_CENTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toString_shouldHaveDollarSignAndTwoDecimalPlaces() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_NO_DECIMAL_POINT).toString(), \"$\" + VALID_PRICE_NO_DECIMAL_POINT + \".00\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_DECIMAL_POINT_ONLY).toString(), \"$\" + VALID_PRICE_DECIMAL_POINT_ONLY + \"00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_ONE_DECIMAL_PLACE).toString(), \"$\" + VALID_PRICE_ONE_DECIMAL_PLACE + \"0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertEquals(new Price(VALID_PRICE_TWO_DECIMAL_PLACES).toString(), \"$\" + VALID_PRICE_TWO_DECIMAL_PLACES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 1,
      "-": 38,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/SupplierNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class SupplierNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        predicate \u003d new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        predicate \u003d new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        predicate \u003d new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        SupplierNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                new SupplierNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        predicate \u003d new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        predicate \u003d new SupplierNameContainsKeywordsPredicate(Arrays.asList(\"12345\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "LiuChao93": 10,
      "PangJiaDa": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/SupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e supplier.getOffers().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void isSameSupplier() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(ALICE.isSameSupplier(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                .withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier aliceCopy \u003d new SupplierBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // different offers -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withOffers(VALID_OFFER_BANANA).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "-": 63,
      "LiuChao93": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/supplier/UniqueSupplierListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.exceptions.SupplierNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class UniqueSupplierListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private final UniqueSupplierList uniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void contains_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void contains_supplierNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertFalse(uniqueSupplierList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void contains_supplierInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(uniqueSupplierList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void contains_supplierWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertTrue(uniqueSupplierList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void add_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void add_duplicateSupplier_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e uniqueSupplierList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_nullTargetSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSupplier(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_nullEditedSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_targetSupplierNotInList_throwsSupplierNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(SupplierNotFoundException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_editedSupplierIsSameSupplier_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedUniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_editedSupplierHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedUniqueSupplierList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_editedSupplierHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSupplier_editedSupplierHasNonUniqueIdentity_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void remove_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void remove_supplierDoesNotExist_throwsSupplierNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(SupplierNotFoundException.class, () -\u003e uniqueSupplierList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void remove_existingSupplier_removesSupplier() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers_nullUniqueSupplierList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSuppliers((UniqueSupplierList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers_uniqueSupplierList_replacesOwnListWithProvidedUniqueSupplierList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.setSuppliers(expectedUniqueSupplierList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSuppliers((List\u003cSupplier\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e supplierList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        uniqueSupplierList.setSuppliers(supplierList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void setSuppliers_listWithDuplicateSuppliers_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        List\u003cSupplier\u003e listWithDuplicateSuppliers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                uniqueSupplierList.setSuppliers(listWithDuplicateSuppliers));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            -\u003e uniqueSupplierList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/BuyTransactionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.CITRUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.BuyTransactionBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class BuyTransactionTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String DEFAULT_ID \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String DEFAULT_PRICE \u003d \"26.58\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new BuyTransaction(null, APPLE, ALICE, new Price(DEFAULT_PRICE)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new BuyTransaction(new TransactionId(DEFAULT_ID), null, BENSON, new Price(DEFAULT_PRICE)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new BuyTransaction(new TransactionId(DEFAULT_ID), BANANA, null, new Price(DEFAULT_PRICE)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new BuyTransaction(new TransactionId(DEFAULT_ID), CITRUS, CARL, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isSameBuyTransactionTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction buyTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(buyTransaction.isSameBuyTransaction(buyTransaction));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(buyTransaction.isSameBuyTransaction(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different id, same good, same person, same buy price -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction editedBuyTransaction \u003d new BuyTransactionBuilder(buyTransaction)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withId(DEFAULT_ID).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(buyTransaction.isSameBuyTransaction(editedBuyTransaction));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same id, different good, same person, same buy price -\u003ereturn true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedBuyTransaction \u003d new BuyTransactionBuilder(buyTransaction)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(BANANA).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(buyTransaction.isSameBuyTransaction(editedBuyTransaction));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction buyTransactionCopy \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(buyTransactionCopy, new BuyTransactionBuilder(buyTransactionCopy).build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(buyTransactionCopy, BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, 5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        BuyTransaction editedBuyTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(BANANA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, editedBuyTransaction);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedBuyTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withId(DEFAULT_ID).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, editedBuyTransaction);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different person -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedBuyTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(BENSON).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, editedBuyTransaction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different buy price -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedBuyTransaction \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withPrice(DEFAULT_PRICE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(buyTransactionCopy, editedBuyTransaction);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/SellTransactionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.SELL_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.SellTransactionBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SellTransactionTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String DEFAULT_ID \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String DEFAULT_PRICE \u003d \"36.58\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SellTransaction(null, APPLE, new Price(DEFAULT_PRICE)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SellTransaction(new TransactionId(DEFAULT_ID), null, new Price(DEFAULT_PRICE)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SellTransaction(new TransactionId(DEFAULT_ID), APPLE, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isSameSellTransactionTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SellTransaction sellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sellTransaction.isSameSellTransaction(SELL_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sellTransaction.isSameSellTransaction(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different id, same good, same person, same buy price -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SellTransaction editedSellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withId(DEFAULT_ID).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(sellTransaction.isSameSellTransaction(editedSellTransaction));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same id, different good, same person, same buy price -\u003ereturn true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedSellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(BANANA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(sellTransaction.isSameSellTransaction(editedSellTransaction));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SellTransaction sellTransactionCopy \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sellTransactionCopy, new SellTransactionBuilder(SELL_APPLE_TRANSACTION).build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(sellTransactionCopy, SELL_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sellTransactionCopy, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sellTransactionCopy, 5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        SellTransaction editedSellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(BANANA).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sellTransactionCopy, editedSellTransaction);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedSellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withId(DEFAULT_ID).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sellTransactionCopy, editedSellTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different buy price -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        editedSellTransaction \u003d new SellTransactionBuilder(SELL_APPLE_TRANSACTION)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withPrice(DEFAULT_PRICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(sellTransactionCopy, editedSellTransaction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionContainKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.BUY_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.parser.FindTransactionCommandParser.TransactionType.SELL_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.BuyTransactionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.GoodBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.SellTransactionBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e EMPTY_LIST \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e FIRST_SUPPLIER_LIST \u003d Collections.singletonList(\"Alice\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e SECOND_SUPPLIER_LIST \u003d Arrays.asList(\"Alice\", \"Bob\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e SECOND_SUPPLIER_LIST_MIXED \u003d Arrays.asList(\"AlIcE\", \"bOb\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e FIRST_GOOD_LIST \u003d Collections.singletonList(\"Apple\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e SECOND_GOOD_LIST \u003d Arrays.asList(\"Apple\", \"Banana\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final List\u003cString\u003e SECOND_GOOD_LIST_MIXED \u003d Arrays.asList(\"ApPlE\", \"BAnaNa\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Supplier ALICE \u003d new SupplierBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Good APPLE \u003d new GoodBuilder().withGoodName(\"Fuji Apple\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final TransactionContainKeywordsPredicate BUY_PREDICATE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    EMPTY_LIST, EMPTY_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final TransactionContainKeywordsPredicate SELL_PREDICATE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new TransactionContainKeywordsPredicate(SELL_TRANSACTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    EMPTY_LIST, EMPTY_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(BUY_PREDICATE, BUY_PREDICATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate copy \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        EMPTY_LIST, EMPTY_LIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(BUY_PREDICATE, copy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(1, BUY_PREDICATE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(BUY_PREDICATE.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different transaction type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(BUY_PREDICATE, SELL_PREDICATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different supplier names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(BUY_PREDICATE, new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                FIRST_SUPPLIER_LIST, EMPTY_LIST));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different good names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(BUY_PREDICATE, new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST, FIRST_GOOD_LIST));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_transactionContainsKeywordsTypeOfTransaction_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // buy transaction"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(BUY_PREDICATE.test(new BuyTransactionBuilder().build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // sell transaction"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(SELL_PREDICATE.test(new SellTransactionBuilder().build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_transactionContainsKeywordsSupplierName_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // One supplier keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                FIRST_SUPPLIER_LIST, EMPTY_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(ALICE).build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // multiple supplier keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                SECOND_SUPPLIER_LIST, EMPTY_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(ALICE).build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                FIRST_SUPPLIER_LIST, EMPTY_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(new SupplierBuilder(ALICE).withName(\"Alice Lee\").build()).build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                SECOND_SUPPLIER_LIST_MIXED, EMPTY_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(new SupplierBuilder(ALICE).withName(\"Alice Lee\").build()).build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_transactionContainsKeywordsGoodName_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // One good keyword"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST, FIRST_GOOD_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(APPLE).build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // multiple good keyword"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST, SECOND_GOOD_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(APPLE).build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST, FIRST_GOOD_LIST).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(new GoodBuilder(APPLE).withGoodName(\"Fuji Apple\").build()).build()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(new TransactionContainKeywordsPredicate(EMPTY,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST, SECOND_GOOD_LIST_MIXED).test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(new GoodBuilder(APPLE).withGoodName(\"Fuji Apple\").build()).build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void test_transactionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // different type of transaction"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(BUY_PREDICATE.test(new SellTransactionBuilder().build()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // no keyword"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionContainKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new TransactionContainKeywordsPredicate(EMPTY, EMPTY_LIST, EMPTY_LIST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(predicate.test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(APPLE).build()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Non-matching supplier keyword"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new TransactionContainKeywordsPredicate(EMPTY, Collections.singletonList(\"James\"), EMPTY_LIST);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new BuyTransactionBuilder().withSupplier("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SupplierBuilder().withName(\"Alice Lee\").build()).build()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // only type of transaction matches, supplier name differs"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new TransactionContainKeywordsPredicate(BUY_TRANSACTION, Collections.singletonList(\"James\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                EMPTY_LIST);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new BuyTransactionBuilder().withSupplier("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new SupplierBuilder().withName(\"Alice Lee\").build()).build()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // supplier name and type of transaction match, good name differs"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Collections.singletonList(\"James\"), Collections.singletonList(\"Orange\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(new SupplierBuilder().withName(\"Alice Lee\").build())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(new GoodBuilder().withGoodName(\"Fuji Apple\").build())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // suppler name and good name match, type of transaction differs"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new TransactionContainKeywordsPredicate(SELL_TRANSACTION,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Collections.singletonList(\"Alice\"), Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(new SupplierBuilder().withName(\"Alice Lee\").build())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(new GoodBuilder().withGoodName(\"Fuji Apple\").build())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // type of transaction and good name match, suppler name differs"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        predicate \u003d new TransactionContainKeywordsPredicate(BUY_TRANSACTION,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                Collections.singletonList(\"Bob\"), Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(predicate.test(new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withSupplier(new SupplierBuilder().withName(\"Alice Lee\").build())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .withGood(new GoodBuilder().withGoodName(\"Fuji Apple\").build())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionId(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void constructor_invalidTransactionId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String invalidTransactionId \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionId(invalidTransactionId));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getTransactionIdTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionId transactionId \u003d new TransactionId(uuid.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(transactionId.getTransactionId(), uuid.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID otherId \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(transactionId.getTransactionId(), otherId.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void isValidTransactionId() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // null transaction id"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionId.isValidTransactionId(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // invalid transaction id"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(TransactionId.isValidTransactionId(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(TransactionId.isValidTransactionId(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(TransactionId.isValidTransactionId(\"3\")); // only 3 numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(TransactionId.isValidTransactionId(\"transaction\")); // alphabets that greater than f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(TransactionId.isValidTransactionId(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // valid transaction id"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(TransactionId.isValidTransactionId(\"cbd83eae-1e34-4c6e-90c1-e9fbc3d0e3ef\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(TransactionId.isValidTransactionId(\"af43a9b7-f896-44ad-be92-39ae801462d8\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(TransactionId.isValidTransactionId(\"1b505667-4970-47c2-8484-34a9b43ce260\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionId transactionId \u003d new TransactionId(uuid.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(transactionId, transactionId); //same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionId otherTransactionId \u003d new TransactionId(uuid.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(transactionId, otherTransactionId); //same id"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID otherId \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        otherTransactionId \u003d new TransactionId(otherId.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(transactionId, otherTransactionId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionId transactionId \u003d new TransactionId(uuid.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(transactionId.toString(), uuid.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UUID otherId \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotEquals(transactionId.toString(), otherId.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/UniqueTransactionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_BANANA_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.BuyTransactionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class UniqueTransactionListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private final UniqueTransactionList uniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_transactionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(uniqueTransactionList.contains(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_transactionInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueTransactionList.contains(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void contains_transactionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Transaction editedAlice \u003d new BuyTransactionBuilder(BUY_APPLE_TRANSACTION).withGood(BANANA)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertTrue(uniqueTransactionList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void add_duplicateTransaction_throwsDuplicateTransactionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e uniqueTransactionList.add(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.remove(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e uniqueTransactionList.remove(BUY_APPLE_TRANSACTION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.remove(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions_nullUniqueTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            uniqueTransactionList.setTransactions((UniqueTransactionList) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions_uniqueTransactionList_replacesOwnListWithProvidedUniqueTransactionList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueTransactionList.add(BUY_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.setTransactions(expectedUniqueTransactionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTransactionList.setTransactions((List\u003cTransaction\u003e) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.add(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d Collections.singletonList(BUY_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        uniqueTransactionList.setTransactions(transactionList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        UniqueTransactionList expectedUniqueTransactionList \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        expectedUniqueTransactionList.add(BUY_BANANA_TRANSACTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(expectedUniqueTransactionList, uniqueTransactionList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void setTransactions_listWithDuplicateTransactions_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        List\u003cTransaction\u003e listWithDuplicateTransactions \u003d Arrays.asList(BUY_APPLE_TRANSACTION, BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DuplicateTransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            uniqueTransactionList.setTransactions(listWithDuplicateTransactions));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            -\u003e uniqueTransactionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedGoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.storage.JsonAdaptedGood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonAdaptedGoodTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"A@pple\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int INVALID_GOOD_QUANTITY \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int INVALID_GOOD_THRESHOLD \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d APPLE.getGoodName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int VALID_GOOD_QUANTITY \u003d APPLE.getGoodQuantity().goodQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int VALID_GOOD_THRESHOLD \u003d 100;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_validGoodDetails_returnsGood() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d new JsonAdaptedGood(BANANA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(BANANA, good.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedGood(INVALID_GOOD_NAME, VALID_GOOD_QUANTITY, VALID_GOOD_THRESHOLD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d new JsonAdaptedGood(null, VALID_GOOD_QUANTITY, VALID_GOOD_THRESHOLD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedGood(VALID_GOOD_NAME, INVALID_GOOD_QUANTITY, VALID_GOOD_THRESHOLD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidThreshold_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedGood good \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedGood(VALID_GOOD_NAME, VALID_GOOD_QUANTITY, INVALID_GOOD_THRESHOLD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, good::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedOfferTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "public class JsonAdaptedOfferTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d \"blueberry\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_PRICE \u003d \"5.00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_GOOD_NAME \u003d \"inv@lid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"-55\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_anyNull_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // if both null, GoodName takes precedence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(null, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // null good name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offer \u003d new JsonAdaptedOffer(null, VALID_PRICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT, GoodName.class.getSimpleName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        offer \u003d new JsonAdaptedOffer(VALID_GOOD_NAME, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        expectedMessage \u003d String.format(JsonAdaptedOffer.MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidGoodName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(INVALID_GOOD_NAME, VALID_PRICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(VALID_GOOD_NAME, INVALID_PRICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidGoodNameAndInvalidPrice_throwsIllegalValueExceptionForGoodName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        JsonAdaptedOffer offer \u003d new JsonAdaptedOffer(INVALID_GOOD_NAME, INVALID_PRICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        String expectedMessage \u003d GoodName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, offer::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedSupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.storage.JsonAdaptedSupplier.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class JsonAdaptedSupplierTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"-1.0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final String VALID_GOOD \u003d \"anything\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private static final Set\u003cJsonAdaptedOffer\u003e VALID_OFFERS \u003d BENSON.getOffers().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .map(JsonAdaptedOffer::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void toModelType_validSupplierDetails_returnsSupplier() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(BENSON, supplier.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_OFFERS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    public void toModelType_invalidOffers_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        Set\u003cJsonAdaptedOffer\u003e invalidOffers \u003d new HashSet\u003c\u003e(VALID_OFFERS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        invalidOffers.add(new JsonAdaptedOffer(VALID_GOOD, INVALID_PRICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidOffers);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, supplier::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 10,
      "-": 68,
      "LiuChao93": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTransactionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.SELL_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonAdaptedTransactionTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_GOOD_NAME \u003d \"anything\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int INVALID_GOOD_QUANTITY \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final int VALID_THRESHOLD \u003d 100;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Set\u003cJsonAdaptedOffer\u003e VALID_OFFERS \u003d BENSON.getOffers().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .map(JsonAdaptedOffer::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_TYPE_BUY_TRANSACTION \u003d BuyTransaction.class.getSimpleName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_TYPE_SELL_TRANSACTION \u003d SellTransaction.class.getSimpleName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_TRANSACTION_ID \u003d \"dce857b1-36db-4f96-83a6-4dfc9a1e4ad9\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_TRANSACTION_ID \u003d \"this is id\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final JsonAdaptedGood VALID_GOOD \u003d new JsonAdaptedGood(APPLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final JsonAdaptedGood INVALID_GOOD \u003d new JsonAdaptedGood(VALID_GOOD_NAME, INVALID_GOOD_QUANTITY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            VALID_THRESHOLD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_PRICE \u003d \"12.46\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"-1.0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final JsonAdaptedSupplier VALID_PERSON \u003d new JsonAdaptedSupplier(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final JsonAdaptedSupplier INVALID_PERSON \u003d new JsonAdaptedSupplier(INVALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            VALID_EMAIL, VALID_ADDRESS, VALID_OFFERS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_validTransactionDetails_returnsTransaction() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d new JsonAdaptedTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(BUY_APPLE_TRANSACTION, buyTransaction.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d new JsonAdaptedTransaction(SELL_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(SELL_APPLE_TRANSACTION, sellTransaction.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidTransactionId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, INVALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d TransactionId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, INVALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullTransactionId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TransactionId.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, null,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGood_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        INVALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d GoodQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        INVALID_GOOD, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullGood_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        null, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Good.class.getSimpleName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        null, VALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, INVALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, INVALID_PRICE, VALID_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, null, VALID_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction sellTransaction \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_SELL_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, null, VALID_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, sellTransaction::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidSupplier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, INVALID_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_nullSupplier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonAdaptedTransaction buyTransaction \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE_BUY_TRANSACTION, VALID_TRANSACTION_ID,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                        VALID_GOOD, VALID_PRICE, null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Supplier.class.getSimpleName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, buyTransaction::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private java.util.Optional\u003cReadOnlyList\u003cSupplier\u003e\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void readAddressBook_invalidSupplierAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidSupplierAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void readAddressBook_invalidAndValidSupplierAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidSupplierAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cSupplier\u003e readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        original.addSupplier(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        original.removeSupplier(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        original.addSupplier(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void saveAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "-": 95,
      "LiuChao93": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.FIG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.GRAPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private java.util.Optional\u003cReadOnlyList\u003cGood\u003e\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"notJsonFormatInventory.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_invalidGoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidGoodInventory.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readInventory_invalidAndValidGoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidAndValidGoodInventory.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cGood\u003e readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addGood(FIG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.removeGood(APPLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addGood(GRAPE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void saveInventory(ReadOnlyList\u003cGood\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    .saveInventory(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(new Inventory(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "FangShaoHua94": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.testutil.TypicalSuppliers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final Path TYPICAL_SUPPLIERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSuppliersAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final Path INVALID_SUPPLIER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSupplierAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private static final Path DUPLICATE_SUPPLIER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateSupplierAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void toModelType_typicalSuppliersFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SUPPLIERS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        AddressBook typicalSuppliersAddressBook \u003d TypicalSuppliers.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertEquals(addressBookFromFile, typicalSuppliersAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void toModelType_invalidSupplierFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SUPPLIER_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public void toModelType_duplicateSuppliers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SUPPLIER_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_SUPPLIER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "LiuChao93": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.TypicalGoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"JsonSerializableInventoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TYPICAL_GOODS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalGoodsInventory.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path INVALID_GOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGoodInventory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path DUPLICATE_GOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateGoodInventory.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_typicalGoodsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_GOODS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory typicalGoodsInventory \u003d TypicalGoods.getTypicalInventory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(addressBookFromFile, typicalGoodsInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidGoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_GOOD_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_duplicateGoods_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_GOOD_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventory.MESSAGE_DUPLICATE_GOOD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTransactionHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonSerializableTransactionHistoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            \"data\", \"JsonSerializableTransactionHistoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalTransactionsTransactionHistory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidTransactionTransactionHistory.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path DUPLICATE_TRANSACTION_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateTransactionTransactionHistory.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_typicalTransactionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableTransactionHistory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "               JsonSerializableTransactionHistory.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory transactionHistoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory typicalTransactionsTransactionHistory \u003d TypicalTransactions.getTypicalTransactionHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(transactionHistoryFromFile, typicalTransactionsTransactionHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableTransactionHistory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableTransactionHistory.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void toModelType_duplicateTransactions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonSerializableTransactionHistory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                JsonSerializableTransactionHistory.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTransactionHistory.MESSAGE_DUPLICATE_TRANSACTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTransactionHistoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_APPLE_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_DURIAN_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BUY_ENTAWAK_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class JsonTransactionHistoryStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonTransactionHistoryStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readTransactionHistory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTransactionHistory(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private java.util.Optional\u003cReadOnlyList\u003cTransaction\u003e\u003e readTransactionHistory(String filePath)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new JsonTransactionHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                .readTransactionHistory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertFalse(readTransactionHistory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                readTransactionHistory(\"notJsonFormatTransactionHistory.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readTransactionHistory_invalidTransactionTransactionHistory_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                readTransactionHistory(\"invalidTransactionTransactionHistory.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readTransactionHistory_invalidAndValidTransactionTransactionHistory_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                readTransactionHistory(\"invalidAndValidTransactionTransactionHistory.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void readAndSaveTransactionHistory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTransactionHistory.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory original \u003d getTypicalTransactionHistory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonTransactionHistoryStorage jsonTransactionHistoryStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonTransactionHistoryStorage(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonTransactionHistoryStorage.saveTransactionHistory(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cTransaction\u003e readBack \u003d jsonTransactionHistoryStorage.readTransactionHistory(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new TransactionHistory(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addTransaction(BUY_DURIAN_TRANSACTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.removeTransaction(BUY_APPLE_TRANSACTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonTransactionHistoryStorage.saveTransactionHistory(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonTransactionHistoryStorage.readTransactionHistory(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new TransactionHistory(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        original.addTransaction(BUY_ENTAWAK_TRANSACTION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        jsonTransactionHistoryStorage.saveTransactionHistory(original); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        readBack \u003d jsonTransactionHistoryStorage.readTransactionHistory().get(); // file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new TransactionHistory(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveTransactionHistory_nullTransactionHistory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                saveTransactionHistory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Saves {@code transactionHistory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "    private void saveTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory, String filePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            new JsonTransactionHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                    .saveTransactionHistory(transactionHistory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void saveTransactionHistory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTransactionHistory(new TransactionHistory(), null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 5,
      "FangShaoHua94": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactionHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        JsonTransactionHistoryStorage transactionHistoryStorage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                new JsonTransactionHistoryStorage(getTempFilePath(\"transactionHistory\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, inventoryStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                transactionHistoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cSupplier\u003e retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cGood\u003e retrieved \u003d storageManager.readInventory().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertNotNull(storageManager.getTransactionHistoryFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public void transactionHistoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory original \u003d getTypicalTransactionHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        storageManager.saveTransactionHistory(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        ReadOnlyList\u003cTransaction\u003e retrieved \u003d storageManager.readTransactionHistory().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        assertEquals(original, new TransactionHistory(retrieved));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "FangShaoHua94": 44,
      "-": 64,
      "LiuChao93": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withSupplier(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Adds a new {@code Supplier} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public AddressBookBuilder withSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        addressBook.addSupplier(supplier);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "LiuChao93": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BuyTransactionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building BuyTransaction objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class BuyTransactionBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String UNIQUE_BUY_ID \u003d \"dce857b1-36db-4f96-83a6-4dfc9a1e4ad9\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_PRICE_TWO_DECIMAL_PLACES \u003d \"6.58\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionId id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Good good;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Supplier supplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Price buyPrice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id \u003d new TransactionId(UNIQUE_BUY_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        good \u003d APPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        supplier \u003d ALICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        buyPrice \u003d new Price(VALID_PRICE_TWO_DECIMAL_PLACES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code buyTransactionToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder(BuyTransaction buyTransactionToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id \u003d buyTransactionToCopy.getId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        good \u003d buyTransactionToCopy.getGood();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        supplier \u003d buyTransactionToCopy.getSupplier();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        buyPrice \u003d buyTransactionToCopy.getBuyPrice();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Id} of the {@code BuyTransaction} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder withId(String id) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.id \u003d new TransactionId(id);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Good} of the {@code BuyTransaction} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder withGood(Good good) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Supplier} of the {@code BuyTransaction} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder withSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Price} of the {@code BuyTransaction} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransactionBuilder withPrice(String buyPrice) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.buyPrice \u003d new Price(buyPrice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public BuyTransaction build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new BuyTransaction(id, good, supplier, buyPrice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeleteSupplierGoodNameBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.DeleteGoodPricePairFromSupplierCommand.DeleteSupplierGoodName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A utility class to help with building DeleteSupplierGoodName objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class DeleteSupplierGoodNameBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private DeleteSupplierGoodName descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierGoodNameBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new DeleteSupplierGoodName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierGoodNameBuilder(DeleteSupplierGoodName descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.descriptor \u003d new DeleteSupplierGoodName(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Set the {@code goodNames} to the {@code DeleteSupplierGoodName} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierGoodNameBuilder withGoodNames(Set\u003cGoodName\u003e goodNames) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setGoodNames(goodNames);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public DeleteSupplierGoodName build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditSupplierDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A utility class to help with building EditSupplierDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class EditSupplierDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private EditSupplierDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder(EditSupplierDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.descriptor \u003d new EditSupplierDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns an {@code EditSupplierDescriptor} with fields containing {@code supplier}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder(Supplier supplier) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setName(supplier.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setPhone(supplier.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setEmail(supplier.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setAddress(supplier.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setOffers(supplier.getOffers());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Name} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Email} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Address} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the {@code offers} into a {@code Set\u003cOffer\u003e} and set it to the {@code EditSupplierDescriptor}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptorBuilder withOffers(String... offers) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        Set\u003cOffer\u003e offerSet \u003d Stream.of(offers)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .map(ParserUtil::splitOnLastWhitespace)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .map(ParserUtil::getGoodPricePair)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .map(x -\u003e new Offer((GoodName) x[0], (Price) x[1]))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        descriptor.setOffers(offerSet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public EditSupplierDescriptor build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.model.good.GoodQuantity.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.GoodQuantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building Good objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class GoodBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String DEFAULT_GOOD_NAME \u003d \"Fuji Apple\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final int DEFAULT_GOOD_QUANTITY \u003d 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodName goodName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodQuantity goodQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private GoodQuantity threshold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d new GoodName(DEFAULT_GOOD_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d new GoodQuantity(DEFAULT_GOOD_QUANTITY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        threshold \u003d new GoodQuantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes the GoodBuilder with the data of {@code goodToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder(Good goodToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodName \u003d goodToCopy.getGoodName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        goodQuantity \u003d goodToCopy.getGoodQuantity();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        threshold \u003d goodToCopy.getThreshold();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code GoodName} of the {@code Good} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder withGoodName(String goodName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodName \u003d new GoodName(goodName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code GoodQuantity} of the {@code Good} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder withGoodQuantity(int goodQuantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.goodQuantity \u003d new GoodQuantity(goodQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Threshold} of the {@code Good} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public GoodBuilder withThreshold(int threshold) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.threshold \u003d new GoodQuantity(threshold);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Good build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new Good(goodName, goodQuantity, threshold);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building Inventory objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class InventoryBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Inventory inventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder(Inventory inventory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a new {@code Good} to the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public InventoryBuilder withGood(Good good) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        inventory.addGood(good);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public Inventory build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import seedu.address.model.version.StateNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Test cases that require a more specialized ModelStub should extend this class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * and implement only the methods required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setAddressBook(ReadOnlyList\u003cSupplier\u003e addressBook) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ReadOnlyList\u003cSupplier\u003e getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setInventory(ReadOnlyList\u003cGood\u003e inventory) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ReadOnlyList\u003cGood\u003e getInventory() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean hasGood(Good good) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void deleteGood(Good target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void addGood(Good good) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public int indexOfGood(Good good) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setGood(Good target, Good editedGood) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ObservableList\u003cGood\u003e getFilteredGoodList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void updateFilteredGoodList(Predicate\u003cGood\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Path getTransactionHistoryFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setTransactionHistoryFilePath(Path transactionHistoryFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void setTransactionHistory(ReadOnlyList\u003cTransaction\u003e transactionHistory) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ReadOnlyList\u003cTransaction\u003e getTransactionHistory() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void undo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void redo() throws StateNotFoundException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SellTransactionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.offer.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building SellTransaction objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class SellTransactionBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final String UNIQUE_SELL_ID \u003d \"cbd83eae-1e34-4c6e-90c1-e9fbc3d0e3ef\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private static final String VALID_PRICE_TWO_DECIMAL_PLACES \u003d \"16.58\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionId id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Good good;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private Price sellPrice;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransactionBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id \u003d new TransactionId(UNIQUE_SELL_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        good \u003d APPLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sellPrice \u003d new Price(VALID_PRICE_TWO_DECIMAL_PLACES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code sellTransactionToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransactionBuilder(SellTransaction sellTransactionToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        id \u003d sellTransactionToCopy.getId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        good \u003d sellTransactionToCopy.getGood();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        sellPrice \u003d sellTransactionToCopy.getSellPrice();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Id} of the {@code SellTransaction} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransactionBuilder withId(String id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.id \u003d new TransactionId(id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Good} of the {@code SellTransaction} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransactionBuilder withGood(Good good) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.good \u003d good;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Sets the {@code Price} of the {@code SellTransaction} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransactionBuilder withPrice(String sellPrice) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.sellPrice \u003d new Price(sellPrice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public SellTransaction build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new SellTransaction(id, good, sellPrice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SupplierBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A utility class to help with building Supplier objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private Set\u003cOffer\u003e offers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        offers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Initializes the SupplierBuilder with the data of {@code supplierToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder(Supplier supplierToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        name \u003d supplierToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        phone \u003d supplierToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        email \u003d supplierToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        address \u003d supplierToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        offers \u003d new HashSet\u003c\u003e(supplierToCopy.getOffers());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Name} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Parses the {@code offers} into a {@code Set\u003cOffer\u003e} and set it to the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder withOffers(String ... offers) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.offers \u003d SampleDataUtil.getOfferSet(offers);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Address} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Phone} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Sets the {@code Email} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public SupplierBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public Supplier build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return new Supplier(name, phone, email, address, offers);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuChao93": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SupplierUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.AddSupplierCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.logic.commands.EditSupplierCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import seedu.address.model.offer.Offer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A utility class for Supplier."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class SupplierUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns an add command string for adding the {@code supplier}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static String getAddCommand(Supplier supplier) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return AddSupplierCommand.COMMAND_WORD + \" \" + getSupplierDetails(supplier);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the part of command string for the given {@code supplier}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static String getSupplierDetails(Supplier supplier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        sb.append(PREFIX_NAME + supplier.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        sb.append(PREFIX_CONTACT + supplier.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        sb.append(PREFIX_EMAIL + supplier.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        sb.append(PREFIX_ADDRESS + supplier.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        supplier.getOffers().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            s -\u003e sb.append(PREFIX_OFFER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                    + s.getGoodName().toString() + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                    + s.getPrice().getValue() + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the part of command string for the given {@code EditSupplierDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static String getEditSupplierDescriptorDetails(EditSupplierDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_CONTACT).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "        if (descriptor.getOffers().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            Set\u003cOffer\u003e offers \u003d descriptor.getOffers().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            if (offers.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                sb.append(PREFIX_OFFER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                offers.forEach(s -\u003e sb.append(PREFIX_OFFER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                        .append(s.getGoodName().toString())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(\" \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(s.getPrice().getValue())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 13,
      "-": 34,
      "PangJiaDa": 5,
      "LiuChao93": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the middle index of the supplier in the {@code model}\u0027s supplier list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSupplierList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the last index of the supplier in the {@code model}\u0027s supplier list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns the supplier in the {@code model}\u0027s supplier list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static Supplier getSupplier(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        return model.getFilteredSupplierList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "LiuChao93": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TransactionHistoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class to help with building TransactionHistory objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TransactionHistoryBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TransactionHistory transactionHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistoryBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistoryBuilder(TransactionHistory transactionHistory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        this.transactionHistory \u003d transactionHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code TransactionHistory} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistoryBuilder withTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        transactionHistory.addTransaction(transaction);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public TransactionHistory build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return transactionHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGoods.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_AVOCADO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOOD_NAME_BLUEBERRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.good.Good;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class containing a list of {@code Good} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TypicalGoods {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good APPLE \u003d new GoodBuilder().withGoodName(\"Fuji apple\").withGoodQuantity(15).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good BANANA \u003d new GoodBuilder().withGoodName(\"Cavendish banana\").withGoodQuantity(150).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good CITRUS \u003d new GoodBuilder().withGoodName(\"Brazil citrus\").withGoodQuantity(20).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good DURIAN \u003d new GoodBuilder().withGoodName(\"Malaysia durian\").withGoodQuantity(11).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good ENTAWAK \u003d new GoodBuilder().withGoodName(\"Indonesia entawak\").withGoodQuantity(0).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good FIG \u003d new GoodBuilder().withGoodName(\"India fig\").withGoodQuantity(10).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good GRAPE \u003d new GoodBuilder().withGoodName(\"Spain grape\").withGoodQuantity(10).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    // Manually added - Good\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good AVOCADO \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_AVOCADO).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final Good BLUEBERRY \u003d new GoodBuilder().withGoodName(VALID_GOOD_NAME_BLUEBERRY).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an {@code Inventory} with all the typical goods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (Good good : getTypicalGoods()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            inventory.addGood(good);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static List\u003cGood\u003e getTypicalGoods() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CITRUS, DURIAN, ENTAWAK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 44,
      "PangJiaDa": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Index INDEX_FIRST_SUPPLIER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Index INDEX_SECOND_SUPPLIER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Index INDEX_THIRD_SUPPLIER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Index INDEX_FIRST_GOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Index INDEX_SECOND_GOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static final Index INDEX_THIRD_GOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "LiuChao93": 3,
      "PangJiaDa": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSuppliers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFER_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "import seedu.address.model.supplier.Supplier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": " * A utility class containing a list of {@code Supplier} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "public class TypicalSuppliers {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier ALICE \u003d new SupplierBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withOffers(\"hand sanitizer 500.00\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier BENSON \u003d new SupplierBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withOffers(\"pear 6\", \"orange 2\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier CARL \u003d new SupplierBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier DANIEL \u003d new SupplierBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withOffers(\"paper 3.55\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier ELLE \u003d new SupplierBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier FIONA \u003d new SupplierBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier GEORGE \u003d new SupplierBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier HOON \u003d new SupplierBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier IDA \u003d new SupplierBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    // Manually added - Supplier\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier AMY \u003d new SupplierBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withOffers(VALID_OFFER_APPLE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static final Supplier BOB \u003d new SupplierBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NicholasCF"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withOffers(VALID_OFFER_APPLE, VALID_OFFER_BANANA)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    private TypicalSuppliers() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical suppliers."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "        for (Supplier supplier : getTypicalSuppliers()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "            ab.addSupplier(supplier);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuChao93"
        },
        "content": "    public static List\u003cSupplier\u003e getTypicalSuppliers() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NicholasCF": 7,
      "-": 49,
      "LiuChao93": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTransactions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.CITRUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.DURIAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalGoods.ENTAWAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import static seedu.address.testutil.TypicalSuppliers.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.TransactionHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.BuyTransaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.SellTransaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final BuyTransaction BUY_APPLE_TRANSACTION \u003d new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"977f63d6-a9b8-43b2-b515-a7ef73d56e92\").withGood(APPLE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withSupplier(ALICE).withPrice(\"5.20\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final BuyTransaction BUY_BANANA_TRANSACTION \u003d new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"433c1c49-b9e7-4fc0-ad28-228c25520662\").withGood(BANANA)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withSupplier(BENSON).withPrice(\"55.20\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final BuyTransaction BUY_CITRUS_TRANSACTION \u003d new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"b74a40d0-2938-46b1-97f7-9e16ddd55663\").withGood(CITRUS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withSupplier(CARL).withPrice(\"15.20\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final BuyTransaction BUY_DURIAN_TRANSACTION \u003d new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"11516529-bda9-42b7-b142-ff4d1fc0b10e\").withGood(DURIAN)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withSupplier(DANIEL).withPrice(\"50.20\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final BuyTransaction BUY_ENTAWAK_TRANSACTION \u003d new BuyTransactionBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"5a6445a6-97a2-4b83-95b8-bd576f76e3b3\").withGood(ENTAWAK)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withSupplier(ELLE).withPrice(\"11.20\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final SellTransaction SELL_APPLE_TRANSACTION \u003d new SellTransactionBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"a708ae13-af41-40f1-9633-9b85cd5575ce\").withGood(APPLE).withPrice(\"5.20\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final SellTransaction SELL_BANANA_TRANSACTION \u003d new SellTransactionBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"b367c308-f546-403d-8c8c-994d77cac4cc\").withGood(BANANA).withPrice(\"55.20\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static final SellTransaction SELL_CITRUS_TRANSACTION \u003d new SellTransactionBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            .withId(\"5560c20d-07df-4288-a6e5-edb05a9e6d8c\").withGood(CITRUS).withPrice(\"15.20\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    private TypicalTransactions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     * Returns an {@code TransactionHistory} with all the typical transactions."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static TransactionHistory getTypicalTransactionHistory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        TransactionHistory th \u003d new TransactionHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        for (Transaction person : getTypicalTransactions()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "            th.addTransaction(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return th;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransactions() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUY_APPLE_TRANSACTION, BUY_BANANA_TRANSACTION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                BUY_CITRUS_TRANSACTION, SELL_APPLE_TRANSACTION, SELL_BANANA_TRANSACTION,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "                SELL_CITRUS_TRANSACTION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FangShaoHua94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FangShaoHua94": 76
    }
  }
]
